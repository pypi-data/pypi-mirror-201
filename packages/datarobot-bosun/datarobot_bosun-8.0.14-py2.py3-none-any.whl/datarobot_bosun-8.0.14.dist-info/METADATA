Metadata-Version: 2.1
Name: datarobot-bosun
Version: 8.0.14
Summary: datarobot-bosun module providing Bosun python functionality
Home-page: https://github.com/datarobot/tracking-agent
Author: DataRobot
Author-email: info@datarobot.com
License: DataRobot
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: MacOS
Classifier: Operating System :: POSIX
Classifier: Operating System :: Unix
Requires-Python: >=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*
Description-Content-Type: text/markdown
Requires-Dist: docker
Requires-Dist: kubernetes (>=19.15.0b1)
Requires-Dist: pyyaml
Requires-Dist: pytz
Requires-Dist: boto3 (<2,>=1.11.4)
Requires-Dist: jinja2
Requires-Dist: schema
Requires-Dist: requests
Requires-Dist: future (>=0.16)
Requires-Dist: python-dateutil
Requires-Dist: datarobot-mlops (>=7.1)

# Bosun - DataRobot's MLOps event manager

This is the Python Bosun package which complements the Bosun distribution.
In this package you will find two important component of the Bosun system 
the python plugin framework and the model connector framework.

## Installation
The Bosun wheel is provided as part of the Tracking Agent tarball. To install Bosun python
module:

```pip install datarobot_bosun```

## The Bosun Python Plugin Framework 
This framework provides a simple way to develop a Bosun plugin in Python. 
A Bosun Python plugin is a python class that implements several API methods, one 
method for each Bosun action. The plugin framework provides a runner script that 
is used to run the plugin as an external program. This way the plugin writer does not 
need to worry about handling command line arguments. 

### Example 
```
plugin-runner --plugin test --config my_config.yaml --action pe_status
 --status-file /tmp/status.json
```
The example above will invoke the plugin-runner program which in turn will load and run
the test plugin. The my_config.yaml file will be loaded and the configuration will be 
provided to the plugin. The action to run is "pe_status" which is supposed to return the
status of the prediction environment. The --status-file argument is the path to the status
file that should contain the plugin result of running the action. 

## The Bosun Model Connector Framework:
This framework provides a simple way to develop and test model connectors. 
A model connector is a program that fetches the model artifact given the model metadata.
This framework provides some built in support for models stored
on S3 and local file systems.



