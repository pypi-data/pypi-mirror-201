# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx
import pydantic

from .core.api_error import ApiError
from .types.account import Account
from .types.game import Game
from .types.games_response import GamesResponse
from .types.group import Group
from .types.groups_response import GroupsResponse
from .types.locations_response import LocationsResponse
from .types.photo import Photo
from .types.photos_response import PhotosResponse
from .types.player import Player
from .types.players_response import PlayersResponse
from .types.room import Room


class BuzzshotApi:
    def __init__(self, *, environment: str):
        self._environment = environment

    def list_accounts(self, *, page: typing.Optional[int] = None) -> Account:
        _response = httpx.request(
            "GET", urllib.parse.urljoin(f"{self._environment}/", "api/v2/accounts"), params={"page": page}
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Account, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def retrieve_account(self, id: str) -> Room:
        _response = httpx.request("GET", urllib.parse.urljoin(f"{self._environment}/", f"api/v2/accounts/{id}"))
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Room, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_games(
        self,
        *,
        page: typing.Optional[int] = None,
        complete: typing.Optional[str] = None,
        date: typing.Optional[str] = None,
        before: typing.Optional[str] = None,
        after: typing.Optional[str] = None,
    ) -> GamesResponse:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", "api/v2/games"),
            params={"page": page, "complete": complete, "date": date, "before": before, "after": after},
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GamesResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def retrieve_game(
        self,
        id: str,
        *,
        complete: typing.Optional[str] = None,
        date: typing.Optional[str] = None,
        before: typing.Optional[str] = None,
        after: typing.Optional[str] = None,
    ) -> Game:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", f"api/v2/games/{id}"),
            params={"complete": complete, "date": date, "before": before, "after": after},
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Game, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_groups(
        self,
        *,
        page: typing.Optional[int] = None,
        is_event: typing.Optional[str] = None,
        complete: typing.Optional[str] = None,
    ) -> GroupsResponse:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", "api/v2/groups"),
            params={"page": page, "is_event": is_event, "complete": complete},
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GroupsResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def retrieve_group(
        self, id: str, *, is_event: typing.Optional[str] = None, complete: typing.Optional[str] = None
    ) -> Group:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", f"api/v2/groups/{id}"),
            params={"is_event": is_event, "complete": complete},
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Group, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_players(self, *, page: typing.Optional[int] = None) -> PlayersResponse:
        _response = httpx.request(
            "GET", urllib.parse.urljoin(f"{self._environment}/", "api/v2/players"), params={"page": page}
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PlayersResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def retrieve_player(self, id: str) -> Player:
        _response = httpx.request("GET", urllib.parse.urljoin(f"{self._environment}/", f"api/v2/players/{id}"))
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Player, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_locations(self, *, page: typing.Optional[int] = None) -> LocationsResponse:
        _response = httpx.request(
            "GET", urllib.parse.urljoin(f"{self._environment}/", "api/v2/rooms"), params={"page": page}
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(LocationsResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def retrieve_location(self, id: str) -> Room:
        _response = httpx.request("GET", urllib.parse.urljoin(f"{self._environment}/", f"api/v2/rooms/{id}"))
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Room, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_photos(self, *, page: typing.Optional[int] = None) -> PhotosResponse:
        _response = httpx.request(
            "GET", urllib.parse.urljoin(f"{self._environment}/", "api/v2/photos"), params={"page": page}
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PhotosResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def retrieve_photo(self, photo_id: str) -> Photo:
        _response = httpx.request("GET", urllib.parse.urljoin(f"{self._environment}/", f"api/v2/photos/{photo_id}"))
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Photo, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncBuzzshotApi:
    def __init__(self, *, environment: str):
        self._environment = environment

    async def list_accounts(self, *, page: typing.Optional[int] = None) -> Account:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET", urllib.parse.urljoin(f"{self._environment}/", "api/v2/accounts"), params={"page": page}
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Account, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def retrieve_account(self, id: str) -> Room:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET", urllib.parse.urljoin(f"{self._environment}/", f"api/v2/accounts/{id}")
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Room, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_games(
        self,
        *,
        page: typing.Optional[int] = None,
        complete: typing.Optional[str] = None,
        date: typing.Optional[str] = None,
        before: typing.Optional[str] = None,
        after: typing.Optional[str] = None,
    ) -> GamesResponse:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET",
                urllib.parse.urljoin(f"{self._environment}/", "api/v2/games"),
                params={"page": page, "complete": complete, "date": date, "before": before, "after": after},
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GamesResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def retrieve_game(
        self,
        id: str,
        *,
        complete: typing.Optional[str] = None,
        date: typing.Optional[str] = None,
        before: typing.Optional[str] = None,
        after: typing.Optional[str] = None,
    ) -> Game:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET",
                urllib.parse.urljoin(f"{self._environment}/", f"api/v2/games/{id}"),
                params={"complete": complete, "date": date, "before": before, "after": after},
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Game, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_groups(
        self,
        *,
        page: typing.Optional[int] = None,
        is_event: typing.Optional[str] = None,
        complete: typing.Optional[str] = None,
    ) -> GroupsResponse:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET",
                urllib.parse.urljoin(f"{self._environment}/", "api/v2/groups"),
                params={"page": page, "is_event": is_event, "complete": complete},
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GroupsResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def retrieve_group(
        self, id: str, *, is_event: typing.Optional[str] = None, complete: typing.Optional[str] = None
    ) -> Group:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET",
                urllib.parse.urljoin(f"{self._environment}/", f"api/v2/groups/{id}"),
                params={"is_event": is_event, "complete": complete},
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Group, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_players(self, *, page: typing.Optional[int] = None) -> PlayersResponse:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET", urllib.parse.urljoin(f"{self._environment}/", "api/v2/players"), params={"page": page}
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PlayersResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def retrieve_player(self, id: str) -> Player:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET", urllib.parse.urljoin(f"{self._environment}/", f"api/v2/players/{id}")
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Player, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_locations(self, *, page: typing.Optional[int] = None) -> LocationsResponse:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET", urllib.parse.urljoin(f"{self._environment}/", "api/v2/rooms"), params={"page": page}
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(LocationsResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def retrieve_location(self, id: str) -> Room:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET", urllib.parse.urljoin(f"{self._environment}/", f"api/v2/rooms/{id}")
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Room, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_photos(self, *, page: typing.Optional[int] = None) -> PhotosResponse:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET", urllib.parse.urljoin(f"{self._environment}/", "api/v2/photos"), params={"page": page}
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PhotosResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def retrieve_photo(self, photo_id: str) -> Photo:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET", urllib.parse.urljoin(f"{self._environment}/", f"api/v2/photos/{photo_id}")
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Photo, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
