# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _PaIRS_PIV
else:
    import _PaIRS_PIV

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

MOD_PaIRS = _PaIRS_PIV.MOD_PaIRS
MOD_PIV = _PaIRS_PIV.MOD_PIV
MOD_TrTomo = _PaIRS_PIV.MOD_TrTomo
MOD_TrPathOld = _PaIRS_PIV.MOD_TrPathOld
MOD_TrPath = _PaIRS_PIV.MOD_TrPath
MOD_Disparity = _PaIRS_PIV.MOD_Disparity
MOD_DisparityAvgCorr = _PaIRS_PIV.MOD_DisparityAvgCorr
MOD_StereoPIV = _PaIRS_PIV.MOD_StereoPIV
MOD_Soloff = _PaIRS_PIV.MOD_Soloff
MOD_TomoPIV = _PaIRS_PIV.MOD_TomoPIV
MOD_piv3d = _PaIRS_PIV.MOD_piv3d
MOD_SelfCal = _PaIRS_PIV.MOD_SelfCal
MOD_TomoPI = _PaIRS_PIV.MOD_TomoPI
MOD_RotCalib = _PaIRS_PIV.MOD_RotCalib
MOD_ParCorr = _PaIRS_PIV.MOD_ParCorr

def Version(Flag):
    return _PaIRS_PIV.Version(Flag)
IDEN_INT = _PaIRS_PIV.IDEN_INT
IDEN_DOUBLE = _PaIRS_PIV.IDEN_DOUBLE
IDEN_FLOAT = _PaIRS_PIV.IDEN_FLOAT
IDEN_LONG = _PaIRS_PIV.IDEN_LONG
class PIV_Input(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    RisX = property(_PaIRS_PIV.PIV_Input_RisX_get, _PaIRS_PIV.PIV_Input_RisX_set)
    RisY = property(_PaIRS_PIV.PIV_Input_RisY_get, _PaIRS_PIV.PIV_Input_RisY_set)
    dt = property(_PaIRS_PIV.PIV_Input_dt_get, _PaIRS_PIV.PIV_Input_dt_set)
    ImgH = property(_PaIRS_PIV.PIV_Input_ImgH_get, _PaIRS_PIV.PIV_Input_ImgH_set)
    ImgW = property(_PaIRS_PIV.PIV_Input_ImgW_get, _PaIRS_PIV.PIV_Input_ImgW_set)
    HCellaVec = property(_PaIRS_PIV.PIV_Input_HCellaVec_get, _PaIRS_PIV.PIV_Input_HCellaVec_set)
    WCellaVec = property(_PaIRS_PIV.PIV_Input_WCellaVec_get, _PaIRS_PIV.PIV_Input_WCellaVec_set)
    HOverlapVec = property(_PaIRS_PIV.PIV_Input_HOverlapVec_get, _PaIRS_PIV.PIV_Input_HOverlapVec_set)
    WOverlapVec = property(_PaIRS_PIV.PIV_Input_WOverlapVec_get, _PaIRS_PIV.PIV_Input_WOverlapVec_set)
    SogliaNoise = property(_PaIRS_PIV.PIV_Input_SogliaNoise_get, _PaIRS_PIV.PIV_Input_SogliaNoise_set)
    SogliaStd = property(_PaIRS_PIV.PIV_Input_SogliaStd_get, _PaIRS_PIV.PIV_Input_SogliaStd_set)
    SogliaSN = property(_PaIRS_PIV.PIV_Input_SogliaSN_get, _PaIRS_PIV.PIV_Input_SogliaSN_set)
    SogliaFcl = property(_PaIRS_PIV.PIV_Input_SogliaFcl_get, _PaIRS_PIV.PIV_Input_SogliaFcl_set)
    SogliaMed = property(_PaIRS_PIV.PIV_Input_SogliaMed_get, _PaIRS_PIV.PIV_Input_SogliaMed_set)
    FlagSecMax = property(_PaIRS_PIV.PIV_Input_FlagSecMax_get, _PaIRS_PIV.PIV_Input_FlagSecMax_set)
    SemiDimValid = property(_PaIRS_PIV.PIV_Input_SemiDimValid_get, _PaIRS_PIV.PIV_Input_SemiDimValid_set)
    FlagValidNog = property(_PaIRS_PIV.PIV_Input_FlagValidNog_get, _PaIRS_PIV.PIV_Input_FlagValidNog_set)
    FlagValid = property(_PaIRS_PIV.PIV_Input_FlagValid_get, _PaIRS_PIV.PIV_Input_FlagValid_set)
    FlagAttivaValSN = property(_PaIRS_PIV.PIV_Input_FlagAttivaValSN_get, _PaIRS_PIV.PIV_Input_FlagAttivaValSN_set)
    ErroreMed = property(_PaIRS_PIV.PIV_Input_ErroreMed_get, _PaIRS_PIV.PIV_Input_ErroreMed_set)
    FlagRemNoise = property(_PaIRS_PIV.PIV_Input_FlagRemNoise_get, _PaIRS_PIV.PIV_Input_FlagRemNoise_set)
    IntIniz = property(_PaIRS_PIV.PIV_Input_IntIniz_get, _PaIRS_PIV.PIV_Input_IntIniz_set)
    IntFin = property(_PaIRS_PIV.PIV_Input_IntFin_get, _PaIRS_PIV.PIV_Input_IntFin_set)
    FlagInt = property(_PaIRS_PIV.PIV_Input_FlagInt_get, _PaIRS_PIV.PIV_Input_FlagInt_set)
    IntVel = property(_PaIRS_PIV.PIV_Input_IntVel_get, _PaIRS_PIV.PIV_Input_IntVel_set)
    FlagCorrezioneVel = property(_PaIRS_PIV.PIV_Input_FlagCorrezioneVel_get, _PaIRS_PIV.PIV_Input_FlagCorrezioneVel_set)
    IntCorr = property(_PaIRS_PIV.PIV_Input_IntCorr_get, _PaIRS_PIV.PIV_Input_IntCorr_set)
    FlagWindowing = property(_PaIRS_PIV.PIV_Input_FlagWindowing_get, _PaIRS_PIV.PIV_Input_FlagWindowing_set)
    SemiDimCalcVel = property(_PaIRS_PIV.PIV_Input_SemiDimCalcVel_get, _PaIRS_PIV.PIV_Input_SemiDimCalcVel_set)
    MaxC = property(_PaIRS_PIV.PIV_Input_MaxC_get, _PaIRS_PIV.PIV_Input_MaxC_set)
    MinC = property(_PaIRS_PIV.PIV_Input_MinC_get, _PaIRS_PIV.PIV_Input_MinC_set)
    LarMin = property(_PaIRS_PIV.PIV_Input_LarMin_get, _PaIRS_PIV.PIV_Input_LarMin_set)
    LarMax = property(_PaIRS_PIV.PIV_Input_LarMax_get, _PaIRS_PIV.PIV_Input_LarMax_set)
    FlagCalcVel = property(_PaIRS_PIV.PIV_Input_FlagCalcVel_get, _PaIRS_PIV.PIV_Input_FlagCalcVel_set)
    FlagSommaProd = property(_PaIRS_PIV.PIV_Input_FlagSommaProd_get, _PaIRS_PIV.PIV_Input_FlagSommaProd_set)
    FlagDirectCorr = property(_PaIRS_PIV.PIV_Input_FlagDirectCorr_get, _PaIRS_PIV.PIV_Input_FlagDirectCorr_set)
    FlagBordo = property(_PaIRS_PIV.PIV_Input_FlagBordo_get, _PaIRS_PIV.PIV_Input_FlagBordo_set)
    ItAtt = property(_PaIRS_PIV.PIV_Input_ItAtt_get, _PaIRS_PIV.PIV_Input_ItAtt_set)
    NIterazioni = property(_PaIRS_PIV.PIV_Input_NIterazioni_get, _PaIRS_PIV.PIV_Input_NIterazioni_set)
    NomeFile = property(_PaIRS_PIV.PIV_Input_NomeFile_get, _PaIRS_PIV.PIV_Input_NomeFile_set)
    FlagLog = property(_PaIRS_PIV.PIV_Input_FlagLog_get, _PaIRS_PIV.PIV_Input_FlagLog_set)
    FlagNumThreads = property(_PaIRS_PIV.PIV_Input_FlagNumThreads_get, _PaIRS_PIV.PIV_Input_FlagNumThreads_set)
    Out = property(_PaIRS_PIV.PIV_Input_Out_get, _PaIRS_PIV.PIV_Input_Out_set)
    rImgA = property(_PaIRS_PIV.PIV_Input_rImgA_get, _PaIRS_PIV.PIV_Input_rImgA_set)
    rImgB = property(_PaIRS_PIV.PIV_Input_rImgB_get, _PaIRS_PIV.PIV_Input_rImgB_set)

    def __init__(self):
        _PaIRS_PIV.PIV_Input_swiginit(self, _PaIRS_PIV.new_PIV_Input())
    __swig_destroy__ = _PaIRS_PIV.delete_PIV_Input

# Register PIV_Input in _PaIRS_PIV:
_PaIRS_PIV.PIV_Input_swigregister(PIV_Input)
class ProcessingData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NitTot = property(_PaIRS_PIV.ProcessingData_NitTot_get, _PaIRS_PIV.ProcessingData_NitTot_set)
    It = property(_PaIRS_PIV.ProcessingData_It_get, _PaIRS_PIV.ProcessingData_It_set)
    WCella = property(_PaIRS_PIV.ProcessingData_WCella_get, _PaIRS_PIV.ProcessingData_WCella_set)
    HCella = property(_PaIRS_PIV.ProcessingData_HCella_get, _PaIRS_PIV.ProcessingData_HCella_set)
    W = property(_PaIRS_PIV.ProcessingData_W_get, _PaIRS_PIV.ProcessingData_W_set)
    H = property(_PaIRS_PIV.ProcessingData_H_get, _PaIRS_PIV.ProcessingData_H_set)
    NVect = property(_PaIRS_PIV.ProcessingData_NVect_get, _PaIRS_PIV.ProcessingData_NVect_set)
    ContErorreDc = property(_PaIRS_PIV.ProcessingData_ContErorreDc_get, _PaIRS_PIV.ProcessingData_ContErorreDc_set)
    ContRemNoise = property(_PaIRS_PIV.ProcessingData_ContRemNoise_get, _PaIRS_PIV.ProcessingData_ContRemNoise_set)
    ContCap = property(_PaIRS_PIV.ProcessingData_ContCap_get, _PaIRS_PIV.ProcessingData_ContCap_set)
    Fc = property(_PaIRS_PIV.ProcessingData_Fc_get, _PaIRS_PIV.ProcessingData_Fc_set)
    FcMedia = property(_PaIRS_PIV.ProcessingData_FcMedia_get, _PaIRS_PIV.ProcessingData_FcMedia_set)

    def __init__(self):
        _PaIRS_PIV.ProcessingData_swiginit(self, _PaIRS_PIV.new_ProcessingData())
    __swig_destroy__ = _PaIRS_PIV.delete_ProcessingData

# Register ProcessingData in _PaIRS_PIV:
_PaIRS_PIV.ProcessingData_swigregister(ProcessingData)
class PIV_Output(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PaIRS_PIV.PIV_Output_swiginit(self, _PaIRS_PIV.new_PIV_Output())
    __swig_destroy__ = _PaIRS_PIV.delete_PIV_Output
    u = property(_PaIRS_PIV.PIV_Output_u_get, _PaIRS_PIV.PIV_Output_u_set)
    v = property(_PaIRS_PIV.PIV_Output_v_get, _PaIRS_PIV.PIV_Output_v_set)
    sn = property(_PaIRS_PIV.PIV_Output_sn_get, _PaIRS_PIV.PIV_Output_sn_set)
    FCl = property(_PaIRS_PIV.PIV_Output_FCl_get, _PaIRS_PIV.PIV_Output_FCl_set)
    Info = property(_PaIRS_PIV.PIV_Output_Info_get, _PaIRS_PIV.PIV_Output_Info_set)
    x = property(_PaIRS_PIV.PIV_Output_x_get, _PaIRS_PIV.PIV_Output_x_set)
    y = property(_PaIRS_PIV.PIV_Output_y_get, _PaIRS_PIV.PIV_Output_y_set)
    PD = property(_PaIRS_PIV.PIV_Output_PD_get, _PaIRS_PIV.PIV_Output_PD_set)

# Register PIV_Output in _PaIRS_PIV:
_PaIRS_PIV.PIV_Output_swigregister(PIV_Output)
class PIV(PIV_Output):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Inp = property(_PaIRS_PIV.PIV_Inp_get, _PaIRS_PIV.PIV_Inp_set)

    def __init__(self):
        _PaIRS_PIV.PIV_swiginit(self, _PaIRS_PIV.new_PIV())
    __swig_destroy__ = _PaIRS_PIV.delete_PIV

    def SizeOfReal(self):
        return _PaIRS_PIV.PIV_SizeOfReal(self)

    def PIV_Cfg(self, NomeFile):
        return _PaIRS_PIV.PIV_PIV_Cfg(self, NomeFile)

    def DefaultValues(self):
        return _PaIRS_PIV.PIV_DefaultValues(self)

    def readCfgProc(self, cfgName):
        return _PaIRS_PIV.PIV_readCfgProc(self, cfgName)

    def PIV_Run(self, p=None):
        return _PaIRS_PIV.PIV_PIV_Run(self, p)

    def SetVect(self, p):
        return _PaIRS_PIV.PIV_SetVect(self, p)

    def GetVect(self):
        return _PaIRS_PIV.PIV_GetVect(self)

    def SetImg(self, p):
        return _PaIRS_PIV.PIV_SetImg(self, p)

# Register PIV in _PaIRS_PIV:
_PaIRS_PIV.PIV_swigregister(PIV)

def SizeOfReal():
    return _PaIRS_PIV.SizeOfReal()
class DataFromPIV(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    a = property(_PaIRS_PIV.DataFromPIV_a_get, _PaIRS_PIV.DataFromPIV_a_set)
    b = property(_PaIRS_PIV.DataFromPIV_b_get, _PaIRS_PIV.DataFromPIV_b_set)
    Out = property(_PaIRS_PIV.DataFromPIV_Out_get, _PaIRS_PIV.DataFromPIV_Out_set)

    def __init__(self):
        _PaIRS_PIV.DataFromPIV_swiginit(self, _PaIRS_PIV.new_DataFromPIV())
    __swig_destroy__ = _PaIRS_PIV.delete_DataFromPIV

# Register DataFromPIV in _PaIRS_PIV:
_PaIRS_PIV.DataFromPIV_swigregister(DataFromPIV)
class PyFunOutPIV(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def FunOut(self, a, b, o):
        return _PaIRS_PIV.PyFunOutPIV_FunOut(self, a, b, o)
    __swig_destroy__ = _PaIRS_PIV.delete_PyFunOutPIV

    def __init__(self):
        if self.__class__ == PyFunOutPIV:
            _self = None
        else:
            _self = self
        _PaIRS_PIV.PyFunOutPIV_swiginit(self, _PaIRS_PIV.new_PyFunOutPIV(_self, ))
    def __disown__(self):
        self.this.disown()
        _PaIRS_PIV.disown_PyFunOutPIV(self)
        return weakref.proxy(self)

# Register PyFunOutPIV in _PaIRS_PIV:
_PaIRS_PIV.PyFunOutPIV_swigregister(PyFunOutPIV)

def GetPyFunction(FunOut):
    return _PaIRS_PIV.GetPyFunction(FunOut)

#// PythonOutFromPIV class is defined and derived from C++ class PyFunOutPIV
class PythonOutFromPIV(PyFunOutPIV) :
   Count = 0
#// Define Python class 'constructor'
   def __init__(self) :
#// Call C++ base class constructor
      PyFunOutPIV.__init__(self)

#// Override C++ method: virtual int handle
   def FunOut(self, a, b, o) :
      self.Count += 1
#print(f"PyOut {self.Count} {a}  {b}")
#if self.Count== 2:
#return  -1
      return 0



