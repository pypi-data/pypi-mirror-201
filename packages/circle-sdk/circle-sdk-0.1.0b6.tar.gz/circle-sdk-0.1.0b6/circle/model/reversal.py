# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle import schemas  # noqa: F401


class Reversal(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "reason",
            "amount",
            "fees",
            "updateDate",
            "paymentId",
            "description",
            "id",
            "createDate",
            "status",
        }
        
        class properties:
            id = schemas.UUIDSchema
            paymentId = schemas.UUIDSchema
        
            @staticmethod
            def amount() -> typing.Type['FiatMoneyUsd']:
                return FiatMoneyUsd
            description = schemas.StrSchema
        
            @staticmethod
            def status() -> typing.Type['CancelRefundReversalStatus']:
                return CancelRefundReversalStatus
        
            @staticmethod
            def reason() -> typing.Type['ReversalReason']:
                return ReversalReason
        
            @staticmethod
            def fees() -> typing.Type['FiatMoneyUsd']:
                return FiatMoneyUsd
            createDate = schemas.StrSchema
            updateDate = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "paymentId": paymentId,
                "amount": amount,
                "description": description,
                "status": status,
                "reason": reason,
                "fees": fees,
                "createDate": createDate,
                "updateDate": updateDate,
            }
    
    reason: 'ReversalReason'
    amount: 'FiatMoneyUsd'
    fees: 'FiatMoneyUsd'
    updateDate: MetaOapg.properties.updateDate
    paymentId: MetaOapg.properties.paymentId
    description: MetaOapg.properties.description
    id: MetaOapg.properties.id
    createDate: MetaOapg.properties.createDate
    status: 'CancelRefundReversalStatus'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paymentId"]) -> MetaOapg.properties.paymentId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> 'FiatMoneyUsd': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'CancelRefundReversalStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reason"]) -> 'ReversalReason': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fees"]) -> 'FiatMoneyUsd': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createDate"]) -> MetaOapg.properties.createDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updateDate"]) -> MetaOapg.properties.updateDate: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "paymentId", "amount", "description", "status", "reason", "fees", "createDate", "updateDate", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paymentId"]) -> MetaOapg.properties.paymentId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> 'FiatMoneyUsd': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'CancelRefundReversalStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> 'ReversalReason': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fees"]) -> 'FiatMoneyUsd': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createDate"]) -> MetaOapg.properties.createDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updateDate"]) -> MetaOapg.properties.updateDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "paymentId", "amount", "description", "status", "reason", "fees", "createDate", "updateDate", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        reason: 'ReversalReason',
        amount: 'FiatMoneyUsd',
        fees: 'FiatMoneyUsd',
        updateDate: typing.Union[MetaOapg.properties.updateDate, str, ],
        paymentId: typing.Union[MetaOapg.properties.paymentId, str, uuid.UUID, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, ],
        createDate: typing.Union[MetaOapg.properties.createDate, str, ],
        status: 'CancelRefundReversalStatus',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Reversal':
        return super().__new__(
            cls,
            *_args,
            reason=reason,
            amount=amount,
            fees=fees,
            updateDate=updateDate,
            paymentId=paymentId,
            description=description,
            id=id,
            createDate=createDate,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )

from circle.model.cancel_refund_reversal_status import CancelRefundReversalStatus
from circle.model.fiat_money_usd import FiatMoneyUsd
from circle.model.reversal_reason import ReversalReason
