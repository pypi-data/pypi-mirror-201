# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from circle import schemas  # noqa: F401


class AchCreationRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "metadata",
            "billingDetails",
            "idempotencyKey",
            "plaidProcessorToken",
        }
        
        class properties:
            idempotencyKey = schemas.UUIDSchema
            plaidProcessorToken = schemas.StrSchema
        
            @staticmethod
            def billingDetails() -> typing.Type['AchBillingDetails']:
                return AchBillingDetails
        
            @staticmethod
            def metadata() -> typing.Type['MetadataCardAndAch']:
                return MetadataCardAndAch
        
            @staticmethod
            def bankAccountType() -> typing.Type['AchAccountType']:
                return AchAccountType
            __annotations__ = {
                "idempotencyKey": idempotencyKey,
                "plaidProcessorToken": plaidProcessorToken,
                "billingDetails": billingDetails,
                "metadata": metadata,
                "bankAccountType": bankAccountType,
            }
    
    metadata: 'MetadataCardAndAch'
    billingDetails: 'AchBillingDetails'
    idempotencyKey: MetaOapg.properties.idempotencyKey
    plaidProcessorToken: MetaOapg.properties.plaidProcessorToken
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idempotencyKey"]) -> MetaOapg.properties.idempotencyKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["plaidProcessorToken"]) -> MetaOapg.properties.plaidProcessorToken: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billingDetails"]) -> 'AchBillingDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> 'MetadataCardAndAch': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bankAccountType"]) -> 'AchAccountType': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["idempotencyKey", "plaidProcessorToken", "billingDetails", "metadata", "bankAccountType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idempotencyKey"]) -> MetaOapg.properties.idempotencyKey: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["plaidProcessorToken"]) -> MetaOapg.properties.plaidProcessorToken: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billingDetails"]) -> 'AchBillingDetails': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> 'MetadataCardAndAch': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bankAccountType"]) -> typing.Union['AchAccountType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["idempotencyKey", "plaidProcessorToken", "billingDetails", "metadata", "bankAccountType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        metadata: 'MetadataCardAndAch',
        billingDetails: 'AchBillingDetails',
        idempotencyKey: typing.Union[MetaOapg.properties.idempotencyKey, str, uuid.UUID, ],
        plaidProcessorToken: typing.Union[MetaOapg.properties.plaidProcessorToken, str, ],
        bankAccountType: typing.Union['AchAccountType', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AchCreationRequest':
        return super().__new__(
            cls,
            *_args,
            metadata=metadata,
            billingDetails=billingDetails,
            idempotencyKey=idempotencyKey,
            plaidProcessorToken=plaidProcessorToken,
            bankAccountType=bankAccountType,
            _configuration=_configuration,
            **kwargs,
        )

from circle.model.ach_account_type import AchAccountType
from circle.model.ach_billing_details import AchBillingDetails
from circle.model.metadata_card_and_ach import MetadataCardAndAch
