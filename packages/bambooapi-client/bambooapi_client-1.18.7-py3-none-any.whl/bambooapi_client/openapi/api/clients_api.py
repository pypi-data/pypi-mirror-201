"""
    Bamboo Flexibility API

     This API provides access to flexibility assets managed by Bamboo Energy: - Create and list flexibility sites & assets - Obtain activations for specific assets - Post and get measurements for specific assets   # noqa: E501

    The version of the OpenAPI document: 1.18.7
    Contact: development@bambooenergy.tech
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from bambooapi_client.openapi.api_client import ApiClient, Endpoint as _Endpoint
from bambooapi_client.openapi.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from bambooapi_client.openapi.model.client import Client
from bambooapi_client.openapi.model.client_create import ClientCreate
from bambooapi_client.openapi.model.client_statistics import ClientStatistics
from bambooapi_client.openapi.model.client_update import ClientUpdate
from bambooapi_client.openapi.model.energy_market_operations import EnergyMarketOperations
from bambooapi_client.openapi.model.flexibility_market_operations import FlexibilityMarketOperations
from bambooapi_client.openapi.model.http400_bad_request import HTTP400BadRequest
from bambooapi_client.openapi.model.http401_unauthorized import HTTP401Unauthorized
from bambooapi_client.openapi.model.http403_forbidden import HTTP403Forbidden
from bambooapi_client.openapi.model.http404_not_found import HTTP404NotFound
from bambooapi_client.openapi.model.http422_unprocessable_entity import HTTP422UnprocessableEntity
from bambooapi_client.openapi.model.http501_not_implemented import HTTP501NotImplemented
from bambooapi_client.openapi.model.http_validation_error import HTTPValidationError
from bambooapi_client.openapi.model.market_operations_enum import MarketOperationsEnum
from bambooapi_client.openapi.model.portfolio_energy_market_statistics import PortfolioEnergyMarketStatistics
from bambooapi_client.openapi.model.portfolio_flexibility_market_statistics import PortfolioFlexibilityMarketStatistics
from bambooapi_client.openapi.model.site_data_point import SiteDataPoint


class ClientsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_client_endpoint = _Endpoint(
            settings={
                'response_type': (Client,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/clients',
                'operation_id': 'create_client',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_create',
                ],
                'required': [
                    'client_create',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_create':
                        (ClientCreate,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'client_create': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.delete_client_endpoint = _Endpoint(
            settings={
                'response_type': (Client,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/clients/{client_id}',
                'operation_id': 'delete_client',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_id',
                    'delete_influxdb_bucket',
                ],
                'required': [
                    'client_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'client_id',
                ]
            },
            root_map={
                'validations': {
                    ('client_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1000,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_id':
                        (int,),
                    'delete_influxdb_bucket':
                        (bool,),
                },
                'attribute_map': {
                    'client_id': 'client_id',
                    'delete_influxdb_bucket': 'delete_influxdb_bucket',
                },
                'location_map': {
                    'client_id': 'path',
                    'delete_influxdb_bucket': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_client_baseline_forecast_endpoint = _Endpoint(
            settings={
                'response_type': ([SiteDataPoint],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/clients/{client_id}/forecasts/baseline',
                'operation_id': 'get_client_baseline_forecast',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_id',
                    'start_time',
                    'end_time',
                    'horizon',
                    'forecast_type',
                    'frequency',
                ],
                'required': [
                    'client_id',
                    'start_time',
                    'end_time',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_id':
                        (int,),
                    'start_time':
                        (datetime,),
                    'end_time':
                        (datetime,),
                    'horizon':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'forecast_type':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'frequency':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'client_id': 'client_id',
                    'start_time': 'start_time',
                    'end_time': 'end_time',
                    'horizon': 'horizon',
                    'forecast_type': 'forecast_type',
                    'frequency': 'frequency',
                },
                'location_map': {
                    'client_id': 'path',
                    'start_time': 'query',
                    'end_time': 'query',
                    'horizon': 'query',
                    'forecast_type': 'query',
                    'frequency': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_client_energy_market_operations_statistics_endpoint = _Endpoint(
            settings={
                'response_type': (PortfolioEnergyMarketStatistics,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/clients/{client_id}/markets/energy/{market_id}/statistics',
                'operation_id': 'get_client_energy_market_operations_statistics',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_id',
                    'market_id',
                    'start_time',
                    'end_time',
                ],
                'required': [
                    'client_id',
                    'market_id',
                    'start_time',
                    'end_time',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'market_id',
                ]
            },
            root_map={
                'validations': {
                    ('market_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_id':
                        (int,),
                    'market_id':
                        (int,),
                    'start_time':
                        (datetime,),
                    'end_time':
                        (datetime,),
                },
                'attribute_map': {
                    'client_id': 'client_id',
                    'market_id': 'market_id',
                    'start_time': 'start_time',
                    'end_time': 'end_time',
                },
                'location_map': {
                    'client_id': 'path',
                    'market_id': 'path',
                    'start_time': 'query',
                    'end_time': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_client_flexibility_forecast_endpoint = _Endpoint(
            settings={
                'response_type': ([SiteDataPoint],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/clients/{client_id}/forecasts/flexibility',
                'operation_id': 'get_client_flexibility_forecast',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_id',
                    'start_time',
                    'end_time',
                    'frequency',
                    'horizon',
                    'forecast_type',
                    'ramping',
                ],
                'required': [
                    'client_id',
                    'start_time',
                    'end_time',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_id':
                        (int,),
                    'start_time':
                        (datetime,),
                    'end_time':
                        (datetime,),
                    'frequency':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'horizon':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'forecast_type':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'ramping':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'client_id': 'client_id',
                    'start_time': 'start_time',
                    'end_time': 'end_time',
                    'frequency': 'frequency',
                    'horizon': 'horizon',
                    'forecast_type': 'forecast_type',
                    'ramping': 'ramping',
                },
                'location_map': {
                    'client_id': 'path',
                    'start_time': 'query',
                    'end_time': 'query',
                    'frequency': 'query',
                    'horizon': 'query',
                    'forecast_type': 'query',
                    'ramping': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_client_flexibility_market_operations_statistics_endpoint = _Endpoint(
            settings={
                'response_type': (PortfolioFlexibilityMarketStatistics,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/clients/{client_id}/markets/flexibility/{market_id}/statistics',
                'operation_id': 'get_client_flexibility_market_operations_statistics',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_id',
                    'market_id',
                    'start_time',
                    'end_time',
                ],
                'required': [
                    'client_id',
                    'market_id',
                    'start_time',
                    'end_time',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'market_id',
                ]
            },
            root_map={
                'validations': {
                    ('market_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_id':
                        (int,),
                    'market_id':
                        (int,),
                    'start_time':
                        (datetime,),
                    'end_time':
                        (datetime,),
                },
                'attribute_map': {
                    'client_id': 'client_id',
                    'market_id': 'market_id',
                    'start_time': 'start_time',
                    'end_time': 'end_time',
                },
                'location_map': {
                    'client_id': 'path',
                    'market_id': 'path',
                    'start_time': 'query',
                    'end_time': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_client_id_by_name_endpoint = _Endpoint(
            settings={
                'response_type': (int,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/clients/id/{client_name}',
                'operation_id': 'get_client_id_by_name',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_name',
                ],
                'required': [
                    'client_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_name':
                        (str,),
                },
                'attribute_map': {
                    'client_name': 'client_name',
                },
                'location_map': {
                    'client_name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_client_logo_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/clients/{client_id}/logo',
                'operation_id': 'get_client_logo',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_id',
                ],
                'required': [
                    'client_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'client_id',
                ]
            },
            root_map={
                'validations': {
                    ('client_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1000,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_id':
                        (int,),
                },
                'attribute_map': {
                    'client_id': 'client_id',
                },
                'location_map': {
                    'client_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'image/png',
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_client_statistics_endpoint = _Endpoint(
            settings={
                'response_type': (ClientStatistics,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/clients/{client_id}/statistics',
                'operation_id': 'get_client_statistics',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_id',
                    'start_time',
                    'end_time',
                ],
                'required': [
                    'client_id',
                    'start_time',
                    'end_time',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_id':
                        (int,),
                    'start_time':
                        (datetime,),
                    'end_time':
                        (datetime,),
                },
                'attribute_map': {
                    'client_id': 'client_id',
                    'start_time': 'start_time',
                    'end_time': 'end_time',
                },
                'location_map': {
                    'client_id': 'path',
                    'start_time': 'query',
                    'end_time': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_client_sum_of_measurements_endpoint = _Endpoint(
            settings={
                'response_type': ([SiteDataPoint],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/clients/{client_id}/meters/measurements',
                'operation_id': 'get_client_sum_of_measurements',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_id',
                    'start_time',
                    'end_time',
                    'frequency',
                    'based_on_load',
                ],
                'required': [
                    'client_id',
                    'start_time',
                    'end_time',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_id':
                        (int,),
                    'start_time':
                        (datetime,),
                    'end_time':
                        (datetime,),
                    'frequency':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'based_on_load':
                        (bool,),
                },
                'attribute_map': {
                    'client_id': 'client_id',
                    'start_time': 'start_time',
                    'end_time': 'end_time',
                    'frequency': 'frequency',
                    'based_on_load': 'based_on_load',
                },
                'location_map': {
                    'client_id': 'path',
                    'start_time': 'query',
                    'end_time': 'query',
                    'frequency': 'query',
                    'based_on_load': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_clients_endpoint = _Endpoint(
            settings={
                'response_type': ([Client],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/clients',
                'operation_id': 'list_clients',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_client_endpoint = _Endpoint(
            settings={
                'response_type': (Client,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/clients/{client_id}',
                'operation_id': 'read_client',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_id',
                ],
                'required': [
                    'client_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'client_id',
                ]
            },
            root_map={
                'validations': {
                    ('client_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1000,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_id':
                        (int,),
                },
                'attribute_map': {
                    'client_id': 'client_id',
                },
                'location_map': {
                    'client_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_client_energy_market_operations_endpoint = _Endpoint(
            settings={
                'response_type': (EnergyMarketOperations,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/clients/{client_id}/markets/energy/{market_id}/operations',
                'operation_id': 'read_client_energy_market_operations',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_id',
                    'market_id',
                    'start_time',
                    'end_time',
                    'operations',
                ],
                'required': [
                    'client_id',
                    'market_id',
                    'start_time',
                    'end_time',
                ],
                'nullable': [
                ],
                'enum': [
                    'operations',
                ],
                'validation': [
                    'market_id',
                ]
            },
            root_map={
                'validations': {
                    ('market_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                    ('operations',): {

                        "BIDS": "bids",
                        "CLEARINGS": "clearings",
                        "PROFITS": "profits"
                    },
                },
                'openapi_types': {
                    'client_id':
                        (int,),
                    'market_id':
                        (int,),
                    'start_time':
                        (datetime,),
                    'end_time':
                        (datetime,),
                    'operations':
                        ([str],),
                },
                'attribute_map': {
                    'client_id': 'client_id',
                    'market_id': 'market_id',
                    'start_time': 'start_time',
                    'end_time': 'end_time',
                    'operations': 'operations',
                },
                'location_map': {
                    'client_id': 'path',
                    'market_id': 'path',
                    'start_time': 'query',
                    'end_time': 'query',
                    'operations': 'query',
                },
                'collection_format_map': {
                    'operations': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_client_flexibility_market_operations_endpoint = _Endpoint(
            settings={
                'response_type': (FlexibilityMarketOperations,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/clients/{client_id}/markets/flexibility/{market_id}/operations',
                'operation_id': 'read_client_flexibility_market_operations',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_id',
                    'market_id',
                    'start_time',
                    'end_time',
                    'operations',
                ],
                'required': [
                    'client_id',
                    'market_id',
                    'start_time',
                    'end_time',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'market_id',
                ]
            },
            root_map={
                'validations': {
                    ('market_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_id':
                        (int,),
                    'market_id':
                        (int,),
                    'start_time':
                        (datetime,),
                    'end_time':
                        (datetime,),
                    'operations':
                        ([MarketOperationsEnum],),
                },
                'attribute_map': {
                    'client_id': 'client_id',
                    'market_id': 'market_id',
                    'start_time': 'start_time',
                    'end_time': 'end_time',
                    'operations': 'operations',
                },
                'location_map': {
                    'client_id': 'path',
                    'market_id': 'path',
                    'start_time': 'query',
                    'end_time': 'query',
                    'operations': 'query',
                },
                'collection_format_map': {
                    'operations': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_flexibility_market_activations_endpoint = _Endpoint(
            settings={
                'response_type': (FlexibilityMarketOperations,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/clients/{client_id}/activations',
                'operation_id': 'read_flexibility_market_activations',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_id',
                    'start_time',
                    'end_time',
                ],
                'required': [
                    'client_id',
                    'start_time',
                    'end_time',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_id':
                        (int,),
                    'start_time':
                        (datetime,),
                    'end_time':
                        (datetime,),
                },
                'attribute_map': {
                    'client_id': 'client_id',
                    'start_time': 'start_time',
                    'end_time': 'end_time',
                },
                'location_map': {
                    'client_id': 'path',
                    'start_time': 'query',
                    'end_time': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_client_endpoint = _Endpoint(
            settings={
                'response_type': (Client,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/clients/{client_id}',
                'operation_id': 'update_client',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_id',
                    'client_update',
                ],
                'required': [
                    'client_id',
                    'client_update',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'client_id',
                ]
            },
            root_map={
                'validations': {
                    ('client_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1000,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_id':
                        (int,),
                    'client_update':
                        (ClientUpdate,),
                },
                'attribute_map': {
                    'client_id': 'client_id',
                },
                'location_map': {
                    'client_id': 'path',
                    'client_update': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def create_client(
        self,
        client_create,
        **kwargs
    ):
        """Create a Client  # noqa: E501

        Create a Client with all the information.  - **name**: each client must have a unique name - **display_name**: a display name can optionally be assigned to a client  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_client(client_create, async_req=True)
        >>> result = thread.get()

        Args:
            client_create (ClientCreate):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Client
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['client_create'] = \
            client_create
        return self.create_client_endpoint.call_with_http_info(**kwargs)

    def delete_client(
        self,
        client_id,
        **kwargs
    ):
        """Delete a Client  # noqa: E501

        Delete a Client.  **WARNING!: Client deletion is PERMANENT!** (no way to recover deleted client)  **WARNING!: Deleting a Client also deletes the associated measurements,  forecasts or tariffs if the `delete_influxdb_bucket` option is set to True!**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_client(client_id, async_req=True)
        >>> result = thread.get()

        Args:
            client_id (int):

        Keyword Args:
            delete_influxdb_bucket (bool): [optional] if omitted the server will use the default value of False
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Client
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['client_id'] = \
            client_id
        return self.delete_client_endpoint.call_with_http_info(**kwargs)

    def get_client_baseline_forecast(
        self,
        client_id,
        start_time,
        end_time,
        **kwargs
    ):
        """Get the sum of load baseline forecasts for a client  # noqa: E501

        Get the sum of load baseline forecasts for a client.  Returns a time series.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_client_baseline_forecast(client_id, start_time, end_time, async_req=True)
        >>> result = thread.get()

        Args:
            client_id (int):
            start_time (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\").
            end_time (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\").

        Keyword Args:
            horizon (bool, date, datetime, dict, float, int, list, str, none_type): Deprecated, use `forecast_type` instead.. [optional]
            forecast_type (bool, date, datetime, dict, float, int, list, str, none_type): The option `best_available` shows the best forecast that is available for each timestamp, favoring intra-day over day-ahead.. [optional]
            frequency (bool, date, datetime, dict, float, int, list, str, none_type): Aggregate measurements to this frequency. The measurements will include data for whole periods.  For example, if _start_time_ = '2021-05-01T10:23:00Z', _end_time_ = '2021-05-01T10:49:00Z' and _frequency_ = 'quarter', the backend queries data from '2021-05-01T10:15:00Z' to '2021-05-01T11:00:00Z' (not included) and resamples it every 15 minutes.  . [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [SiteDataPoint]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['client_id'] = \
            client_id
        kwargs['start_time'] = \
            start_time
        kwargs['end_time'] = \
            end_time
        return self.get_client_baseline_forecast_endpoint.call_with_http_info(**kwargs)

    def get_client_energy_market_operations_statistics(
        self,
        client_id,
        market_id,
        start_time,
        end_time,
        **kwargs
    ):
        """Get statistics of a client's operations on an energy market  # noqa: E501

        Get statistics of a client's operations on an energy market.  This endpoint assumes that a client has just one portfolio participating in the specified market.  Implementation also assumes (though doesn't check) that such portfolio is not shared by any other client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_client_energy_market_operations_statistics(client_id, market_id, start_time, end_time, async_req=True)
        >>> result = thread.get()

        Args:
            client_id (int):
            market_id (int):
            start_time (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\").
            end_time (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\").

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PortfolioEnergyMarketStatistics
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['client_id'] = \
            client_id
        kwargs['market_id'] = \
            market_id
        kwargs['start_time'] = \
            start_time
        kwargs['end_time'] = \
            end_time
        return self.get_client_energy_market_operations_statistics_endpoint.call_with_http_info(**kwargs)

    def get_client_flexibility_forecast(
        self,
        client_id,
        start_time,
        end_time,
        **kwargs
    ):
        """Get the sum of flexibility forecasts for a client  # noqa: E501

        Get the sum of flexibility forecasts for a client in a time series.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_client_flexibility_forecast(client_id, start_time, end_time, async_req=True)
        >>> result = thread.get()

        Args:
            client_id (int):
            start_time (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\").
            end_time (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\").

        Keyword Args:
            frequency (bool, date, datetime, dict, float, int, list, str, none_type): Aggregate measurements to this frequency. The measurements will include data for whole periods.  For example, if _start_time_ = '2021-05-01T10:23:00Z', _end_time_ = '2021-05-01T10:49:00Z' and _frequency_ = 'quarter', the backend queries data from '2021-05-01T10:15:00Z' to '2021-05-01T11:00:00Z' (not included) and resamples it every 15 minutes.  . [optional]
            horizon (bool, date, datetime, dict, float, int, list, str, none_type): Deprecated, use `forecast_type` instead.. [optional]
            forecast_type (bool, date, datetime, dict, float, int, list, str, none_type): The option `best_available` shows the best forecast that is available for each timestamp, favoring intra-day over day-ahead.. [optional]
            ramping (bool, date, datetime, dict, float, int, list, str, none_type): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [SiteDataPoint]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['client_id'] = \
            client_id
        kwargs['start_time'] = \
            start_time
        kwargs['end_time'] = \
            end_time
        return self.get_client_flexibility_forecast_endpoint.call_with_http_info(**kwargs)

    def get_client_flexibility_market_operations_statistics(
        self,
        client_id,
        market_id,
        start_time,
        end_time,
        **kwargs
    ):
        """Get statistics of a client's operations on a flexibility market  # noqa: E501

        Get statistics of a client's operations on a flexibility market.  This endpoint assumes that a client has just one portfolio participating in the specified market.  Implementation also assumes (though doesn't check) that such portfolio is not shared by any other client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_client_flexibility_market_operations_statistics(client_id, market_id, start_time, end_time, async_req=True)
        >>> result = thread.get()

        Args:
            client_id (int):
            market_id (int):
            start_time (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\").
            end_time (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\").

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PortfolioFlexibilityMarketStatistics
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['client_id'] = \
            client_id
        kwargs['market_id'] = \
            market_id
        kwargs['start_time'] = \
            start_time
        kwargs['end_time'] = \
            end_time
        return self.get_client_flexibility_market_operations_statistics_endpoint.call_with_http_info(**kwargs)

    def get_client_id_by_name(
        self,
        client_name,
        **kwargs
    ):
        """Retrieve Client ID given a Client Name  # noqa: E501

        Retrieve Client ID given a Client Name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_client_id_by_name(client_name, async_req=True)
        >>> result = thread.get()

        Args:
            client_name (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            int
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['client_name'] = \
            client_name
        return self.get_client_id_by_name_endpoint.call_with_http_info(**kwargs)

    def get_client_logo(
        self,
        client_id,
        **kwargs
    ):
        """Get the logo of a Client  # noqa: E501

        Get the logo of a Client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_client_logo(client_id, async_req=True)
        >>> result = thread.get()

        Args:
            client_id (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['client_id'] = \
            client_id
        return self.get_client_logo_endpoint.call_with_http_info(**kwargs)

    def get_client_statistics(
        self,
        client_id,
        start_time,
        end_time,
        **kwargs
    ):
        """Get summary statistics of a client  # noqa: E501

        Get summary statistics of a client.  1. Total consumption of all flexumers. 2. Total number of flexumers. 3. Total number of market activations. 4. Total profits of all portfolios. **This assumes each portfolio belongs to only one client.**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_client_statistics(client_id, start_time, end_time, async_req=True)
        >>> result = thread.get()

        Args:
            client_id (int):
            start_time (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\").
            end_time (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\").

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ClientStatistics
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['client_id'] = \
            client_id
        kwargs['start_time'] = \
            start_time
        kwargs['end_time'] = \
            end_time
        return self.get_client_statistics_endpoint.call_with_http_info(**kwargs)

    def get_client_sum_of_measurements(
        self,
        client_id,
        start_time,
        end_time,
        **kwargs
    ):
        """Get the sum of measurements of all sites  # noqa: E501

        Get the sum of meters of all sites in a time series.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_client_sum_of_measurements(client_id, start_time, end_time, async_req=True)
        >>> result = thread.get()

        Args:
            client_id (int):
            start_time (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\").
            end_time (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\").

        Keyword Args:
            frequency (bool, date, datetime, dict, float, int, list, str, none_type): Aggregate measurements to this frequency. The measurements will include data for whole periods.  For example, if _start_time_ = '2021-05-01T10:23:00Z', _end_time_ = '2021-05-01T10:49:00Z' and _frequency_ = 'quarter', the backend queries data from '2021-05-01T10:15:00Z' to '2021-05-01T11:00:00Z' (not included) and resamples it every 15 minutes.  . [optional]
            based_on_load (bool): [optional] if omitted the server will use the default value of True
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [SiteDataPoint]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['client_id'] = \
            client_id
        kwargs['start_time'] = \
            start_time
        kwargs['end_time'] = \
            end_time
        return self.get_client_sum_of_measurements_endpoint.call_with_http_info(**kwargs)

    def list_clients(
        self,
        **kwargs
    ):
        """List all Clients  # noqa: E501

        Retrieve clients.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_clients(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [Client]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.list_clients_endpoint.call_with_http_info(**kwargs)

    def read_client(
        self,
        client_id,
        **kwargs
    ):
        """Info about a specific Client  # noqa: E501

        Info about a specific Client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_client(client_id, async_req=True)
        >>> result = thread.get()

        Args:
            client_id (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Client
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['client_id'] = \
            client_id
        return self.read_client_endpoint.call_with_http_info(**kwargs)

    def read_client_energy_market_operations(
        self,
        client_id,
        market_id,
        start_time,
        end_time,
        **kwargs
    ):
        """Read operations of a portfolio on an energy market  # noqa: E501

        Get energy market operations of a client.  This endpoint assumes that a client has just one portfolio participating in the market specified.  Implementation also assumes (though doesn't check) that such portfolio is not shared by any other client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_client_energy_market_operations(client_id, market_id, start_time, end_time, async_req=True)
        >>> result = thread.get()

        Args:
            client_id (int):
            market_id (int):
            start_time (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\").
            end_time (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\").

        Keyword Args:
            operations ([str]): [optional] if omitted the server will use the default value of ["bids","clearings","profits"]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EnergyMarketOperations
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['client_id'] = \
            client_id
        kwargs['market_id'] = \
            market_id
        kwargs['start_time'] = \
            start_time
        kwargs['end_time'] = \
            end_time
        return self.read_client_energy_market_operations_endpoint.call_with_http_info(**kwargs)

    def read_client_flexibility_market_operations(
        self,
        client_id,
        market_id,
        start_time,
        end_time,
        **kwargs
    ):
        """Read operations of a portfolio on a flexibility market  # noqa: E501

        Get flexibility market operations of a client.  This endpoint assumes that a client has just one portfolio participating in the market specified.  Implementation also assumes (though doesn't check) that such portfolio is not shared by any other client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_client_flexibility_market_operations(client_id, market_id, start_time, end_time, async_req=True)
        >>> result = thread.get()

        Args:
            client_id (int):
            market_id (int):
            start_time (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\").
            end_time (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\").

        Keyword Args:
            operations ([MarketOperationsEnum]): [optional] if omitted the server will use the default value of ["bids","clearings","activations","responses","profits"]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            FlexibilityMarketOperations
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['client_id'] = \
            client_id
        kwargs['market_id'] = \
            market_id
        kwargs['start_time'] = \
            start_time
        kwargs['end_time'] = \
            end_time
        return self.read_client_flexibility_market_operations_endpoint.call_with_http_info(**kwargs)

    def read_flexibility_market_activations(
        self,
        client_id,
        start_time,
        end_time,
        **kwargs
    ):
        """Read activation operations of all portfolios in flexibility markets  # noqa: E501

        Read flexibility market activations of all portfolios.  Power and Price of simultaneous activations (if any) across all portfolios are added up.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_flexibility_market_activations(client_id, start_time, end_time, async_req=True)
        >>> result = thread.get()

        Args:
            client_id (int):
            start_time (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\").
            end_time (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\").

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            FlexibilityMarketOperations
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['client_id'] = \
            client_id
        kwargs['start_time'] = \
            start_time
        kwargs['end_time'] = \
            end_time
        return self.read_flexibility_market_activations_endpoint.call_with_http_info(**kwargs)

    def update_client(
        self,
        client_id,
        client_update,
        **kwargs
    ):
        """Update an existing Client  # noqa: E501

        Update information about a Client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_client(client_id, client_update, async_req=True)
        >>> result = thread.get()

        Args:
            client_id (int):
            client_update (ClientUpdate):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Client
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['client_id'] = \
            client_id
        kwargs['client_update'] = \
            client_update
        return self.update_client_endpoint.call_with_http_info(**kwargs)

