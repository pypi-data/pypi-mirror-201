"""
    Bamboo Flexibility API

     This API provides access to flexibility assets managed by Bamboo Energy: - Create and list flexibility sites & assets - Obtain activations for specific assets - Post and get measurements for specific assets   # noqa: E501

    The version of the OpenAPI document: 1.18.7
    Contact: development@bambooenergy.tech
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from bambooapi_client.openapi.api_client import ApiClient, Endpoint as _Endpoint
from bambooapi_client.openapi.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from bambooapi_client.openapi.model.http400_bad_request import HTTP400BadRequest
from bambooapi_client.openapi.model.http401_unauthorized import HTTP401Unauthorized
from bambooapi_client.openapi.model.http403_forbidden import HTTP403Forbidden
from bambooapi_client.openapi.model.http404_not_found import HTTP404NotFound
from bambooapi_client.openapi.model.http_validation_error import HTTPValidationError
from bambooapi_client.openapi.model.weather_data_point import WeatherDataPoint
from bambooapi_client.openapi.model.weather_station import WeatherStation
from bambooapi_client.openapi.model.weather_station_create import WeatherStationCreate
from bambooapi_client.openapi.model.weather_station_update import WeatherStationUpdate


class WeatherStationsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_weather_station_endpoint = _Endpoint(
            settings={
                'response_type': (WeatherStation,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/weather',
                'operation_id': 'create_weather_station',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'weather_station_create',
                ],
                'required': [
                    'weather_station_create',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'weather_station_create':
                        (WeatherStationCreate,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'weather_station_create': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.delete_weather_station_endpoint = _Endpoint(
            settings={
                'response_type': (WeatherStation,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/weather/{station_id}',
                'operation_id': 'delete_weather_station',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'station_id',
                ],
                'required': [
                    'station_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'station_id',
                ]
            },
            root_map={
                'validations': {
                    ('station_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1000,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'station_id':
                        (int,),
                },
                'attribute_map': {
                    'station_id': 'station_id',
                },
                'location_map': {
                    'station_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_station_id_by_name_endpoint = _Endpoint(
            settings={
                'response_type': (int,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/weather/id/{station_name}',
                'operation_id': 'get_station_id_by_name',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'station_name',
                ],
                'required': [
                    'station_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'station_name':
                        (str,),
                },
                'attribute_map': {
                    'station_name': 'station_name',
                },
                'location_map': {
                    'station_name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.insert_weather_forecasts_endpoint = _Endpoint(
            settings={
                'response_type': ([WeatherDataPoint],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/weather/{station_id}/forecasts',
                'operation_id': 'insert_weather_forecasts',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'station_id',
                    'weather_data_point',
                ],
                'required': [
                    'station_id',
                    'weather_data_point',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'station_id',
                ]
            },
            root_map={
                'validations': {
                    ('station_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1000,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'station_id':
                        (int,),
                    'weather_data_point':
                        ([WeatherDataPoint],),
                },
                'attribute_map': {
                    'station_id': 'station_id',
                },
                'location_map': {
                    'station_id': 'path',
                    'weather_data_point': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.list_weather_stations_endpoint = _Endpoint(
            settings={
                'response_type': ([WeatherStation],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/weather',
                'operation_id': 'list_weather_stations',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_weather_forecasts_endpoint = _Endpoint(
            settings={
                'response_type': ([WeatherDataPoint],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/weather/{station_id}/forecasts',
                'operation_id': 'read_weather_forecasts',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'station_id',
                    'period',
                    'start_time',
                    'end_time',
                    'frequency',
                ],
                'required': [
                    'station_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'station_id',
                ]
            },
            root_map={
                'validations': {
                    ('station_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1000,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'station_id':
                        (int,),
                    'period':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'start_time':
                        (str,),
                    'end_time':
                        (str,),
                    'frequency':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'station_id': 'station_id',
                    'period': 'period',
                    'start_time': 'start_time',
                    'end_time': 'end_time',
                    'frequency': 'frequency',
                },
                'location_map': {
                    'station_id': 'path',
                    'period': 'query',
                    'start_time': 'query',
                    'end_time': 'query',
                    'frequency': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_weather_station_endpoint = _Endpoint(
            settings={
                'response_type': (WeatherStation,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/weather/{station_id}',
                'operation_id': 'read_weather_station',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'station_id',
                ],
                'required': [
                    'station_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'station_id',
                ]
            },
            root_map={
                'validations': {
                    ('station_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1000,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'station_id':
                        (int,),
                },
                'attribute_map': {
                    'station_id': 'station_id',
                },
                'location_map': {
                    'station_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_weather_station_endpoint = _Endpoint(
            settings={
                'response_type': (WeatherStation,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/weather/{station_id}',
                'operation_id': 'update_weather_station',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'station_id',
                    'weather_station_update',
                ],
                'required': [
                    'station_id',
                    'weather_station_update',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'station_id',
                ]
            },
            root_map={
                'validations': {
                    ('station_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1000,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'station_id':
                        (int,),
                    'weather_station_update':
                        (WeatherStationUpdate,),
                },
                'attribute_map': {
                    'station_id': 'station_id',
                },
                'location_map': {
                    'station_id': 'path',
                    'weather_station_update': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def create_weather_station(
        self,
        weather_station_create,
        **kwargs
    ):
        """Create a WeatherStation  # noqa: E501

        Create a Weather Station with all the information.  - **station_name**: each station must have a name - **latitude**: a station can optionally have a latitude - **longitude**: a station can optionally have a longitude - **elevation**: a station can optionally have an elevation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_weather_station(weather_station_create, async_req=True)
        >>> result = thread.get()

        Args:
            weather_station_create (WeatherStationCreate):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            WeatherStation
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['weather_station_create'] = \
            weather_station_create
        return self.create_weather_station_endpoint.call_with_http_info(**kwargs)

    def delete_weather_station(
        self,
        station_id,
        **kwargs
    ):
        """Delete a Weather Station  # noqa: E501

        Delete a Weather Station.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_weather_station(station_id, async_req=True)
        >>> result = thread.get()

        Args:
            station_id (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            WeatherStation
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['station_id'] = \
            station_id
        return self.delete_weather_station_endpoint.call_with_http_info(**kwargs)

    def get_station_id_by_name(
        self,
        station_name,
        **kwargs
    ):
        """Retrieve Weather Station ID given a Weather Station Name  # noqa: E501

        Retrieve Weather Station ID given a Weather Station Name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_station_id_by_name(station_name, async_req=True)
        >>> result = thread.get()

        Args:
            station_name (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            int
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['station_name'] = \
            station_name
        return self.get_station_id_by_name_endpoint.call_with_http_info(**kwargs)

    def insert_weather_forecasts(
        self,
        station_id,
        weather_data_point,
        **kwargs
    ):
        """Insert forecasts for a given Weather Station  # noqa: E501

        Insert forecasts for a given Weather Station.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.insert_weather_forecasts(station_id, weather_data_point, async_req=True)
        >>> result = thread.get()

        Args:
            station_id (int):
            weather_data_point ([WeatherDataPoint]):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [WeatherDataPoint]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['station_id'] = \
            station_id
        kwargs['weather_data_point'] = \
            weather_data_point
        return self.insert_weather_forecasts_endpoint.call_with_http_info(**kwargs)

    def list_weather_stations(
        self,
        **kwargs
    ):
        """List all Weather Stations  # noqa: E501

        List all Weather Stations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_weather_stations(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [WeatherStation]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.list_weather_stations_endpoint.call_with_http_info(**kwargs)

    def read_weather_forecasts(
        self,
        station_id,
        **kwargs
    ):
        """Return forecasts for a given Weather Station  # noqa: E501

        Return forecasts for a given Weather Station.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_weather_forecasts(station_id, async_req=True)
        >>> result = thread.get()

        Args:
            station_id (int):

        Keyword Args:
            period (bool, date, datetime, dict, float, int, list, str, none_type): [optional]
            start_time (str): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\"). Make sure to specify the timezone either with \"Z\" or \"+00:00\". [optional]
            end_time (str): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\"). Make sure to specify the timezone either with \"Z\" or \"+00:00\". [optional]
            frequency (bool, date, datetime, dict, float, int, list, str, none_type): Aggregate measurements to this frequency. The measurements will include data for whole periods.  For example, if _start_time_ = '2021-05-01T10:23:00Z', _end_time_ = '2021-05-01T10:49:00Z' and _frequency_ = 'quarter', the backend queries data from '2021-05-01T10:15:00Z' to '2021-05-01T11:00:00Z' (not included) and resamples it every 15 minutes.  . [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [WeatherDataPoint]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['station_id'] = \
            station_id
        return self.read_weather_forecasts_endpoint.call_with_http_info(**kwargs)

    def read_weather_station(
        self,
        station_id,
        **kwargs
    ):
        """Info about a specific Weather Station  # noqa: E501

        Info about a specific Weather Station.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_weather_station(station_id, async_req=True)
        >>> result = thread.get()

        Args:
            station_id (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            WeatherStation
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['station_id'] = \
            station_id
        return self.read_weather_station_endpoint.call_with_http_info(**kwargs)

    def update_weather_station(
        self,
        station_id,
        weather_station_update,
        **kwargs
    ):
        """Update an existing Weather Station  # noqa: E501

        Update information about a Weather Station.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_weather_station(station_id, weather_station_update, async_req=True)
        >>> result = thread.get()

        Args:
            station_id (int):
            weather_station_update (WeatherStationUpdate):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            WeatherStation
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['station_id'] = \
            station_id
        kwargs['weather_station_update'] = \
            weather_station_update
        return self.update_weather_station_endpoint.call_with_http_info(**kwargs)

