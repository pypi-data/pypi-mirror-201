"""
    Bamboo Flexibility API

     This API provides access to flexibility assets managed by Bamboo Energy: - Create and list flexibility sites & assets - Obtain activations for specific assets - Post and get measurements for specific assets   # noqa: E501

    The version of the OpenAPI document: 1.18.7
    Contact: development@bambooenergy.tech
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from bambooapi_client.openapi.api_client import ApiClient, Endpoint as _Endpoint
from bambooapi_client.openapi.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from bambooapi_client.openapi.model.alarm_event_create import AlarmEventCreate
from bambooapi_client.openapi.model.event_create_response import EventCreateResponse
from bambooapi_client.openapi.model.event_in_db import EventInDB
from bambooapi_client.openapi.model.event_list_item import EventListItem
from bambooapi_client.openapi.model.event_status_enum import EventStatusEnum
from bambooapi_client.openapi.model.event_type_enum import EventTypeEnum
from bambooapi_client.openapi.model.http401_unauthorized import HTTP401Unauthorized
from bambooapi_client.openapi.model.http403_forbidden import HTTP403Forbidden
from bambooapi_client.openapi.model.http404_not_found import HTTP404NotFound
from bambooapi_client.openapi.model.http_validation_error import HTTPValidationError
from bambooapi_client.openapi.model.out_of_bounds_event_create import OutOfBoundsEventCreate
from bambooapi_client.openapi.model.scheduled_unavailability_event_create import ScheduledUnavailabilityEventCreate
from bambooapi_client.openapi.model.telemetry_start_event_create import TelemetryStartEventCreate
from bambooapi_client.openapi.model.telemetry_stop_event_create import TelemetryStopEventCreate


class EventsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.cancel_scheduled_unavailability_endpoint = _Endpoint(
            settings={
                'response_type': (EventListItem,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/events/scheduled_unavailability/{event_id}',
                'operation_id': 'cancel_scheduled_unavailability',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'event_id',
                ],
                'required': [
                    'event_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'event_id',
                ]
            },
            root_map={
                'validations': {
                    ('event_id',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'event_id':
                        (int,),
                },
                'attribute_map': {
                    'event_id': 'event_id',
                },
                'location_map': {
                    'event_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.create_alarm_endpoint = _Endpoint(
            settings={
                'response_type': (EventCreateResponse,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/events/alarm',
                'operation_id': 'create_alarm',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'alarm_event_create',
                ],
                'required': [
                    'alarm_event_create',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'alarm_event_create':
                        (AlarmEventCreate,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'alarm_event_create': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.create_out_of_bounds_endpoint = _Endpoint(
            settings={
                'response_type': (EventCreateResponse,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/events/out_of_bounds',
                'operation_id': 'create_out_of_bounds',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'out_of_bounds_event_create',
                ],
                'required': [
                    'out_of_bounds_event_create',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'out_of_bounds_event_create':
                        (OutOfBoundsEventCreate,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'out_of_bounds_event_create': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.create_schdeuled_unavailability_endpoint = _Endpoint(
            settings={
                'response_type': (EventCreateResponse,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/events/scheduled_unavailability',
                'operation_id': 'create_schdeuled_unavailability',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'scheduled_unavailability_event_create',
                ],
                'required': [
                    'scheduled_unavailability_event_create',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'scheduled_unavailability_event_create':
                        (ScheduledUnavailabilityEventCreate,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'scheduled_unavailability_event_create': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.create_telemetry_start_endpoint = _Endpoint(
            settings={
                'response_type': (EventCreateResponse,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/events/telemetry_start',
                'operation_id': 'create_telemetry_start',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'telemetry_start_event_create',
                ],
                'required': [
                    'telemetry_start_event_create',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'telemetry_start_event_create':
                        (TelemetryStartEventCreate,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'telemetry_start_event_create': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.create_telemetry_stop_endpoint = _Endpoint(
            settings={
                'response_type': (EventCreateResponse,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/events/telemetry_stop',
                'operation_id': 'create_telemetry_stop',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'telemetry_stop_event_create',
                ],
                'required': [
                    'telemetry_stop_event_create',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'telemetry_stop_event_create':
                        (TelemetryStopEventCreate,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'telemetry_stop_event_create': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.list_events_endpoint = _Endpoint(
            settings={
                'response_type': ([EventListItem],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/events',
                'operation_id': 'list_events',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'start_time',
                    'end_time',
                    'site_id',
                    'devices_names',
                    'event_type',
                    'event_status',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'site_id',
                ]
            },
            root_map={
                'validations': {
                    ('site_id',): {

                        'inclusive_maximum': 99999,
                        'inclusive_minimum': 10000,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'start_time':
                        (datetime,),
                    'end_time':
                        (datetime,),
                    'site_id':
                        (int,),
                    'devices_names':
                        ([str],),
                    'event_type':
                        ([EventTypeEnum],),
                    'event_status':
                        ([EventStatusEnum],),
                },
                'attribute_map': {
                    'start_time': 'start_time',
                    'end_time': 'end_time',
                    'site_id': 'site_id',
                    'devices_names': 'devices_names',
                    'event_type': 'event_type',
                    'event_status': 'event_status',
                },
                'location_map': {
                    'start_time': 'query',
                    'end_time': 'query',
                    'site_id': 'query',
                    'devices_names': 'query',
                    'event_type': 'query',
                    'event_status': 'query',
                },
                'collection_format_map': {
                    'devices_names': 'multi',
                    'event_type': 'multi',
                    'event_status': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_event_endpoint = _Endpoint(
            settings={
                'response_type': (EventInDB,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/events/{event_id}',
                'operation_id': 'read_event',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'event_id',
                ],
                'required': [
                    'event_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'event_id',
                ]
            },
            root_map={
                'validations': {
                    ('event_id',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'event_id':
                        (int,),
                },
                'attribute_map': {
                    'event_id': 'event_id',
                },
                'location_map': {
                    'event_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def cancel_scheduled_unavailability(
        self,
        event_id,
        **kwargs
    ):
        """Cancel a ScheduledUnavailability event  # noqa: E501

        Cancel a ScheduledUnavailability event  Update the ScheduledUnavailability event status to CANCELLED, and create a CancelScheduledUnavailability event to record this action.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cancel_scheduled_unavailability(event_id, async_req=True)
        >>> result = thread.get()

        Args:
            event_id (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EventListItem
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['event_id'] = \
            event_id
        return self.cancel_scheduled_unavailability_endpoint.call_with_http_info(**kwargs)

    def create_alarm(
        self,
        alarm_event_create,
        **kwargs
    ):
        """Create an Alarm event  # noqa: E501

        Create an Alarm event with the following fields:  - **time**: datetime of the measurement that generate the alarm - **site_id**: ID of the site - **device_name**: name of the device - **variable**: name of the field - **value**: alarm value - **description** (optional): additional info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_alarm(alarm_event_create, async_req=True)
        >>> result = thread.get()

        Args:
            alarm_event_create (AlarmEventCreate):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EventCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['alarm_event_create'] = \
            alarm_event_create
        return self.create_alarm_endpoint.call_with_http_info(**kwargs)

    def create_out_of_bounds(
        self,
        out_of_bounds_event_create,
        **kwargs
    ):
        """Create an OutOfBounds event  # noqa: E501

        Create an OutOfBounds event with the following fields:  - **time**: datetime of the out-of-bounds measurement - **site_id**: ID of the site - **device_name**: name of the device - **variable**: name of the field - **value**: out-of-bounds value - **min** (optional): lower limit for variable - **max** (optional): upper limit for variable - **description** (optional): additional info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_out_of_bounds(out_of_bounds_event_create, async_req=True)
        >>> result = thread.get()

        Args:
            out_of_bounds_event_create (OutOfBoundsEventCreate):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EventCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['out_of_bounds_event_create'] = \
            out_of_bounds_event_create
        return self.create_out_of_bounds_endpoint.call_with_http_info(**kwargs)

    def create_schdeuled_unavailability(
        self,
        scheduled_unavailability_event_create,
        **kwargs
    ):
        """Create a ScheduledUnavailability event for a site  # noqa: E501

        Create a ScheduledUnavailability event with the following fields:  - **start_time**: beginning of scheduled unavailabitity period - **end_time**: end of scheduled unavailabitity period - **site_id**: ID of site affected by the scheduled unavailabitity event - **description** (optional): reason for unavailabitity or additional info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_schdeuled_unavailability(scheduled_unavailability_event_create, async_req=True)
        >>> result = thread.get()

        Args:
            scheduled_unavailability_event_create (ScheduledUnavailabilityEventCreate):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EventCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['scheduled_unavailability_event_create'] = \
            scheduled_unavailability_event_create
        return self.create_schdeuled_unavailability_endpoint.call_with_http_info(**kwargs)

    def create_telemetry_start(
        self,
        telemetry_start_event_create,
        **kwargs
    ):
        """Create a TelemetryStart event  # noqa: E501

        Create a TelemetryStart event with the following fields:  - **time**: datetime of first received measurement - **site_id**: ID of the site - **device_name** (optional): name of the device - **description** (optional): additional info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_telemetry_start(telemetry_start_event_create, async_req=True)
        >>> result = thread.get()

        Args:
            telemetry_start_event_create (TelemetryStartEventCreate):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EventCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['telemetry_start_event_create'] = \
            telemetry_start_event_create
        return self.create_telemetry_start_endpoint.call_with_http_info(**kwargs)

    def create_telemetry_stop(
        self,
        telemetry_stop_event_create,
        **kwargs
    ):
        """Create a TelemetryStop event  # noqa: E501

        Create a TelemetryStop event with the following fields:  - **time**: datetime of last received measurement - **site_id**: ID of the site - **device_name** (optional): name of the device - **description** (optional): additional info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_telemetry_stop(telemetry_stop_event_create, async_req=True)
        >>> result = thread.get()

        Args:
            telemetry_stop_event_create (TelemetryStopEventCreate):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EventCreateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['telemetry_stop_event_create'] = \
            telemetry_stop_event_create
        return self.create_telemetry_stop_endpoint.call_with_http_info(**kwargs)

    def list_events(
        self,
        **kwargs
    ):
        """List events  # noqa: E501

        List and filter events.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_events(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            start_time (datetime): [optional]
            end_time (datetime): [optional]
            site_id (int): [optional]
            devices_names ([str]): Allows adding device names to filter. [optional]
            event_type ([EventTypeEnum]): [optional]
            event_status ([EventStatusEnum]): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [EventListItem]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.list_events_endpoint.call_with_http_info(**kwargs)

    def read_event(
        self,
        event_id,
        **kwargs
    ):
        """Read an event  # noqa: E501

        Read an event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_event(event_id, async_req=True)
        >>> result = thread.get()

        Args:
            event_id (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EventInDB
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['event_id'] = \
            event_id
        return self.read_event_endpoint.call_with_http_info(**kwargs)

