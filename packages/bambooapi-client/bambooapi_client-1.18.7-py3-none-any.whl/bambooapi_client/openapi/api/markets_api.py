"""
    Bamboo Flexibility API

     This API provides access to flexibility assets managed by Bamboo Energy: - Create and list flexibility sites & assets - Obtain activations for specific assets - Post and get measurements for specific assets   # noqa: E501

    The version of the OpenAPI document: 1.18.7
    Contact: development@bambooenergy.tech
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from bambooapi_client.openapi.api_client import ApiClient, Endpoint as _Endpoint
from bambooapi_client.openapi.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from bambooapi_client.openapi.model.energy_market import EnergyMarket
from bambooapi_client.openapi.model.energy_market_create_update import EnergyMarketCreateUpdate
from bambooapi_client.openapi.model.energy_market_price import EnergyMarketPrice
from bambooapi_client.openapi.model.energy_market_prices_update import EnergyMarketPricesUpdate
from bambooapi_client.openapi.model.energy_market_statistics import EnergyMarketStatistics
from bambooapi_client.openapi.model.flexibility_market import FlexibilityMarket
from bambooapi_client.openapi.model.flexibility_market_create_update import FlexibilityMarketCreateUpdate
from bambooapi_client.openapi.model.flexibility_market_price import FlexibilityMarketPrice
from bambooapi_client.openapi.model.flexibility_market_prices_update import FlexibilityMarketPricesUpdate
from bambooapi_client.openapi.model.flexibility_market_statistics import FlexibilityMarketStatistics
from bambooapi_client.openapi.model.http400_bad_request import HTTP400BadRequest
from bambooapi_client.openapi.model.http401_unauthorized import HTTP401Unauthorized
from bambooapi_client.openapi.model.http403_forbidden import HTTP403Forbidden
from bambooapi_client.openapi.model.http404_not_found import HTTP404NotFound
from bambooapi_client.openapi.model.http_validation_error import HTTPValidationError
from bambooapi_client.openapi.model.market_list_item import MarketListItem


class MarketsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_energy_market_endpoint = _Endpoint(
            settings={
                'response_type': (EnergyMarket,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/markets/energy',
                'operation_id': 'create_energy_market',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'energy_market_create_update',
                ],
                'required': [
                    'energy_market_create_update',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'energy_market_create_update':
                        (EnergyMarketCreateUpdate,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'energy_market_create_update': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.create_flexibility_market_endpoint = _Endpoint(
            settings={
                'response_type': (FlexibilityMarket,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/markets/flexibility',
                'operation_id': 'create_flexibility_market',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'flexibility_market_create_update',
                ],
                'required': [
                    'flexibility_market_create_update',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'flexibility_market_create_update':
                        (FlexibilityMarketCreateUpdate,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'flexibility_market_create_update': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.delete_market_endpoint = _Endpoint(
            settings={
                'response_type': (MarketListItem,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/markets/{market_id}',
                'operation_id': 'delete_market',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'market_id',
                ],
                'required': [
                    'market_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'market_id',
                ]
            },
            root_map={
                'validations': {
                    ('market_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'market_id':
                        (int,),
                },
                'attribute_map': {
                    'market_id': 'market_id',
                },
                'location_map': {
                    'market_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_energy_market_statistics_endpoint = _Endpoint(
            settings={
                'response_type': (EnergyMarketStatistics,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/markets/energy/{market_id}/statistics',
                'operation_id': 'get_energy_market_statistics',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'market_id',
                    'start_time',
                    'end_time',
                    'units',
                ],
                'required': [
                    'market_id',
                    'start_time',
                    'end_time',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'market_id',
                ]
            },
            root_map={
                'validations': {
                    ('market_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'market_id':
                        (int,),
                    'start_time':
                        (datetime,),
                    'end_time':
                        (datetime,),
                    'units':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'market_id': 'market_id',
                    'start_time': 'start_time',
                    'end_time': 'end_time',
                    'units': 'units',
                },
                'location_map': {
                    'market_id': 'path',
                    'start_time': 'query',
                    'end_time': 'query',
                    'units': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_flexibility_market_statistics_endpoint = _Endpoint(
            settings={
                'response_type': (FlexibilityMarketStatistics,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/markets/flexibility/{market_id}/statistics',
                'operation_id': 'get_flexibility_market_statistics',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'market_id',
                    'start_time',
                    'end_time',
                    'units',
                ],
                'required': [
                    'market_id',
                    'start_time',
                    'end_time',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'market_id',
                ]
            },
            root_map={
                'validations': {
                    ('market_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'market_id':
                        (int,),
                    'start_time':
                        (datetime,),
                    'end_time':
                        (datetime,),
                    'units':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'market_id': 'market_id',
                    'start_time': 'start_time',
                    'end_time': 'end_time',
                    'units': 'units',
                },
                'location_map': {
                    'market_id': 'path',
                    'start_time': 'query',
                    'end_time': 'query',
                    'units': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_markets_endpoint = _Endpoint(
            settings={
                'response_type': ([MarketListItem],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/markets',
                'operation_id': 'list_markets',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_energy_market_endpoint = _Endpoint(
            settings={
                'response_type': (EnergyMarket,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/markets/energy/{market_id}',
                'operation_id': 'read_energy_market',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'market_id',
                ],
                'required': [
                    'market_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'market_id',
                ]
            },
            root_map={
                'validations': {
                    ('market_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'market_id':
                        (int,),
                },
                'attribute_map': {
                    'market_id': 'market_id',
                },
                'location_map': {
                    'market_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_energy_market_prices_endpoint = _Endpoint(
            settings={
                'response_type': ([EnergyMarketPrice],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/markets/energy/{market_id}/prices',
                'operation_id': 'read_energy_market_prices',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'market_id',
                    'start_time',
                    'end_time',
                    'units',
                ],
                'required': [
                    'market_id',
                    'start_time',
                    'end_time',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'market_id',
                ]
            },
            root_map={
                'validations': {
                    ('market_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'market_id':
                        (int,),
                    'start_time':
                        (datetime,),
                    'end_time':
                        (datetime,),
                    'units':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'market_id': 'market_id',
                    'start_time': 'start_time',
                    'end_time': 'end_time',
                    'units': 'units',
                },
                'location_map': {
                    'market_id': 'path',
                    'start_time': 'query',
                    'end_time': 'query',
                    'units': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_flexibility_market_endpoint = _Endpoint(
            settings={
                'response_type': (FlexibilityMarket,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/markets/flexibility/{market_id}',
                'operation_id': 'read_flexibility_market',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'market_id',
                ],
                'required': [
                    'market_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'market_id',
                ]
            },
            root_map={
                'validations': {
                    ('market_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'market_id':
                        (int,),
                },
                'attribute_map': {
                    'market_id': 'market_id',
                },
                'location_map': {
                    'market_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_flexibility_market_prices_endpoint = _Endpoint(
            settings={
                'response_type': ([FlexibilityMarketPrice],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/markets/flexibility/{market_id}/prices',
                'operation_id': 'read_flexibility_market_prices',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'market_id',
                    'start_time',
                    'end_time',
                    'units',
                ],
                'required': [
                    'market_id',
                    'start_time',
                    'end_time',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'market_id',
                ]
            },
            root_map={
                'validations': {
                    ('market_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'market_id':
                        (int,),
                    'start_time':
                        (datetime,),
                    'end_time':
                        (datetime,),
                    'units':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'market_id': 'market_id',
                    'start_time': 'start_time',
                    'end_time': 'end_time',
                    'units': 'units',
                },
                'location_map': {
                    'market_id': 'path',
                    'start_time': 'query',
                    'end_time': 'query',
                    'units': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_energy_market_endpoint = _Endpoint(
            settings={
                'response_type': (EnergyMarket,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/markets/energy/{market_id}',
                'operation_id': 'update_energy_market',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'market_id',
                    'energy_market_create_update',
                ],
                'required': [
                    'market_id',
                    'energy_market_create_update',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'market_id',
                ]
            },
            root_map={
                'validations': {
                    ('market_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1000,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'market_id':
                        (int,),
                    'energy_market_create_update':
                        (EnergyMarketCreateUpdate,),
                },
                'attribute_map': {
                    'market_id': 'market_id',
                },
                'location_map': {
                    'market_id': 'path',
                    'energy_market_create_update': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_energy_market_prices_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/markets/energy/{market_id}/prices',
                'operation_id': 'update_energy_market_prices',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'market_id',
                    'energy_market_prices_update',
                ],
                'required': [
                    'market_id',
                    'energy_market_prices_update',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'market_id',
                ]
            },
            root_map={
                'validations': {
                    ('market_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'market_id':
                        (int,),
                    'energy_market_prices_update':
                        (EnergyMarketPricesUpdate,),
                },
                'attribute_map': {
                    'market_id': 'market_id',
                },
                'location_map': {
                    'market_id': 'path',
                    'energy_market_prices_update': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_flexibility_market_endpoint = _Endpoint(
            settings={
                'response_type': (FlexibilityMarket,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/markets/flexibility/{market_id}',
                'operation_id': 'update_flexibility_market',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'market_id',
                    'flexibility_market_create_update',
                ],
                'required': [
                    'market_id',
                    'flexibility_market_create_update',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'market_id',
                ]
            },
            root_map={
                'validations': {
                    ('market_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'market_id':
                        (int,),
                    'flexibility_market_create_update':
                        (FlexibilityMarketCreateUpdate,),
                },
                'attribute_map': {
                    'market_id': 'market_id',
                },
                'location_map': {
                    'market_id': 'path',
                    'flexibility_market_create_update': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_flexibility_market_prices_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/markets/flexibility/{market_id}/prices',
                'operation_id': 'update_flexibility_market_prices',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'market_id',
                    'flexibility_market_prices_update',
                ],
                'required': [
                    'market_id',
                    'flexibility_market_prices_update',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'market_id',
                ]
            },
            root_map={
                'validations': {
                    ('market_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'market_id':
                        (int,),
                    'flexibility_market_prices_update':
                        (FlexibilityMarketPricesUpdate,),
                },
                'attribute_map': {
                    'market_id': 'market_id',
                },
                'location_map': {
                    'market_id': 'path',
                    'flexibility_market_prices_update': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def create_energy_market(
        self,
        energy_market_create_update,
        **kwargs
    ):
        """Create an Energy Market  # noqa: E501

        Create an Energy Market.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_energy_market(energy_market_create_update, async_req=True)
        >>> result = thread.get()

        Args:
            energy_market_create_update (EnergyMarketCreateUpdate):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EnergyMarket
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['energy_market_create_update'] = \
            energy_market_create_update
        return self.create_energy_market_endpoint.call_with_http_info(**kwargs)

    def create_flexibility_market(
        self,
        flexibility_market_create_update,
        **kwargs
    ):
        """Create a Flexibility Market  # noqa: E501

        Create a Flexibility Market.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_flexibility_market(flexibility_market_create_update, async_req=True)
        >>> result = thread.get()

        Args:
            flexibility_market_create_update (FlexibilityMarketCreateUpdate):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            FlexibilityMarket
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['flexibility_market_create_update'] = \
            flexibility_market_create_update
        return self.create_flexibility_market_endpoint.call_with_http_info(**kwargs)

    def delete_market(
        self,
        market_id,
        **kwargs
    ):
        """Delete a Market  # noqa: E501

        Delete a Market.  **WARNING!: Market deletion is PERMANENT!** (no way to recover deleted Market)  **WARNING!: Deleting a Market does not delete the associated time series prices!**  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_market(market_id, async_req=True)
        >>> result = thread.get()

        Args:
            market_id (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            MarketListItem
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['market_id'] = \
            market_id
        return self.delete_market_endpoint.call_with_http_info(**kwargs)

    def get_energy_market_statistics(
        self,
        market_id,
        start_time,
        end_time,
        **kwargs
    ):
        """Get energy market statistics  # noqa: E501

        Get energy market statistics.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_energy_market_statistics(market_id, start_time, end_time, async_req=True)
        >>> result = thread.get()

        Args:
            market_id (int):
            start_time (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\").
            end_time (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\").

        Keyword Args:
            units (bool, date, datetime, dict, float, int, list, str, none_type): If **MW**, energy price statistics are in **€/MWh**. If **KW**, the statistics are in **€/KWh**.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EnergyMarketStatistics
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['market_id'] = \
            market_id
        kwargs['start_time'] = \
            start_time
        kwargs['end_time'] = \
            end_time
        return self.get_energy_market_statistics_endpoint.call_with_http_info(**kwargs)

    def get_flexibility_market_statistics(
        self,
        market_id,
        start_time,
        end_time,
        **kwargs
    ):
        """Get flexibility market statistics  # noqa: E501

        Get flexibility market statistics.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_flexibility_market_statistics(market_id, start_time, end_time, async_req=True)
        >>> result = thread.get()

        Args:
            market_id (int):
            start_time (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\").
            end_time (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\").

        Keyword Args:
            units (bool, date, datetime, dict, float, int, list, str, none_type): If **MW**, energy price statistics are in **€/MWh**, and capacity price statistics are in **€/MW**. If **KW**, energy price statistics are in **€/KWh**, and capacity price statistics are in **€/KW**.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            FlexibilityMarketStatistics
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['market_id'] = \
            market_id
        kwargs['start_time'] = \
            start_time
        kwargs['end_time'] = \
            end_time
        return self.get_flexibility_market_statistics_endpoint.call_with_http_info(**kwargs)

    def list_markets(
        self,
        **kwargs
    ):
        """List all Markets  # noqa: E501

        List all Markets.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_markets(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [MarketListItem]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.list_markets_endpoint.call_with_http_info(**kwargs)

    def read_energy_market(
        self,
        market_id,
        **kwargs
    ):
        """Info about an Energy Market  # noqa: E501

        Info about an Energy Market.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_energy_market(market_id, async_req=True)
        >>> result = thread.get()

        Args:
            market_id (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EnergyMarket
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['market_id'] = \
            market_id
        return self.read_energy_market_endpoint.call_with_http_info(**kwargs)

    def read_energy_market_prices(
        self,
        market_id,
        start_time,
        end_time,
        **kwargs
    ):
        """Get energy market prices  # noqa: E501

        Get energy market prices.  The frequency of the time series is the same that the frequency downloaded from ESIOS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_energy_market_prices(market_id, start_time, end_time, async_req=True)
        >>> result = thread.get()

        Args:
            market_id (int):
            start_time (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\").
            end_time (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\").

        Keyword Args:
            units (bool, date, datetime, dict, float, int, list, str, none_type): If **MW**, return energy market prices in **€/MWh** and capacity prices in **€/MW**. If **KW**, return energy market prices in **€/KWh** and capacity prices in **€/KW**.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [EnergyMarketPrice]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['market_id'] = \
            market_id
        kwargs['start_time'] = \
            start_time
        kwargs['end_time'] = \
            end_time
        return self.read_energy_market_prices_endpoint.call_with_http_info(**kwargs)

    def read_flexibility_market(
        self,
        market_id,
        **kwargs
    ):
        """Info about a Flexibility Market  # noqa: E501

        Info about a Flexibility Market.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_flexibility_market(market_id, async_req=True)
        >>> result = thread.get()

        Args:
            market_id (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            FlexibilityMarket
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['market_id'] = \
            market_id
        return self.read_flexibility_market_endpoint.call_with_http_info(**kwargs)

    def read_flexibility_market_prices(
        self,
        market_id,
        start_time,
        end_time,
        **kwargs
    ):
        """Get flexibility market prices  # noqa: E501

        Get flexibility market prices.  The frequency of the time series is the same that the frequency downloaded from ESIOS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_flexibility_market_prices(market_id, start_time, end_time, async_req=True)
        >>> result = thread.get()

        Args:
            market_id (int):
            start_time (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\").
            end_time (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\").

        Keyword Args:
            units (bool, date, datetime, dict, float, int, list, str, none_type): If **MW**, return energy market prices in **€/MWh** and capacity prices in **€/MW**. If **KW**, return energy market prices in **€/KWh** and capacity prices in **€/KW**.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [FlexibilityMarketPrice]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['market_id'] = \
            market_id
        kwargs['start_time'] = \
            start_time
        kwargs['end_time'] = \
            end_time
        return self.read_flexibility_market_prices_endpoint.call_with_http_info(**kwargs)

    def update_energy_market(
        self,
        market_id,
        energy_market_create_update,
        **kwargs
    ):
        """Update an existing Energy Market  # noqa: E501

        Update an existing Energy Market.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_energy_market(market_id, energy_market_create_update, async_req=True)
        >>> result = thread.get()

        Args:
            market_id (int):
            energy_market_create_update (EnergyMarketCreateUpdate):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EnergyMarket
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['market_id'] = \
            market_id
        kwargs['energy_market_create_update'] = \
            energy_market_create_update
        return self.update_energy_market_endpoint.call_with_http_info(**kwargs)

    def update_energy_market_prices(
        self,
        market_id,
        energy_market_prices_update,
        **kwargs
    ):
        """Insert energy market prices  # noqa: E501

        Insert energy market prices time series.  Energy price units must be €/MWh.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_energy_market_prices(market_id, energy_market_prices_update, async_req=True)
        >>> result = thread.get()

        Args:
            market_id (int):
            energy_market_prices_update (EnergyMarketPricesUpdate):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['market_id'] = \
            market_id
        kwargs['energy_market_prices_update'] = \
            energy_market_prices_update
        return self.update_energy_market_prices_endpoint.call_with_http_info(**kwargs)

    def update_flexibility_market(
        self,
        market_id,
        flexibility_market_create_update,
        **kwargs
    ):
        """Update an existing Flexibility Market  # noqa: E501

        Update an existing Flexibility Market.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_flexibility_market(market_id, flexibility_market_create_update, async_req=True)
        >>> result = thread.get()

        Args:
            market_id (int):
            flexibility_market_create_update (FlexibilityMarketCreateUpdate):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            FlexibilityMarket
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['market_id'] = \
            market_id
        kwargs['flexibility_market_create_update'] = \
            flexibility_market_create_update
        return self.update_flexibility_market_endpoint.call_with_http_info(**kwargs)

    def update_flexibility_market_prices(
        self,
        market_id,
        flexibility_market_prices_update,
        **kwargs
    ):
        """Insert flexibility market prices  # noqa: E501

        Insert flexibility market prices time series.  Energy price units must be €/MWh. Capacity price units must be €/MW.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_flexibility_market_prices(market_id, flexibility_market_prices_update, async_req=True)
        >>> result = thread.get()

        Args:
            market_id (int):
            flexibility_market_prices_update (FlexibilityMarketPricesUpdate):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['market_id'] = \
            market_id
        kwargs['flexibility_market_prices_update'] = \
            flexibility_market_prices_update
        return self.update_flexibility_market_prices_endpoint.call_with_http_info(**kwargs)

