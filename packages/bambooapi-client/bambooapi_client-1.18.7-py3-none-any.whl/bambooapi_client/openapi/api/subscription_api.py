"""
    Bamboo Flexibility API

     This API provides access to flexibility assets managed by Bamboo Energy: - Create and list flexibility sites & assets - Obtain activations for specific assets - Post and get measurements for specific assets   # noqa: E501

    The version of the OpenAPI document: 1.18.7
    Contact: development@bambooenergy.tech
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from bambooapi_client.openapi.api_client import ApiClient, Endpoint as _Endpoint
from bambooapi_client.openapi.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from bambooapi_client.openapi.model.event_type_enum import EventTypeEnum
from bambooapi_client.openapi.model.http400_bad_request import HTTP400BadRequest
from bambooapi_client.openapi.model.http401_unauthorized import HTTP401Unauthorized
from bambooapi_client.openapi.model.http403_forbidden import HTTP403Forbidden
from bambooapi_client.openapi.model.http404_not_found import HTTP404NotFound
from bambooapi_client.openapi.model.http_validation_error import HTTPValidationError
from bambooapi_client.openapi.model.medium_enum import MediumEnum
from bambooapi_client.openapi.model.subscription import Subscription
from bambooapi_client.openapi.model.user import User


class SubscriptionApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_or_update_subscription_endpoint = _Endpoint(
            settings={
                'response_type': (Subscription,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/subscriptions/users/{user_id}/events/{event_type}/',
                'operation_id': 'create_or_update_subscription',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'user_id',
                    'event_type',
                    'medium',
                    'site_ids',
                ],
                'required': [
                    'user_id',
                    'event_type',
                    'medium',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'user_id',
                ]
            },
            root_map={
                'validations': {
                    ('user_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'user_id':
                        (int,),
                    'event_type':
                        (EventTypeEnum,),
                    'medium':
                        (MediumEnum,),
                    'site_ids':
                        ([int],),
                },
                'attribute_map': {
                    'user_id': 'user_id',
                    'event_type': 'event_type',
                    'medium': 'medium',
                    'site_ids': 'site_ids',
                },
                'location_map': {
                    'user_id': 'path',
                    'event_type': 'path',
                    'medium': 'query',
                    'site_ids': 'query',
                },
                'collection_format_map': {
                    'site_ids': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_subscription_endpoint = _Endpoint(
            settings={
                'response_type': (Subscription,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/subscriptions/users/{user_id}/events/{event_type}/',
                'operation_id': 'delete_subscription',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'user_id',
                    'event_type',
                    'medium',
                    'site_ids',
                ],
                'required': [
                    'user_id',
                    'event_type',
                    'medium',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'user_id',
                ]
            },
            root_map={
                'validations': {
                    ('user_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'user_id':
                        (int,),
                    'event_type':
                        (EventTypeEnum,),
                    'medium':
                        (MediumEnum,),
                    'site_ids':
                        ([int],),
                },
                'attribute_map': {
                    'user_id': 'user_id',
                    'event_type': 'event_type',
                    'medium': 'medium',
                    'site_ids': 'site_ids',
                },
                'location_map': {
                    'user_id': 'path',
                    'event_type': 'path',
                    'medium': 'query',
                    'site_ids': 'query',
                },
                'collection_format_map': {
                    'site_ids': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_users_subscribed_to_event_type_endpoint = _Endpoint(
            settings={
                'response_type': ([User],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/subscriptions/events/{event_type}/sites/{site_id}/users',
                'operation_id': 'get_users_subscribed_to_event_type',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'event_type',
                    'site_id',
                ],
                'required': [
                    'event_type',
                    'site_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'site_id',
                ]
            },
            root_map={
                'validations': {
                    ('site_id',): {

                        'inclusive_maximum': 99999,
                        'inclusive_minimum': 10001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'event_type':
                        (EventTypeEnum,),
                    'site_id':
                        (int,),
                },
                'attribute_map': {
                    'event_type': 'event_type',
                    'site_id': 'site_id',
                },
                'location_map': {
                    'event_type': 'path',
                    'site_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def create_or_update_subscription(
        self,
        user_id,
        event_type,
        medium,
        **kwargs
    ):
        """Subscribe a user to an event type  # noqa: E501

        Create subscription if does not exist or add sites to it.  If subscription does not exist, creates a subscription. If a subscription exists, add sites of site_ids to it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_or_update_subscription(user_id, event_type, medium, async_req=True)
        >>> result = thread.get()

        Args:
            user_id (int):
            event_type (EventTypeEnum):
            medium (MediumEnum):

        Keyword Args:
            site_ids ([int]): If provided, user is subscribed to an event type just for the selected sites. Else, user is subscribed to an event type for all sites.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Subscription
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['user_id'] = \
            user_id
        kwargs['event_type'] = \
            event_type
        kwargs['medium'] = \
            medium
        return self.create_or_update_subscription_endpoint.call_with_http_info(**kwargs)

    def delete_subscription(
        self,
        user_id,
        event_type,
        medium,
        **kwargs
    ):
        """Unsubscribe a user to an event type  # noqa: E501

        Delete a subscription.  If site_ids is None, the subscription will be deleted. Else, the sites in this list will be removed from the subscription (but the subscription won't be deleted).  Sites can only be removed from subscriptions with `all_sites = False`. Attempting to remove sites from a subscription with `all_sites = True` will return a client error. Instead, delete the subscription and create a new one with `all_sites = False`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_subscription(user_id, event_type, medium, async_req=True)
        >>> result = thread.get()

        Args:
            user_id (int):
            event_type (EventTypeEnum):
            medium (MediumEnum):

        Keyword Args:
            site_ids ([int]): If provided, user is unsubscribed to an event type just for the selected sites. Else, subscription is removed.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Subscription
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['user_id'] = \
            user_id
        kwargs['event_type'] = \
            event_type
        kwargs['medium'] = \
            medium
        return self.delete_subscription_endpoint.call_with_http_info(**kwargs)

    def get_users_subscribed_to_event_type(
        self,
        event_type,
        site_id,
        **kwargs
    ):
        """Get users subscribed to an event type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_users_subscribed_to_event_type(event_type, site_id, async_req=True)
        >>> result = thread.get()

        Args:
            event_type (EventTypeEnum):
            site_id (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [User]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['event_type'] = \
            event_type
        kwargs['site_id'] = \
            site_id
        return self.get_users_subscribed_to_event_type_endpoint.call_with_http_info(**kwargs)

