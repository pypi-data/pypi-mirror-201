"""
    Bamboo Flexibility API

     This API provides access to flexibility assets managed by Bamboo Energy: - Create and list flexibility sites & assets - Obtain activations for specific assets - Post and get measurements for specific assets   # noqa: E501

    The version of the OpenAPI document: 1.18.7
    Contact: development@bambooenergy.tech
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from bambooapi_client.openapi.api_client import ApiClient, Endpoint as _Endpoint
from bambooapi_client.openapi.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from bambooapi_client.openapi.model.contract import Contract
from bambooapi_client.openapi.model.contract_create import ContractCreate
from bambooapi_client.openapi.model.contract_list_item import ContractListItem
from bambooapi_client.openapi.model.contract_schedule_item import ContractScheduleItem
from bambooapi_client.openapi.model.contract_update import ContractUpdate
from bambooapi_client.openapi.model.http400_bad_request import HTTP400BadRequest
from bambooapi_client.openapi.model.http401_unauthorized import HTTP401Unauthorized
from bambooapi_client.openapi.model.http403_forbidden import HTTP403Forbidden
from bambooapi_client.openapi.model.http404_not_found import HTTP404NotFound
from bambooapi_client.openapi.model.http501_not_implemented import HTTP501NotImplemented
from bambooapi_client.openapi.model.http_validation_error import HTTPValidationError
from bambooapi_client.openapi.model.tariff import Tariff
from bambooapi_client.openapi.model.tariff_create import TariffCreate
from bambooapi_client.openapi.model.tariff_list_item import TariffListItem
from bambooapi_client.openapi.model.tariff_specs import TariffSpecs
from bambooapi_client.openapi.model.tariff_specs_create import TariffSpecsCreate
from bambooapi_client.openapi.model.tariff_specs_list_item import TariffSpecsListItem
from bambooapi_client.openapi.model.tariff_specs_update import TariffSpecsUpdate
from bambooapi_client.openapi.model.tariff_update import TariffUpdate


class ContractsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_contract_endpoint = _Endpoint(
            settings={
                'response_type': (Contract,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/contracts',
                'operation_id': 'create_contract',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'contract_create',
                ],
                'required': [
                    'contract_create',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'contract_create':
                        (ContractCreate,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'contract_create': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.create_tariff_endpoint = _Endpoint(
            settings={
                'response_type': (Tariff,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/tariffs',
                'operation_id': 'create_tariff',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'tariff_create',
                ],
                'required': [
                    'tariff_create',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'tariff_create':
                        (TariffCreate,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'tariff_create': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.create_tariff_specs_endpoint = _Endpoint(
            settings={
                'response_type': (TariffSpecs,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/tariffs/{tariff_id}/specs',
                'operation_id': 'create_tariff_specs',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'tariff_id',
                    'tariff_specs_create',
                ],
                'required': [
                    'tariff_id',
                    'tariff_specs_create',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'tariff_id',
                ]
            },
            root_map={
                'validations': {
                    ('tariff_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'tariff_id':
                        (int,),
                    'tariff_specs_create':
                        (TariffSpecsCreate,),
                },
                'attribute_map': {
                    'tariff_id': 'tariff_id',
                },
                'location_map': {
                    'tariff_id': 'path',
                    'tariff_specs_create': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.delete_contract_endpoint = _Endpoint(
            settings={
                'response_type': (Contract,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/contracts/{contract_id}',
                'operation_id': 'delete_contract',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'contract_id',
                ],
                'required': [
                    'contract_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'contract_id',
                ]
            },
            root_map={
                'validations': {
                    ('contract_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'contract_id':
                        (int,),
                },
                'attribute_map': {
                    'contract_id': 'contract_id',
                },
                'location_map': {
                    'contract_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_tariff_endpoint = _Endpoint(
            settings={
                'response_type': (Tariff,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/tariffs/{tariff_id}',
                'operation_id': 'delete_tariff',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'tariff_id',
                ],
                'required': [
                    'tariff_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'tariff_id',
                ]
            },
            root_map={
                'validations': {
                    ('tariff_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'tariff_id':
                        (int,),
                },
                'attribute_map': {
                    'tariff_id': 'tariff_id',
                },
                'location_map': {
                    'tariff_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_tariff_specs_endpoint = _Endpoint(
            settings={
                'response_type': (TariffSpecs,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/tariffs/specs/{tariff_specs_id}',
                'operation_id': 'delete_tariff_specs',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'tariff_specs_id',
                ],
                'required': [
                    'tariff_specs_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'tariff_specs_id':
                        (int,),
                },
                'attribute_map': {
                    'tariff_specs_id': 'tariff_specs_id',
                },
                'location_map': {
                    'tariff_specs_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_contracts_endpoint = _Endpoint(
            settings={
                'response_type': ([ContractListItem],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/contracts',
                'operation_id': 'list_contracts',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'start_time',
                    'end_time',
                    'site_id',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'site_id',
                ]
            },
            root_map={
                'validations': {
                    ('site_id',): {

                        'inclusive_maximum': 99999,
                        'inclusive_minimum': 10000,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'start_time':
                        (datetime,),
                    'end_time':
                        (datetime,),
                    'site_id':
                        (int,),
                },
                'attribute_map': {
                    'start_time': 'start_time',
                    'end_time': 'end_time',
                    'site_id': 'site_id',
                },
                'location_map': {
                    'start_time': 'query',
                    'end_time': 'query',
                    'site_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_tariff_specs_endpoint = _Endpoint(
            settings={
                'response_type': ([TariffSpecsListItem],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/tariffs/{tariff_id}/specs',
                'operation_id': 'list_tariff_specs',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'tariff_id',
                    'start_time',
                    'end_time',
                ],
                'required': [
                    'tariff_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'tariff_id',
                ]
            },
            root_map={
                'validations': {
                    ('tariff_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'tariff_id':
                        (int,),
                    'start_time':
                        (datetime,),
                    'end_time':
                        (datetime,),
                },
                'attribute_map': {
                    'tariff_id': 'tariff_id',
                    'start_time': 'start_time',
                    'end_time': 'end_time',
                },
                'location_map': {
                    'tariff_id': 'path',
                    'start_time': 'query',
                    'end_time': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_tariffs_endpoint = _Endpoint(
            settings={
                'response_type': ([TariffListItem],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/tariffs',
                'operation_id': 'list_tariffs',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_contract_endpoint = _Endpoint(
            settings={
                'response_type': (Contract,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/contracts/{contract_id}',
                'operation_id': 'read_contract',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'contract_id',
                ],
                'required': [
                    'contract_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'contract_id',
                ]
            },
            root_map={
                'validations': {
                    ('contract_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'contract_id':
                        (int,),
                },
                'attribute_map': {
                    'contract_id': 'contract_id',
                },
                'location_map': {
                    'contract_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_contract_schedule_endpoint = _Endpoint(
            settings={
                'response_type': ([ContractScheduleItem],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/contracts/{contract_id}/schedule',
                'operation_id': 'read_contract_schedule',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'contract_id',
                    'start_time',
                    'end_time',
                ],
                'required': [
                    'contract_id',
                    'start_time',
                    'end_time',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'contract_id',
                ]
            },
            root_map={
                'validations': {
                    ('contract_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'contract_id':
                        (int,),
                    'start_time':
                        (datetime,),
                    'end_time':
                        (datetime,),
                },
                'attribute_map': {
                    'contract_id': 'contract_id',
                    'start_time': 'start_time',
                    'end_time': 'end_time',
                },
                'location_map': {
                    'contract_id': 'path',
                    'start_time': 'query',
                    'end_time': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_tariff_endpoint = _Endpoint(
            settings={
                'response_type': (Tariff,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/tariffs/{tariff_id}',
                'operation_id': 'read_tariff',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'tariff_id',
                ],
                'required': [
                    'tariff_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'tariff_id',
                ]
            },
            root_map={
                'validations': {
                    ('tariff_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'tariff_id':
                        (int,),
                },
                'attribute_map': {
                    'tariff_id': 'tariff_id',
                },
                'location_map': {
                    'tariff_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_tariff_specs_endpoint = _Endpoint(
            settings={
                'response_type': (TariffSpecs,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/tariffs/specs/{tariff_specs_id}',
                'operation_id': 'read_tariff_specs',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'tariff_specs_id',
                ],
                'required': [
                    'tariff_specs_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'tariff_specs_id':
                        (int,),
                },
                'attribute_map': {
                    'tariff_specs_id': 'tariff_specs_id',
                },
                'location_map': {
                    'tariff_specs_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_contract_endpoint = _Endpoint(
            settings={
                'response_type': (Contract,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/contracts/{contract_id}',
                'operation_id': 'update_contract',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'contract_id',
                    'contract_update',
                ],
                'required': [
                    'contract_id',
                    'contract_update',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'contract_id',
                ]
            },
            root_map={
                'validations': {
                    ('contract_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'contract_id':
                        (int,),
                    'contract_update':
                        (ContractUpdate,),
                },
                'attribute_map': {
                    'contract_id': 'contract_id',
                },
                'location_map': {
                    'contract_id': 'path',
                    'contract_update': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_tariff_endpoint = _Endpoint(
            settings={
                'response_type': (Tariff,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/tariffs/{tariff_id}',
                'operation_id': 'update_tariff',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'tariff_id',
                    'tariff_update',
                ],
                'required': [
                    'tariff_id',
                    'tariff_update',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'tariff_id',
                ]
            },
            root_map={
                'validations': {
                    ('tariff_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1001,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'tariff_id':
                        (int,),
                    'tariff_update':
                        (TariffUpdate,),
                },
                'attribute_map': {
                    'tariff_id': 'tariff_id',
                },
                'location_map': {
                    'tariff_id': 'path',
                    'tariff_update': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_tariff_specs_endpoint = _Endpoint(
            settings={
                'response_type': (TariffSpecs,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/tariffs/specs/{tariff_specs_id}',
                'operation_id': 'update_tariff_specs',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'tariff_specs_id',
                    'tariff_specs_update',
                ],
                'required': [
                    'tariff_specs_id',
                    'tariff_specs_update',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'tariff_specs_id':
                        (int,),
                    'tariff_specs_update':
                        (TariffSpecsUpdate,),
                },
                'attribute_map': {
                    'tariff_specs_id': 'tariff_specs_id',
                },
                'location_map': {
                    'tariff_specs_id': 'path',
                    'tariff_specs_update': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def create_contract(
        self,
        contract_create,
        **kwargs
    ):
        """Create a Contract  # noqa: E501

        Create a Contract.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_contract(contract_create, async_req=True)
        >>> result = thread.get()

        Args:
            contract_create (ContractCreate):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Contract
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['contract_create'] = \
            contract_create
        return self.create_contract_endpoint.call_with_http_info(**kwargs)

    def create_tariff(
        self,
        tariff_create,
        **kwargs
    ):
        """Create a Tariff  # noqa: E501

        Create a new Tariff.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_tariff(tariff_create, async_req=True)
        >>> result = thread.get()

        Args:
            tariff_create (TariffCreate):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Tariff
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['tariff_create'] = \
            tariff_create
        return self.create_tariff_endpoint.call_with_http_info(**kwargs)

    def create_tariff_specs(
        self,
        tariff_id,
        tariff_specs_create,
        **kwargs
    ):
        """Create tariff specifications  # noqa: E501

        Create tariff specifications.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_tariff_specs(tariff_id, tariff_specs_create, async_req=True)
        >>> result = thread.get()

        Args:
            tariff_id (int):
            tariff_specs_create (TariffSpecsCreate):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TariffSpecs
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['tariff_id'] = \
            tariff_id
        kwargs['tariff_specs_create'] = \
            tariff_specs_create
        return self.create_tariff_specs_endpoint.call_with_http_info(**kwargs)

    def delete_contract(
        self,
        contract_id,
        **kwargs
    ):
        """Delete an existing Contract  # noqa: E501

        Delete a Contract.  **WARNING!: Contract deletion is PERMANENT!** (no way to recover deleted contract)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_contract(contract_id, async_req=True)
        >>> result = thread.get()

        Args:
            contract_id (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Contract
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['contract_id'] = \
            contract_id
        return self.delete_contract_endpoint.call_with_http_info(**kwargs)

    def delete_tariff(
        self,
        tariff_id,
        **kwargs
    ):
        """Delete an existing Tariff  # noqa: E501

        Delete a Tariff.  **WARNING!: Tariff deletion is PERMANENT!** (no way to recover deleted tariff)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_tariff(tariff_id, async_req=True)
        >>> result = thread.get()

        Args:
            tariff_id (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Tariff
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['tariff_id'] = \
            tariff_id
        return self.delete_tariff_endpoint.call_with_http_info(**kwargs)

    def delete_tariff_specs(
        self,
        tariff_specs_id,
        **kwargs
    ):
        """Delete tariff specifications  # noqa: E501

        Delete tariff specifications.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_tariff_specs(tariff_specs_id, async_req=True)
        >>> result = thread.get()

        Args:
            tariff_specs_id (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TariffSpecs
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['tariff_specs_id'] = \
            tariff_specs_id
        return self.delete_tariff_specs_endpoint.call_with_http_info(**kwargs)

    def list_contracts(
        self,
        **kwargs
    ):
        """List all contracts  # noqa: E501

        List all contracts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_contracts(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            start_time (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\").. [optional]
            end_time (datetime): A timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\").. [optional]
            site_id (int): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [ContractListItem]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.list_contracts_endpoint.call_with_http_info(**kwargs)

    def list_tariff_specs(
        self,
        tariff_id,
        **kwargs
    ):
        """Get all tariff specifications  # noqa: E501

        List all tariff specifications.  If `start_time` and `end_time` are not set, returns all specifications in database.  If `start_time` or `end_time` are provided, return all specifications whose validity period overlap (either partially or totally) the specified time window.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_tariff_specs(tariff_id, async_req=True)
        >>> result = thread.get()

        Args:
            tariff_id (int):

        Keyword Args:
            start_time (datetime): Timestamp in UTC timezone. Allowed formats are \"YYYY-MM-DDT00:00:00Z\" and \"YYYY-MM-DDT00:00:00+00:00\".. [optional]
            end_time (datetime): Timestamp in UTC timezone. Allowed formats are \"YYYY-MM-DDT00:00:00Z\" and \"YYYY-MM-DDT00:00:00+00:00\".. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [TariffSpecsListItem]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['tariff_id'] = \
            tariff_id
        return self.list_tariff_specs_endpoint.call_with_http_info(**kwargs)

    def list_tariffs(
        self,
        **kwargs
    ):
        """List all tariffs  # noqa: E501

        List all Tariffs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_tariffs(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [TariffListItem]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.list_tariffs_endpoint.call_with_http_info(**kwargs)

    def read_contract(
        self,
        contract_id,
        **kwargs
    ):
        """Info about a specific Contract  # noqa: E501

        Info about a specific Contract.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_contract(contract_id, async_req=True)
        >>> result = thread.get()

        Args:
            contract_id (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Contract
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['contract_id'] = \
            contract_id
        return self.read_contract_endpoint.call_with_http_info(**kwargs)

    def read_contract_schedule(
        self,
        contract_id,
        start_time,
        end_time,
        **kwargs
    ):
        """Return expected contract schedule between two dates  # noqa: E501

        Return contract schedule within the given dates.  The frequency of the data is hourly.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_contract_schedule(contract_id, start_time, end_time, async_req=True)
        >>> result = thread.get()

        Args:
            contract_id (int):
            start_time (datetime): Either a timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\").
            end_time (datetime): Either a timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\").

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [ContractScheduleItem]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['contract_id'] = \
            contract_id
        kwargs['start_time'] = \
            start_time
        kwargs['end_time'] = \
            end_time
        return self.read_contract_schedule_endpoint.call_with_http_info(**kwargs)

    def read_tariff(
        self,
        tariff_id,
        **kwargs
    ):
        """Info about a specific Tariff  # noqa: E501

        Info about a specific Tariff.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_tariff(tariff_id, async_req=True)
        >>> result = thread.get()

        Args:
            tariff_id (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Tariff
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['tariff_id'] = \
            tariff_id
        return self.read_tariff_endpoint.call_with_http_info(**kwargs)

    def read_tariff_specs(
        self,
        tariff_specs_id,
        **kwargs
    ):
        """Get info about tariff specifications  # noqa: E501

        Get info about tariff specifications.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_tariff_specs(tariff_specs_id, async_req=True)
        >>> result = thread.get()

        Args:
            tariff_specs_id (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TariffSpecs
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['tariff_specs_id'] = \
            tariff_specs_id
        return self.read_tariff_specs_endpoint.call_with_http_info(**kwargs)

    def update_contract(
        self,
        contract_id,
        contract_update,
        **kwargs
    ):
        """Update an existing Contract  # noqa: E501

        Update an existing Contract.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_contract(contract_id, contract_update, async_req=True)
        >>> result = thread.get()

        Args:
            contract_id (int):
            contract_update (ContractUpdate):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Contract
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['contract_id'] = \
            contract_id
        kwargs['contract_update'] = \
            contract_update
        return self.update_contract_endpoint.call_with_http_info(**kwargs)

    def update_tariff(
        self,
        tariff_id,
        tariff_update,
        **kwargs
    ):
        """Update an existing Tariff  # noqa: E501

        Update information about a Tariff.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_tariff(tariff_id, tariff_update, async_req=True)
        >>> result = thread.get()

        Args:
            tariff_id (int):
            tariff_update (TariffUpdate):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Tariff
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['tariff_id'] = \
            tariff_id
        kwargs['tariff_update'] = \
            tariff_update
        return self.update_tariff_endpoint.call_with_http_info(**kwargs)

    def update_tariff_specs(
        self,
        tariff_specs_id,
        tariff_specs_update,
        **kwargs
    ):
        """Update tariff specifications  # noqa: E501

        Update energy fees of a tariff.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_tariff_specs(tariff_specs_id, tariff_specs_update, async_req=True)
        >>> result = thread.get()

        Args:
            tariff_specs_id (int):
            tariff_specs_update (TariffSpecsUpdate):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            TariffSpecs
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['tariff_specs_id'] = \
            tariff_specs_id
        kwargs['tariff_specs_update'] = \
            tariff_specs_update
        return self.update_tariff_specs_endpoint.call_with_http_info(**kwargs)

