# coding: utf-8

"""
    pymetrics API

    ### This is pymetrics's public API. The API can be used to get information on candidates as part of a job application workflow, or for employee career pathing and development. The typical use case for this is to support an externally initiated assessment for a candidate job application. This is often done \"inline\" with the candidate's application, or asynchronously after the candidate submits their application. This data can then be used for career pathing and employee development in subsequent stages.  The expected sequence of API calls is: * `Generate OAuth Token` with the OAuth Client ID and Secret you've been provided * `Get Assessment Configurations` to determine which configured assessment templates are available * `Create Assessment Order` for a selected Assessment and candidate job application * `Get Assessment Order` to receive the recommendation results and reports, once they are available  # noqa: E501

    The version of the OpenAPI document: 2.2.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class ListOrdersRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'job_application_id': 'str',
        'candidate_id': 'str'
    }

    attribute_map = {
        'job_application_id': 'job_application_id',
        'candidate_id': 'candidate_id'
    }

    def __init__(self, job_application_id=None, candidate_id=None, local_vars_configuration=None):  # noqa: E501
        """ListOrdersRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._job_application_id = None
        self._candidate_id = None
        self.discriminator = None

        if job_application_id is not None:
            self.job_application_id = job_application_id
        if candidate_id is not None:
            self.candidate_id = candidate_id

    @property
    def job_application_id(self):
        """Gets the job_application_id of this ListOrdersRequest.  # noqa: E501

        Job application ID by which to optionally filter on  # noqa: E501

        :return: The job_application_id of this ListOrdersRequest.  # noqa: E501
        :rtype: str
        """
        return self._job_application_id

    @job_application_id.setter
    def job_application_id(self, job_application_id):
        """Sets the job_application_id of this ListOrdersRequest.

        Job application ID by which to optionally filter on  # noqa: E501

        :param job_application_id: The job_application_id of this ListOrdersRequest.  # noqa: E501
        :type job_application_id: str
        """

        self._job_application_id = job_application_id

    @property
    def candidate_id(self):
        """Gets the candidate_id of this ListOrdersRequest.  # noqa: E501

        Candidate ID by which to optionally filter on  # noqa: E501

        :return: The candidate_id of this ListOrdersRequest.  # noqa: E501
        :rtype: str
        """
        return self._candidate_id

    @candidate_id.setter
    def candidate_id(self, candidate_id):
        """Sets the candidate_id of this ListOrdersRequest.

        Candidate ID by which to optionally filter on  # noqa: E501

        :param candidate_id: The candidate_id of this ListOrdersRequest.  # noqa: E501
        :type candidate_id: str
        """

        self._candidate_id = candidate_id

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListOrdersRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ListOrdersRequest):
            return True

        return self.to_dict() != other.to_dict()
