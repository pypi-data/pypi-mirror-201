# coding: utf-8

"""
    pymetrics Assessment API

    ### This is pymetrics's public API for assessments, usually as part of a job application workflow. The typical use case for this is to support an externally initiated assessment for a candidate job application. This is often done \"inline\" with the candidate's application, or asynchronously after the candidate submits their application.  The expected sequence of API calls is: * `Generate OAuth Token` with the OAuth Client ID and Secret you've been provided * `Get Assessment Configurations` to determine which configured assessment templates are available * `Create Assessment Order` for a selected Assessment and candidate job application * `Get Assessment Order` to receive the recommendation results, once they are available  # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.models.list_orders_response import ListOrdersResponse  # noqa: E501
from openapi_client.rest import ApiException

class TestListOrdersResponse(unittest.TestCase):
    """ListOrdersResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ListOrdersResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.list_orders_response.ListOrdersResponse()  # noqa: E501
        if include_optional :
            return ListOrdersResponse(
                orders = [
                    openapi_client.models.mercury_assessment_order.MercuryAssessmentOrder(
                        id = '', 
                        invite_link = '0', 
                        status = 'Rejected', 
                        create_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        candidate = openapi_client.models.mercury_candidate.MercuryCandidate(
                            first_name = '', 
                            last_name = '', 
                            email = '', 
                            external_id = '', ), 
                        assessment_id = '', 
                        assessment = openapi_client.models.mercury_assessment.MercuryAssessment(
                            id = '', 
                            type = 'games', 
                            description = '', ), 
                        application_id = '', 
                        ats_type = 'adp', 
                        requisition_id = '', 
                        requisition_title = '', 
                        metadata={},
                        recruiter_report = '0', 
                        results = [
                            openapi_client.models.mercury_result.MercuryResult(
                                assessment = openapi_client.models.mercury_assessment.MercuryAssessment(
                                    id = '', 
                                    type = 'games', 
                                    description = '', ), 
                                create_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                description = '', 
                                score = 1.337, 
                                band = '', )
                            ], 
                        reports = [
                            openapi_client.models.mercury_report.MercuryReport(
                                download_url = '0', 
                                create_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                modify_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                            ], 
                        candidate_redirect_url = '0', )
                    ]
            )
        else :
            return ListOrdersResponse(
                orders = [
                    openapi_client.models.mercury_assessment_order.MercuryAssessmentOrder(
                        id = '', 
                        invite_link = '0', 
                        status = 'Rejected', 
                        create_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        candidate = openapi_client.models.mercury_candidate.MercuryCandidate(
                            first_name = '', 
                            last_name = '', 
                            email = '', 
                            external_id = '', ), 
                        assessment_id = '', 
                        assessment = openapi_client.models.mercury_assessment.MercuryAssessment(
                            id = '', 
                            type = 'games', 
                            description = '', ), 
                        application_id = '', 
                        ats_type = 'adp', 
                        requisition_id = '', 
                        requisition_title = '', 
                        metadata = {},
                        recruiter_report = '0', 
                        results = [
                            openapi_client.models.mercury_result.MercuryResult(
                                assessment = openapi_client.models.mercury_assessment.MercuryAssessment(
                                    id = '', 
                                    type = 'games', 
                                    description = '', ), 
                                create_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                description = '', 
                                score = 1.337, 
                                band = '', )
                            ], 
                        reports = [
                            openapi_client.models.mercury_report.MercuryReport(
                                download_url = '0', 
                                create_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                modify_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                            ], 
                        candidate_redirect_url = '0', )
                    ],
        )

    def testListOrdersResponse(self):
        """Test ListOrdersResponse"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
