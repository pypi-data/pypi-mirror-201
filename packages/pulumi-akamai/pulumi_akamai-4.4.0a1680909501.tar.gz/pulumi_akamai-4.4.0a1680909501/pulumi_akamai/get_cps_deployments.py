# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetCpsDeploymentsResult',
    'AwaitableGetCpsDeploymentsResult',
    'get_cps_deployments',
    'get_cps_deployments_output',
]

@pulumi.output_type
class GetCpsDeploymentsResult:
    """
    A collection of values returned by getCpsDeployments.
    """
    def __init__(__self__, auto_renewal_start_time=None, enrollment_id=None, expiry_date=None, id=None, production_certificate_ecdsa=None, production_certificate_rsa=None, staging_certificate_ecdsa=None, staging_certificate_rsa=None):
        if auto_renewal_start_time and not isinstance(auto_renewal_start_time, str):
            raise TypeError("Expected argument 'auto_renewal_start_time' to be a str")
        pulumi.set(__self__, "auto_renewal_start_time", auto_renewal_start_time)
        if enrollment_id and not isinstance(enrollment_id, int):
            raise TypeError("Expected argument 'enrollment_id' to be a int")
        pulumi.set(__self__, "enrollment_id", enrollment_id)
        if expiry_date and not isinstance(expiry_date, str):
            raise TypeError("Expected argument 'expiry_date' to be a str")
        pulumi.set(__self__, "expiry_date", expiry_date)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if production_certificate_ecdsa and not isinstance(production_certificate_ecdsa, str):
            raise TypeError("Expected argument 'production_certificate_ecdsa' to be a str")
        pulumi.set(__self__, "production_certificate_ecdsa", production_certificate_ecdsa)
        if production_certificate_rsa and not isinstance(production_certificate_rsa, str):
            raise TypeError("Expected argument 'production_certificate_rsa' to be a str")
        pulumi.set(__self__, "production_certificate_rsa", production_certificate_rsa)
        if staging_certificate_ecdsa and not isinstance(staging_certificate_ecdsa, str):
            raise TypeError("Expected argument 'staging_certificate_ecdsa' to be a str")
        pulumi.set(__self__, "staging_certificate_ecdsa", staging_certificate_ecdsa)
        if staging_certificate_rsa and not isinstance(staging_certificate_rsa, str):
            raise TypeError("Expected argument 'staging_certificate_rsa' to be a str")
        pulumi.set(__self__, "staging_certificate_rsa", staging_certificate_rsa)

    @property
    @pulumi.getter(name="autoRenewalStartTime")
    def auto_renewal_start_time(self) -> str:
        return pulumi.get(self, "auto_renewal_start_time")

    @property
    @pulumi.getter(name="enrollmentId")
    def enrollment_id(self) -> int:
        return pulumi.get(self, "enrollment_id")

    @property
    @pulumi.getter(name="expiryDate")
    def expiry_date(self) -> str:
        return pulumi.get(self, "expiry_date")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="productionCertificateEcdsa")
    def production_certificate_ecdsa(self) -> str:
        return pulumi.get(self, "production_certificate_ecdsa")

    @property
    @pulumi.getter(name="productionCertificateRsa")
    def production_certificate_rsa(self) -> str:
        return pulumi.get(self, "production_certificate_rsa")

    @property
    @pulumi.getter(name="stagingCertificateEcdsa")
    def staging_certificate_ecdsa(self) -> str:
        return pulumi.get(self, "staging_certificate_ecdsa")

    @property
    @pulumi.getter(name="stagingCertificateRsa")
    def staging_certificate_rsa(self) -> str:
        return pulumi.get(self, "staging_certificate_rsa")


class AwaitableGetCpsDeploymentsResult(GetCpsDeploymentsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCpsDeploymentsResult(
            auto_renewal_start_time=self.auto_renewal_start_time,
            enrollment_id=self.enrollment_id,
            expiry_date=self.expiry_date,
            id=self.id,
            production_certificate_ecdsa=self.production_certificate_ecdsa,
            production_certificate_rsa=self.production_certificate_rsa,
            staging_certificate_ecdsa=self.staging_certificate_ecdsa,
            staging_certificate_rsa=self.staging_certificate_rsa)


def get_cps_deployments(enrollment_id: Optional[int] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCpsDeploymentsResult:
    """
    Use the _get_cps_deployments_ data source to retrieve deployed certificates for a specific enrollment.

    You'll see data for ECDSA, RSA, or both depending on the type and number of certificates you uploaded.

    ## Basic usage

    This example shows how to return information about deployed certificates for enrollment ID 12345.

    ```python
    import pulumi
    import pulumi_akamai as akamai

    example = akamai.get_cps_deployments(enrollment_id=12345)
    ```

    ## Attributes reference

    This data source returns these attributes:

    * `production_certificate_rsa` - The RSA certificate deployed on the production network.
    * `production_certificate_ecdsa` - The ECDSA certificate deployed on the production network.
    * `staging_certificate_rsa` - The RSA certificate deployed on the staging network.
    * `staging_certificate_ecdsa` - The ECDSA certificate deployed on the staging network.
    * `expiry_date` - The expiration date for the certificate in ISO-8601 format.
    * `auto_renewal_start_time` - The specific date the automatic renewal will start on. The date is in ISO-8601 format. <br> For DV certificates, CPS automatically starts the renewal process 90 days before the current certificate expires. It then automatically deploys the renewed certificate when it receives it from the CA. <br> For third-party certificates, CPS creates a change. This change is needed to get a new CSR and upload the new certificate. Use the _get_cps_enrollments_ data source to view pending changes.


    :param int enrollment_id: Unique identifier of the enrollment.
    """
    __args__ = dict()
    __args__['enrollmentId'] = enrollment_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getCpsDeployments:getCpsDeployments', __args__, opts=opts, typ=GetCpsDeploymentsResult).value

    return AwaitableGetCpsDeploymentsResult(
        auto_renewal_start_time=__ret__.auto_renewal_start_time,
        enrollment_id=__ret__.enrollment_id,
        expiry_date=__ret__.expiry_date,
        id=__ret__.id,
        production_certificate_ecdsa=__ret__.production_certificate_ecdsa,
        production_certificate_rsa=__ret__.production_certificate_rsa,
        staging_certificate_ecdsa=__ret__.staging_certificate_ecdsa,
        staging_certificate_rsa=__ret__.staging_certificate_rsa)


@_utilities.lift_output_func(get_cps_deployments)
def get_cps_deployments_output(enrollment_id: Optional[pulumi.Input[int]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCpsDeploymentsResult]:
    """
    Use the _get_cps_deployments_ data source to retrieve deployed certificates for a specific enrollment.

    You'll see data for ECDSA, RSA, or both depending on the type and number of certificates you uploaded.

    ## Basic usage

    This example shows how to return information about deployed certificates for enrollment ID 12345.

    ```python
    import pulumi
    import pulumi_akamai as akamai

    example = akamai.get_cps_deployments(enrollment_id=12345)
    ```

    ## Attributes reference

    This data source returns these attributes:

    * `production_certificate_rsa` - The RSA certificate deployed on the production network.
    * `production_certificate_ecdsa` - The ECDSA certificate deployed on the production network.
    * `staging_certificate_rsa` - The RSA certificate deployed on the staging network.
    * `staging_certificate_ecdsa` - The ECDSA certificate deployed on the staging network.
    * `expiry_date` - The expiration date for the certificate in ISO-8601 format.
    * `auto_renewal_start_time` - The specific date the automatic renewal will start on. The date is in ISO-8601 format. <br> For DV certificates, CPS automatically starts the renewal process 90 days before the current certificate expires. It then automatically deploys the renewed certificate when it receives it from the CA. <br> For third-party certificates, CPS creates a change. This change is needed to get a new CSR and upload the new certificate. Use the _get_cps_enrollments_ data source to view pending changes.


    :param int enrollment_id: Unique identifier of the enrollment.
    """
    ...
