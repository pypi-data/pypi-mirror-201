# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['CpsUploadCertificateArgs', 'CpsUploadCertificate']

@pulumi.input_type
class CpsUploadCertificateArgs:
    def __init__(__self__, *,
                 enrollment_id: pulumi.Input[int],
                 acknowledge_change_management: Optional[pulumi.Input[bool]] = None,
                 acknowledge_post_verification_warnings: Optional[pulumi.Input[bool]] = None,
                 auto_approve_warnings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 certificate_ecdsa_pem: Optional[pulumi.Input[str]] = None,
                 certificate_rsa_pem: Optional[pulumi.Input[str]] = None,
                 trust_chain_ecdsa_pem: Optional[pulumi.Input[str]] = None,
                 trust_chain_rsa_pem: Optional[pulumi.Input[str]] = None,
                 wait_for_deployment: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a CpsUploadCertificate resource.
        :param pulumi.Input[int] enrollment_id: Unique identifier for the certificate enrollment.
               * certificate PEM file (Required) - Include at least one of the following arguments for the PEM file to upload. You can upload an ECDSA certificate, an RSA certificate, or both.
        :param pulumi.Input[bool] acknowledge_change_management: Boolean. Use only if `change_management` is set to `true` in the `CpsThirdPartyEnrollment` resource. Enter `true` to acknowledge that testing on staging is complete and to deploy the certificate to production.
        :param pulumi.Input[bool] acknowledge_post_verification_warnings: Boolean. Enter `true` if you want to acknowledge the post-verification warnings defined in `auto_approve_warnings`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] auto_approve_warnings: The list of post-verification warning IDs you want to automatically acknowledge. To retrieve the list of warnings, use the _get_cps_warnings_ data source.
        :param pulumi.Input[str] certificate_ecdsa_pem: The ECDSA certificate in PEM format you want to upload.
        :param pulumi.Input[str] certificate_rsa_pem: The RSA certificate in PEM format you want to upload.
        :param pulumi.Input[str] trust_chain_ecdsa_pem: The trust chain in PEM format for the ECDSA certificate you want to upload.
        :param pulumi.Input[str] trust_chain_rsa_pem: The trust chain in PEM format for the RSA certificate you want to upload.
        :param pulumi.Input[bool] wait_for_deployment: Boolean. Enter `true` to wait for certificate to be deployed.
        """
        pulumi.set(__self__, "enrollment_id", enrollment_id)
        if acknowledge_change_management is not None:
            pulumi.set(__self__, "acknowledge_change_management", acknowledge_change_management)
        if acknowledge_post_verification_warnings is not None:
            pulumi.set(__self__, "acknowledge_post_verification_warnings", acknowledge_post_verification_warnings)
        if auto_approve_warnings is not None:
            pulumi.set(__self__, "auto_approve_warnings", auto_approve_warnings)
        if certificate_ecdsa_pem is not None:
            pulumi.set(__self__, "certificate_ecdsa_pem", certificate_ecdsa_pem)
        if certificate_rsa_pem is not None:
            pulumi.set(__self__, "certificate_rsa_pem", certificate_rsa_pem)
        if trust_chain_ecdsa_pem is not None:
            pulumi.set(__self__, "trust_chain_ecdsa_pem", trust_chain_ecdsa_pem)
        if trust_chain_rsa_pem is not None:
            pulumi.set(__self__, "trust_chain_rsa_pem", trust_chain_rsa_pem)
        if wait_for_deployment is not None:
            pulumi.set(__self__, "wait_for_deployment", wait_for_deployment)

    @property
    @pulumi.getter(name="enrollmentId")
    def enrollment_id(self) -> pulumi.Input[int]:
        """
        Unique identifier for the certificate enrollment.
        * certificate PEM file (Required) - Include at least one of the following arguments for the PEM file to upload. You can upload an ECDSA certificate, an RSA certificate, or both.
        """
        return pulumi.get(self, "enrollment_id")

    @enrollment_id.setter
    def enrollment_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "enrollment_id", value)

    @property
    @pulumi.getter(name="acknowledgeChangeManagement")
    def acknowledge_change_management(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean. Use only if `change_management` is set to `true` in the `CpsThirdPartyEnrollment` resource. Enter `true` to acknowledge that testing on staging is complete and to deploy the certificate to production.
        """
        return pulumi.get(self, "acknowledge_change_management")

    @acknowledge_change_management.setter
    def acknowledge_change_management(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "acknowledge_change_management", value)

    @property
    @pulumi.getter(name="acknowledgePostVerificationWarnings")
    def acknowledge_post_verification_warnings(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean. Enter `true` if you want to acknowledge the post-verification warnings defined in `auto_approve_warnings`.
        """
        return pulumi.get(self, "acknowledge_post_verification_warnings")

    @acknowledge_post_verification_warnings.setter
    def acknowledge_post_verification_warnings(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "acknowledge_post_verification_warnings", value)

    @property
    @pulumi.getter(name="autoApproveWarnings")
    def auto_approve_warnings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of post-verification warning IDs you want to automatically acknowledge. To retrieve the list of warnings, use the _get_cps_warnings_ data source.
        """
        return pulumi.get(self, "auto_approve_warnings")

    @auto_approve_warnings.setter
    def auto_approve_warnings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "auto_approve_warnings", value)

    @property
    @pulumi.getter(name="certificateEcdsaPem")
    def certificate_ecdsa_pem(self) -> Optional[pulumi.Input[str]]:
        """
        The ECDSA certificate in PEM format you want to upload.
        """
        return pulumi.get(self, "certificate_ecdsa_pem")

    @certificate_ecdsa_pem.setter
    def certificate_ecdsa_pem(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_ecdsa_pem", value)

    @property
    @pulumi.getter(name="certificateRsaPem")
    def certificate_rsa_pem(self) -> Optional[pulumi.Input[str]]:
        """
        The RSA certificate in PEM format you want to upload.
        """
        return pulumi.get(self, "certificate_rsa_pem")

    @certificate_rsa_pem.setter
    def certificate_rsa_pem(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_rsa_pem", value)

    @property
    @pulumi.getter(name="trustChainEcdsaPem")
    def trust_chain_ecdsa_pem(self) -> Optional[pulumi.Input[str]]:
        """
        The trust chain in PEM format for the ECDSA certificate you want to upload.
        """
        return pulumi.get(self, "trust_chain_ecdsa_pem")

    @trust_chain_ecdsa_pem.setter
    def trust_chain_ecdsa_pem(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trust_chain_ecdsa_pem", value)

    @property
    @pulumi.getter(name="trustChainRsaPem")
    def trust_chain_rsa_pem(self) -> Optional[pulumi.Input[str]]:
        """
        The trust chain in PEM format for the RSA certificate you want to upload.
        """
        return pulumi.get(self, "trust_chain_rsa_pem")

    @trust_chain_rsa_pem.setter
    def trust_chain_rsa_pem(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trust_chain_rsa_pem", value)

    @property
    @pulumi.getter(name="waitForDeployment")
    def wait_for_deployment(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean. Enter `true` to wait for certificate to be deployed.
        """
        return pulumi.get(self, "wait_for_deployment")

    @wait_for_deployment.setter
    def wait_for_deployment(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "wait_for_deployment", value)


@pulumi.input_type
class _CpsUploadCertificateState:
    def __init__(__self__, *,
                 acknowledge_change_management: Optional[pulumi.Input[bool]] = None,
                 acknowledge_post_verification_warnings: Optional[pulumi.Input[bool]] = None,
                 auto_approve_warnings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 certificate_ecdsa_pem: Optional[pulumi.Input[str]] = None,
                 certificate_rsa_pem: Optional[pulumi.Input[str]] = None,
                 enrollment_id: Optional[pulumi.Input[int]] = None,
                 trust_chain_ecdsa_pem: Optional[pulumi.Input[str]] = None,
                 trust_chain_rsa_pem: Optional[pulumi.Input[str]] = None,
                 unacknowledged_warnings: Optional[pulumi.Input[bool]] = None,
                 wait_for_deployment: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering CpsUploadCertificate resources.
        :param pulumi.Input[bool] acknowledge_change_management: Boolean. Use only if `change_management` is set to `true` in the `CpsThirdPartyEnrollment` resource. Enter `true` to acknowledge that testing on staging is complete and to deploy the certificate to production.
        :param pulumi.Input[bool] acknowledge_post_verification_warnings: Boolean. Enter `true` if you want to acknowledge the post-verification warnings defined in `auto_approve_warnings`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] auto_approve_warnings: The list of post-verification warning IDs you want to automatically acknowledge. To retrieve the list of warnings, use the _get_cps_warnings_ data source.
        :param pulumi.Input[str] certificate_ecdsa_pem: The ECDSA certificate in PEM format you want to upload.
        :param pulumi.Input[str] certificate_rsa_pem: The RSA certificate in PEM format you want to upload.
        :param pulumi.Input[int] enrollment_id: Unique identifier for the certificate enrollment.
               * certificate PEM file (Required) - Include at least one of the following arguments for the PEM file to upload. You can upload an ECDSA certificate, an RSA certificate, or both.
        :param pulumi.Input[str] trust_chain_ecdsa_pem: The trust chain in PEM format for the ECDSA certificate you want to upload.
        :param pulumi.Input[str] trust_chain_rsa_pem: The trust chain in PEM format for the RSA certificate you want to upload.
        :param pulumi.Input[bool] unacknowledged_warnings: Used to distinguish whether there are unacknowledged warnings for a certificate
        :param pulumi.Input[bool] wait_for_deployment: Boolean. Enter `true` to wait for certificate to be deployed.
        """
        if acknowledge_change_management is not None:
            pulumi.set(__self__, "acknowledge_change_management", acknowledge_change_management)
        if acknowledge_post_verification_warnings is not None:
            pulumi.set(__self__, "acknowledge_post_verification_warnings", acknowledge_post_verification_warnings)
        if auto_approve_warnings is not None:
            pulumi.set(__self__, "auto_approve_warnings", auto_approve_warnings)
        if certificate_ecdsa_pem is not None:
            pulumi.set(__self__, "certificate_ecdsa_pem", certificate_ecdsa_pem)
        if certificate_rsa_pem is not None:
            pulumi.set(__self__, "certificate_rsa_pem", certificate_rsa_pem)
        if enrollment_id is not None:
            pulumi.set(__self__, "enrollment_id", enrollment_id)
        if trust_chain_ecdsa_pem is not None:
            pulumi.set(__self__, "trust_chain_ecdsa_pem", trust_chain_ecdsa_pem)
        if trust_chain_rsa_pem is not None:
            pulumi.set(__self__, "trust_chain_rsa_pem", trust_chain_rsa_pem)
        if unacknowledged_warnings is not None:
            pulumi.set(__self__, "unacknowledged_warnings", unacknowledged_warnings)
        if wait_for_deployment is not None:
            pulumi.set(__self__, "wait_for_deployment", wait_for_deployment)

    @property
    @pulumi.getter(name="acknowledgeChangeManagement")
    def acknowledge_change_management(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean. Use only if `change_management` is set to `true` in the `CpsThirdPartyEnrollment` resource. Enter `true` to acknowledge that testing on staging is complete and to deploy the certificate to production.
        """
        return pulumi.get(self, "acknowledge_change_management")

    @acknowledge_change_management.setter
    def acknowledge_change_management(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "acknowledge_change_management", value)

    @property
    @pulumi.getter(name="acknowledgePostVerificationWarnings")
    def acknowledge_post_verification_warnings(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean. Enter `true` if you want to acknowledge the post-verification warnings defined in `auto_approve_warnings`.
        """
        return pulumi.get(self, "acknowledge_post_verification_warnings")

    @acknowledge_post_verification_warnings.setter
    def acknowledge_post_verification_warnings(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "acknowledge_post_verification_warnings", value)

    @property
    @pulumi.getter(name="autoApproveWarnings")
    def auto_approve_warnings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of post-verification warning IDs you want to automatically acknowledge. To retrieve the list of warnings, use the _get_cps_warnings_ data source.
        """
        return pulumi.get(self, "auto_approve_warnings")

    @auto_approve_warnings.setter
    def auto_approve_warnings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "auto_approve_warnings", value)

    @property
    @pulumi.getter(name="certificateEcdsaPem")
    def certificate_ecdsa_pem(self) -> Optional[pulumi.Input[str]]:
        """
        The ECDSA certificate in PEM format you want to upload.
        """
        return pulumi.get(self, "certificate_ecdsa_pem")

    @certificate_ecdsa_pem.setter
    def certificate_ecdsa_pem(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_ecdsa_pem", value)

    @property
    @pulumi.getter(name="certificateRsaPem")
    def certificate_rsa_pem(self) -> Optional[pulumi.Input[str]]:
        """
        The RSA certificate in PEM format you want to upload.
        """
        return pulumi.get(self, "certificate_rsa_pem")

    @certificate_rsa_pem.setter
    def certificate_rsa_pem(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_rsa_pem", value)

    @property
    @pulumi.getter(name="enrollmentId")
    def enrollment_id(self) -> Optional[pulumi.Input[int]]:
        """
        Unique identifier for the certificate enrollment.
        * certificate PEM file (Required) - Include at least one of the following arguments for the PEM file to upload. You can upload an ECDSA certificate, an RSA certificate, or both.
        """
        return pulumi.get(self, "enrollment_id")

    @enrollment_id.setter
    def enrollment_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "enrollment_id", value)

    @property
    @pulumi.getter(name="trustChainEcdsaPem")
    def trust_chain_ecdsa_pem(self) -> Optional[pulumi.Input[str]]:
        """
        The trust chain in PEM format for the ECDSA certificate you want to upload.
        """
        return pulumi.get(self, "trust_chain_ecdsa_pem")

    @trust_chain_ecdsa_pem.setter
    def trust_chain_ecdsa_pem(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trust_chain_ecdsa_pem", value)

    @property
    @pulumi.getter(name="trustChainRsaPem")
    def trust_chain_rsa_pem(self) -> Optional[pulumi.Input[str]]:
        """
        The trust chain in PEM format for the RSA certificate you want to upload.
        """
        return pulumi.get(self, "trust_chain_rsa_pem")

    @trust_chain_rsa_pem.setter
    def trust_chain_rsa_pem(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trust_chain_rsa_pem", value)

    @property
    @pulumi.getter(name="unacknowledgedWarnings")
    def unacknowledged_warnings(self) -> Optional[pulumi.Input[bool]]:
        """
        Used to distinguish whether there are unacknowledged warnings for a certificate
        """
        return pulumi.get(self, "unacknowledged_warnings")

    @unacknowledged_warnings.setter
    def unacknowledged_warnings(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "unacknowledged_warnings", value)

    @property
    @pulumi.getter(name="waitForDeployment")
    def wait_for_deployment(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean. Enter `true` to wait for certificate to be deployed.
        """
        return pulumi.get(self, "wait_for_deployment")

    @wait_for_deployment.setter
    def wait_for_deployment(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "wait_for_deployment", value)


class CpsUploadCertificate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acknowledge_change_management: Optional[pulumi.Input[bool]] = None,
                 acknowledge_post_verification_warnings: Optional[pulumi.Input[bool]] = None,
                 auto_approve_warnings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 certificate_ecdsa_pem: Optional[pulumi.Input[str]] = None,
                 certificate_rsa_pem: Optional[pulumi.Input[str]] = None,
                 enrollment_id: Optional[pulumi.Input[int]] = None,
                 trust_chain_ecdsa_pem: Optional[pulumi.Input[str]] = None,
                 trust_chain_rsa_pem: Optional[pulumi.Input[str]] = None,
                 wait_for_deployment: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Use the `CpsUploadCertificate` resource to upload a third-party certificate and any other files that your CA sent you into CPS. The certificate and trust chain that your CA gives you must be in PEM format before you can use it in CPS. A PEM certificate is a base64 encoded ASCII file and contains `----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----` statements.

        If your CA provides you with a certificate that is not in PEM format, you can convert it to PEM format using an SSL converter.

        ## Example Usage

        Basic usage:

        ```python
        import pulumi
        import pulumi_akamai as akamai

        upload_cert = akamai.CpsUploadCertificate("uploadCert",
            enrollment_id=12345,
            certificate_ecdsa_pem=example_cert_ecdsa["pem"],
            trust_chain_ecdsa_pem=example_trust_chain_ecdsa["pem"],
            acknowledge_post_verification_warnings=True,
            acknowledge_change_management=True,
            wait_for_deployment=True)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] acknowledge_change_management: Boolean. Use only if `change_management` is set to `true` in the `CpsThirdPartyEnrollment` resource. Enter `true` to acknowledge that testing on staging is complete and to deploy the certificate to production.
        :param pulumi.Input[bool] acknowledge_post_verification_warnings: Boolean. Enter `true` if you want to acknowledge the post-verification warnings defined in `auto_approve_warnings`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] auto_approve_warnings: The list of post-verification warning IDs you want to automatically acknowledge. To retrieve the list of warnings, use the _get_cps_warnings_ data source.
        :param pulumi.Input[str] certificate_ecdsa_pem: The ECDSA certificate in PEM format you want to upload.
        :param pulumi.Input[str] certificate_rsa_pem: The RSA certificate in PEM format you want to upload.
        :param pulumi.Input[int] enrollment_id: Unique identifier for the certificate enrollment.
               * certificate PEM file (Required) - Include at least one of the following arguments for the PEM file to upload. You can upload an ECDSA certificate, an RSA certificate, or both.
        :param pulumi.Input[str] trust_chain_ecdsa_pem: The trust chain in PEM format for the ECDSA certificate you want to upload.
        :param pulumi.Input[str] trust_chain_rsa_pem: The trust chain in PEM format for the RSA certificate you want to upload.
        :param pulumi.Input[bool] wait_for_deployment: Boolean. Enter `true` to wait for certificate to be deployed.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CpsUploadCertificateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use the `CpsUploadCertificate` resource to upload a third-party certificate and any other files that your CA sent you into CPS. The certificate and trust chain that your CA gives you must be in PEM format before you can use it in CPS. A PEM certificate is a base64 encoded ASCII file and contains `----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----` statements.

        If your CA provides you with a certificate that is not in PEM format, you can convert it to PEM format using an SSL converter.

        ## Example Usage

        Basic usage:

        ```python
        import pulumi
        import pulumi_akamai as akamai

        upload_cert = akamai.CpsUploadCertificate("uploadCert",
            enrollment_id=12345,
            certificate_ecdsa_pem=example_cert_ecdsa["pem"],
            trust_chain_ecdsa_pem=example_trust_chain_ecdsa["pem"],
            acknowledge_post_verification_warnings=True,
            acknowledge_change_management=True,
            wait_for_deployment=True)
        ```

        :param str resource_name: The name of the resource.
        :param CpsUploadCertificateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CpsUploadCertificateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acknowledge_change_management: Optional[pulumi.Input[bool]] = None,
                 acknowledge_post_verification_warnings: Optional[pulumi.Input[bool]] = None,
                 auto_approve_warnings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 certificate_ecdsa_pem: Optional[pulumi.Input[str]] = None,
                 certificate_rsa_pem: Optional[pulumi.Input[str]] = None,
                 enrollment_id: Optional[pulumi.Input[int]] = None,
                 trust_chain_ecdsa_pem: Optional[pulumi.Input[str]] = None,
                 trust_chain_rsa_pem: Optional[pulumi.Input[str]] = None,
                 wait_for_deployment: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CpsUploadCertificateArgs.__new__(CpsUploadCertificateArgs)

            __props__.__dict__["acknowledge_change_management"] = acknowledge_change_management
            __props__.__dict__["acknowledge_post_verification_warnings"] = acknowledge_post_verification_warnings
            __props__.__dict__["auto_approve_warnings"] = auto_approve_warnings
            __props__.__dict__["certificate_ecdsa_pem"] = certificate_ecdsa_pem
            __props__.__dict__["certificate_rsa_pem"] = certificate_rsa_pem
            if enrollment_id is None and not opts.urn:
                raise TypeError("Missing required property 'enrollment_id'")
            __props__.__dict__["enrollment_id"] = enrollment_id
            __props__.__dict__["trust_chain_ecdsa_pem"] = trust_chain_ecdsa_pem
            __props__.__dict__["trust_chain_rsa_pem"] = trust_chain_rsa_pem
            __props__.__dict__["wait_for_deployment"] = wait_for_deployment
            __props__.__dict__["unacknowledged_warnings"] = None
        super(CpsUploadCertificate, __self__).__init__(
            'akamai:index/cpsUploadCertificate:CpsUploadCertificate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            acknowledge_change_management: Optional[pulumi.Input[bool]] = None,
            acknowledge_post_verification_warnings: Optional[pulumi.Input[bool]] = None,
            auto_approve_warnings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            certificate_ecdsa_pem: Optional[pulumi.Input[str]] = None,
            certificate_rsa_pem: Optional[pulumi.Input[str]] = None,
            enrollment_id: Optional[pulumi.Input[int]] = None,
            trust_chain_ecdsa_pem: Optional[pulumi.Input[str]] = None,
            trust_chain_rsa_pem: Optional[pulumi.Input[str]] = None,
            unacknowledged_warnings: Optional[pulumi.Input[bool]] = None,
            wait_for_deployment: Optional[pulumi.Input[bool]] = None) -> 'CpsUploadCertificate':
        """
        Get an existing CpsUploadCertificate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] acknowledge_change_management: Boolean. Use only if `change_management` is set to `true` in the `CpsThirdPartyEnrollment` resource. Enter `true` to acknowledge that testing on staging is complete and to deploy the certificate to production.
        :param pulumi.Input[bool] acknowledge_post_verification_warnings: Boolean. Enter `true` if you want to acknowledge the post-verification warnings defined in `auto_approve_warnings`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] auto_approve_warnings: The list of post-verification warning IDs you want to automatically acknowledge. To retrieve the list of warnings, use the _get_cps_warnings_ data source.
        :param pulumi.Input[str] certificate_ecdsa_pem: The ECDSA certificate in PEM format you want to upload.
        :param pulumi.Input[str] certificate_rsa_pem: The RSA certificate in PEM format you want to upload.
        :param pulumi.Input[int] enrollment_id: Unique identifier for the certificate enrollment.
               * certificate PEM file (Required) - Include at least one of the following arguments for the PEM file to upload. You can upload an ECDSA certificate, an RSA certificate, or both.
        :param pulumi.Input[str] trust_chain_ecdsa_pem: The trust chain in PEM format for the ECDSA certificate you want to upload.
        :param pulumi.Input[str] trust_chain_rsa_pem: The trust chain in PEM format for the RSA certificate you want to upload.
        :param pulumi.Input[bool] unacknowledged_warnings: Used to distinguish whether there are unacknowledged warnings for a certificate
        :param pulumi.Input[bool] wait_for_deployment: Boolean. Enter `true` to wait for certificate to be deployed.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CpsUploadCertificateState.__new__(_CpsUploadCertificateState)

        __props__.__dict__["acknowledge_change_management"] = acknowledge_change_management
        __props__.__dict__["acknowledge_post_verification_warnings"] = acknowledge_post_verification_warnings
        __props__.__dict__["auto_approve_warnings"] = auto_approve_warnings
        __props__.__dict__["certificate_ecdsa_pem"] = certificate_ecdsa_pem
        __props__.__dict__["certificate_rsa_pem"] = certificate_rsa_pem
        __props__.__dict__["enrollment_id"] = enrollment_id
        __props__.__dict__["trust_chain_ecdsa_pem"] = trust_chain_ecdsa_pem
        __props__.__dict__["trust_chain_rsa_pem"] = trust_chain_rsa_pem
        __props__.__dict__["unacknowledged_warnings"] = unacknowledged_warnings
        __props__.__dict__["wait_for_deployment"] = wait_for_deployment
        return CpsUploadCertificate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="acknowledgeChangeManagement")
    def acknowledge_change_management(self) -> pulumi.Output[Optional[bool]]:
        """
        Boolean. Use only if `change_management` is set to `true` in the `CpsThirdPartyEnrollment` resource. Enter `true` to acknowledge that testing on staging is complete and to deploy the certificate to production.
        """
        return pulumi.get(self, "acknowledge_change_management")

    @property
    @pulumi.getter(name="acknowledgePostVerificationWarnings")
    def acknowledge_post_verification_warnings(self) -> pulumi.Output[Optional[bool]]:
        """
        Boolean. Enter `true` if you want to acknowledge the post-verification warnings defined in `auto_approve_warnings`.
        """
        return pulumi.get(self, "acknowledge_post_verification_warnings")

    @property
    @pulumi.getter(name="autoApproveWarnings")
    def auto_approve_warnings(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The list of post-verification warning IDs you want to automatically acknowledge. To retrieve the list of warnings, use the _get_cps_warnings_ data source.
        """
        return pulumi.get(self, "auto_approve_warnings")

    @property
    @pulumi.getter(name="certificateEcdsaPem")
    def certificate_ecdsa_pem(self) -> pulumi.Output[Optional[str]]:
        """
        The ECDSA certificate in PEM format you want to upload.
        """
        return pulumi.get(self, "certificate_ecdsa_pem")

    @property
    @pulumi.getter(name="certificateRsaPem")
    def certificate_rsa_pem(self) -> pulumi.Output[Optional[str]]:
        """
        The RSA certificate in PEM format you want to upload.
        """
        return pulumi.get(self, "certificate_rsa_pem")

    @property
    @pulumi.getter(name="enrollmentId")
    def enrollment_id(self) -> pulumi.Output[int]:
        """
        Unique identifier for the certificate enrollment.
        * certificate PEM file (Required) - Include at least one of the following arguments for the PEM file to upload. You can upload an ECDSA certificate, an RSA certificate, or both.
        """
        return pulumi.get(self, "enrollment_id")

    @property
    @pulumi.getter(name="trustChainEcdsaPem")
    def trust_chain_ecdsa_pem(self) -> pulumi.Output[Optional[str]]:
        """
        The trust chain in PEM format for the ECDSA certificate you want to upload.
        """
        return pulumi.get(self, "trust_chain_ecdsa_pem")

    @property
    @pulumi.getter(name="trustChainRsaPem")
    def trust_chain_rsa_pem(self) -> pulumi.Output[Optional[str]]:
        """
        The trust chain in PEM format for the RSA certificate you want to upload.
        """
        return pulumi.get(self, "trust_chain_rsa_pem")

    @property
    @pulumi.getter(name="unacknowledgedWarnings")
    def unacknowledged_warnings(self) -> pulumi.Output[bool]:
        """
        Used to distinguish whether there are unacknowledged warnings for a certificate
        """
        return pulumi.get(self, "unacknowledged_warnings")

    @property
    @pulumi.getter(name="waitForDeployment")
    def wait_for_deployment(self) -> pulumi.Output[Optional[bool]]:
        """
        Boolean. Enter `true` to wait for certificate to be deployed.
        """
        return pulumi.get(self, "wait_for_deployment")

