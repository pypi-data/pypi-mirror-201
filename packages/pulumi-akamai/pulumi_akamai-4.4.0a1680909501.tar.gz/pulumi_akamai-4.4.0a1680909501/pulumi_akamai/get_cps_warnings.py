# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetCpsWarningsResult',
    'AwaitableGetCpsWarningsResult',
    'get_cps_warnings',
]

@pulumi.output_type
class GetCpsWarningsResult:
    """
    A collection of values returned by getCpsWarnings.
    """
    def __init__(__self__, id=None, warnings=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if warnings and not isinstance(warnings, dict):
            raise TypeError("Expected argument 'warnings' to be a dict")
        pulumi.set(__self__, "warnings", warnings)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def warnings(self) -> Mapping[str, str]:
        return pulumi.get(self, "warnings")


class AwaitableGetCpsWarningsResult(GetCpsWarningsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCpsWarningsResult(
            id=self.id,
            warnings=self.warnings)


def get_cps_warnings(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCpsWarningsResult:
    """
    Use the _get_cps_warnings_ data source to return a map of all possible pre- and post-verification warnings. The map includes both the ID needed to acknowledge a warning and a brief description of the issue.

    CPS produces warnings during enrollment creation or after a client uploads the certificate. CPS won't process a change until you acknowledge all warnings.

    You can use the warning IDs returned by this data source to acknowledge or auto-approve warnings. The `CpsThirdPartyEnrollment` and `CpsUploadCertificate` resources include arguments to help you do this.

    ## Basic usage

    This example shows how to return a map of verification warnings:

    ```python
    import pulumi
    import pulumi_akamai as akamai

    example = akamai.get_cps_warnings()
    ```

    ## Attributes reference

    This data source returns this attribute:

      * `warnings` - Validation warnings for the current change you're making. Warnings display with an ID and a short description. Unless you auto-approve warnings, you need the ID to acknowledge the change. CPS won't process the change until you acknowledge these warnings.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('akamai:index/getCpsWarnings:getCpsWarnings', __args__, opts=opts, typ=GetCpsWarningsResult).value

    return AwaitableGetCpsWarningsResult(
        id=__ret__.id,
        warnings=__ret__.warnings)
