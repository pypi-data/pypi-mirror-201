{"version":3,"file":"lib_index_js.6de74611b3c4c6ceb06b.js","mappings":"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","sources":["webpack://jupysql-plugin/./src/connector.ts","webpack://jupysql-plugin/./src/customconnector.ts","webpack://jupysql-plugin/./src/index.ts"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\n// Modified from jupyterlab/packages/completer/src/connector.ts\n\nimport { DataConnector } from '@jupyterlab/statedb';\nimport { CompletionHandler } from '@jupyterlab/completer';\n\n/**\n * A multi-connector connector for completion handlers.\n */\nexport class CompletionConnector extends DataConnector<\n  CompletionHandler.IReply,\n  void,\n  CompletionHandler.IRequest\n> {\n  /**\n   * Create a new connector for completion requests.\n   *\n   * @param connectors - Connectors to request matches from, ordered by metadata preference (descending).\n   */\n  constructor(\n    connectors: DataConnector<\n      CompletionHandler.IReply,\n      void,\n      CompletionHandler.IRequest\n    >[]\n  ) {\n    super();\n    this._connectors = connectors;\n  }\n\n  /**\n   * Fetch completion requests.\n   *\n   * @param request - The completion request text and details.\n   * @returns Completion reply\n   */\n  fetch(\n    request: CompletionHandler.IRequest\n  ): Promise<CompletionHandler.IReply> {\n    return Promise.all(\n      this._connectors.map((connector) => connector.fetch(request))\n    ).then((replies) => {\n      const definedReplies = replies.filter(\n        (reply): reply is CompletionHandler.IReply => !!reply\n      );\n      return Private.mergeReplies(definedReplies);\n    });\n  }\n\n  private _connectors: DataConnector<\n    CompletionHandler.IReply,\n    void,\n    CompletionHandler.IRequest\n  >[];\n}\n\n/**\n * A namespace for private functionality.\n */\nnamespace Private {\n  /**\n   * Merge results from multiple connectors.\n   *\n   * @param replies - Array of completion results.\n   * @returns IReply with a superset of all matches.\n   */\n  export function mergeReplies(\n    replies: Array<CompletionHandler.IReply>\n  ): CompletionHandler.IReply {\n    // Filter replies with matches.\n    const repliesWithMatches = replies.filter((rep) => rep.matches.length > 0);\n    // If no replies contain matches, return an empty IReply.\n    if (repliesWithMatches.length === 0) {\n      return replies[0];\n    }\n    // If only one reply contains matches, return it.\n    if (repliesWithMatches.length === 1) {\n      return repliesWithMatches[0];\n    }\n\n    // Collect unique matches from all replies.\n    const matches: Set<string> = new Set();\n    repliesWithMatches.forEach((reply) => {\n      reply.matches.forEach((match) => matches.add(match));\n    });\n\n    // Note that the returned metadata field only contains items in the first member of repliesWithMatches.\n    return { ...repliesWithMatches[0], matches: [...matches] };\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\n// Modified from jupyterlab/packages/completer/src/contextconnector.ts\n\nimport { CodeEditor } from '@jupyterlab/codeeditor';\nimport { DataConnector } from '@jupyterlab/statedb';\nimport { CompletionHandler } from '@jupyterlab/completer';\n\nimport {\n  ISessionContext\n} from '@jupyterlab/apputils';\n\nimport keywords from './keywords.json';\n\n/**\n * A custom connector for completion handlers.\n */\nexport class CustomConnector extends DataConnector<\n  CompletionHandler.IReply,\n  void,\n  CompletionHandler.IRequest\n> {\n  /**\n   * Create a new custom connector for completion requests.\n   *\n   * @param options - The instatiation options for the custom connector.\n   */\n  constructor(options: CustomConnector.IOptions) {\n    super();\n    this._editor = options.editor;\n    this._sessionContext = options.sessionContext;\n  }\n\n  /**\n   * Fetch completion requests.\n   *\n   * @param request - The completion request text and details.\n   * @returns Completion reply\n   */\n  fetch(\n    request: CompletionHandler.IRequest\n  ): Promise<CompletionHandler.IReply> {\n    if (!this._editor) {\n      return Promise.reject('No editor');\n    }\n    return new Promise<CompletionHandler.IReply>((resolve) => {\n      resolve(Private.completionHint(this._editor, this._sessionContext));\n    });\n  }\n\n  private _editor: CodeEditor.IEditor | null;\n  private _sessionContext: ISessionContext | null;\n\n}\n\n/**\n * A namespace for custom connector statics.\n */\nexport namespace CustomConnector {\n  /**\n   * The instantiation options for cell completion handlers.\n   */\n  export interface IOptions {\n    /**\n     * The session used by the custom connector.\n     */\n    editor: CodeEditor.IEditor | null;\n    sessionContext: ISessionContext | null;\n  }\n\n}\n\n\n\n/**\n * A namespace for Private functionality.\n */\nnamespace Private {\n  /**\n   * Get a list of mocked completion hints.\n   *\n   * @param editor Editor\n   * @returns Completion reply\n   */\n\n\n\n\n  export function completionHint(\n    editor: CodeEditor.IEditor,\n    sessionContext: ISessionContext\n  ): CompletionHandler.IReply {\n    // Find the token at the cursor\n    const cursor = editor.getCursorPosition();\n    const token = editor.getTokenForPosition(cursor);\n\n    var newTokenList = keywords[\"keywords\"]\n\n    const completionList = newTokenList.filter((t) => t.value.startsWith(token.value.toUpperCase())).map((t) => t.value);\n\n    // Remove duplicate completions from the list\n    const matches = Array.from(new Set<string>(completionList));\n\n    return {\n      start: token.offset,\n      end: token.offset + token.value.length,\n      matches,\n      metadata: {},\n    };\n  }\n}\n","import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin,\n} from '@jupyterlab/application';\n\nimport {\n  ContextConnector,\n  ICompletionManager,\n  KernelConnector,\n} from '@jupyterlab/completer';\n\nimport { INotebookTracker, NotebookPanel } from '@jupyterlab/notebook';\n\nimport { CompletionConnector } from './connector';\n\nimport { CustomConnector } from './customconnector';\n\n\n// for syntax highlighting\nimport { CodeMirrorEditor, ICodeMirror } from '@jupyterlab/codemirror';\nimport * as _ from 'underscore';\n\n/**\n * The command IDs used by the console plugin.\n */\nnamespace CommandIDs {\n  export const invoke = 'completer:invoke';\n\n  export const invokeNotebook = 'completer:invoke-notebook';\n\n  export const select = 'completer:select';\n\n  export const selectNotebook = 'completer:select-notebook';\n}\n\n/**\n * Initialization data for the extension.\n */\nconst extension: JupyterFrontEndPlugin<void> = {\n  id: 'completer',\n  autoStart: true,\n  requires: [ICompletionManager, INotebookTracker],\n  activate: async (\n    app: JupyterFrontEnd,\n    completionManager: ICompletionManager,\n    notebooks: INotebookTracker\n  ) => {\n    console.log('JupyterLab custom completer extension is activated!');\n\n    // Modelled after completer-extension's notebooks plugin\n    notebooks.widgetAdded.connect(\n      (sender: INotebookTracker, panel: NotebookPanel) => {\n        let editor = panel.content.activeCell?.editor ?? null;\n        const session = panel.sessionContext.session;\n        const sessionContext = panel.sessionContext;\n        const options = { session, editor, sessionContext };\n        const connector = new CompletionConnector([]);\n        const handler = completionManager.register({\n          connector,\n          editor,\n          parent: panel,\n        });\n\n        const updateConnector = () => {\n          editor = panel.content.activeCell?.editor ?? null;\n          options.session = panel.sessionContext.session;\n          options.sessionContext = panel.sessionContext;\n          options.editor = editor;\n          handler.editor = editor;\n\n          const kernel = new KernelConnector(options);\n          const context = new ContextConnector(options);\n          const custom = new CustomConnector(options);\n          handler.connector = new CompletionConnector([\n            kernel,\n            context,\n            custom\n          ]);\n        };\n\n        // Update the handler whenever the prompt or session changes\n        panel.content.activeCellChanged.connect(updateConnector);\n        panel.sessionContext.sessionChanged.connect(updateConnector);\n      }\n    );\n\n    // Add notebook completer command.\n    app.commands.addCommand(CommandIDs.invokeNotebook, {\n      execute: () => {\n        const panel = notebooks.currentWidget;\n        if (panel && panel.content.activeCell?.model.type === 'code') {\n          return app.commands.execute(CommandIDs.invoke, { id: panel.id });\n        }\n      },\n    });\n\n    // Add notebook completer select command.\n    app.commands.addCommand(CommandIDs.selectNotebook, {\n      execute: () => {\n        const id = notebooks.currentWidget && notebooks.currentWidget.id;\n\n        if (id) {\n          return app.commands.execute(CommandIDs.select, { id });\n        }\n      },\n    });\n\n    // Set enter key for notebook completer select command.\n    app.commands.addKeyBinding({\n      command: CommandIDs.selectNotebook,\n      keys: ['Enter'],\n      selector: '.jp-Notebook .jp-mod-completer-active',\n    });\n  },\n};\n\n\n// %%sql highlighting\nclass SqlCodeMirror {\n  constructor(\n    protected app: JupyterFrontEnd,\n    protected tracker: INotebookTracker,\n    protected code_mirror: ICodeMirror\n  ) {\n    this.tracker?.activeCellChanged?.connect(() => {\n      if (this.tracker?.activeCell !== null) {\n        const cell = this.tracker.activeCell;\n        if (cell !== null && cell?.model.type === 'code') {\n          const code_mirror_editor = cell?.editor as CodeMirrorEditor;\n          const debounced_on_change = _.debounce(() => {\n            // check for editor with first line starting with %%sql\n            const line = code_mirror_editor\n              .getLine(code_mirror_editor.firstLine())\n              ?.trim();\n            if (line?.startsWith('%%sql')) {\n              code_mirror_editor.editor.setOption('mode', 'text/x-sql');\n            } else {\n              code_mirror_editor.editor.setOption('mode', 'text/x-ipython');\n            }\n          }, 300);\n          code_mirror_editor.editor.on('change', debounced_on_change);\n          debounced_on_change();\n        }\n      }\n    });\n  }\n}\n\nfunction activate_syntax(\n  app: JupyterFrontEnd,\n  tracker: INotebookTracker,\n  code_mirror: ICodeMirror\n): void {\n  new SqlCodeMirror(app, tracker, code_mirror);\n  console.log('SQLCodeMirror loaded.');\n}\n\n/**\n * Initialization data for the jupyterlabs_sql_codemirror extension.\n */\nconst extension_sql: JupyterFrontEndPlugin<void> = {\n  id: '@ploomber/sql-syntax-highlighting',\n  autoStart: true,\n  requires: [INotebookTracker, ICodeMirror],\n  optional: [],\n  activate: activate_syntax\n};\n\n\nexport default [extension, extension_sql];\n"],"names":[],"sourceRoot":""}