# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class State_AxsBrakingDistanceExResp(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsState_AxsBrakingDistanceExResp(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = State_AxsBrakingDistanceExResp()
        x.Init(buf, n + offset)
        return x

    # State_AxsBrakingDistanceExResp
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # State_AxsBrakingDistanceExResp
    def BrakingDistance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # State_AxsBrakingDistanceExResp
    def DistanceType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def State_AxsBrakingDistanceExRespStart(builder): builder.StartObject(2)
def State_AxsBrakingDistanceExRespAddBrakingDistance(builder, brakingDistance): builder.PrependFloat64Slot(0, brakingDistance, 0.0)
def State_AxsBrakingDistanceExRespAddDistanceType(builder, distanceType): builder.PrependInt8Slot(1, distanceType, 0)
def State_AxsBrakingDistanceExRespEnd(builder): return builder.EndObject()


class State_AxsBrakingDistanceExRespT(object):

    # State_AxsBrakingDistanceExRespT
    def __init__(self):
        self.brakingDistance = 0.0  # type: float
        self.distanceType = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        stateAxsBrakingDistanceExResp = State_AxsBrakingDistanceExResp()
        stateAxsBrakingDistanceExResp.Init(buf, pos)
        return cls.InitFromObj(stateAxsBrakingDistanceExResp)

    @classmethod
    def InitFromObj(cls, stateAxsBrakingDistanceExResp):
        x = State_AxsBrakingDistanceExRespT()
        x._UnPack(stateAxsBrakingDistanceExResp)
        return x

    # State_AxsBrakingDistanceExRespT
    def _UnPack(self, stateAxsBrakingDistanceExResp):
        if stateAxsBrakingDistanceExResp is None:
            return
        self.brakingDistance = stateAxsBrakingDistanceExResp.BrakingDistance()
        self.distanceType = stateAxsBrakingDistanceExResp.DistanceType()

    # State_AxsBrakingDistanceExRespT
    def Pack(self, builder):
        State_AxsBrakingDistanceExRespStart(builder)
        State_AxsBrakingDistanceExRespAddBrakingDistance(builder, self.brakingDistance)
        State_AxsBrakingDistanceExRespAddDistanceType(builder, self.distanceType)
        stateAxsBrakingDistanceExResp = State_AxsBrakingDistanceExRespEnd(builder)
        return stateAxsBrakingDistanceExResp
