# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class State_AxsIpoValues(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsState_AxsIpoValues(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = State_AxsIpoValues()
        x.Init(buf, n + offset)
        return x

    # State_AxsIpoValues
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # State_AxsIpoValues
    def Pos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # State_AxsIpoValues
    def Vel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # State_AxsIpoValues
    def Acc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # State_AxsIpoValues
    def Jrk(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def State_AxsIpoValuesStart(builder): builder.StartObject(4)
def State_AxsIpoValuesAddPos(builder, pos): builder.PrependFloat64Slot(0, pos, 0.0)
def State_AxsIpoValuesAddVel(builder, vel): builder.PrependFloat64Slot(1, vel, 0.0)
def State_AxsIpoValuesAddAcc(builder, acc): builder.PrependFloat64Slot(2, acc, 0.0)
def State_AxsIpoValuesAddJrk(builder, jrk): builder.PrependFloat64Slot(3, jrk, 0.0)
def State_AxsIpoValuesEnd(builder): return builder.EndObject()


class State_AxsIpoValuesT(object):

    # State_AxsIpoValuesT
    def __init__(self):
        self.pos = 0.0  # type: float
        self.vel = 0.0  # type: float
        self.acc = 0.0  # type: float
        self.jrk = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        stateAxsIpoValues = State_AxsIpoValues()
        stateAxsIpoValues.Init(buf, pos)
        return cls.InitFromObj(stateAxsIpoValues)

    @classmethod
    def InitFromObj(cls, stateAxsIpoValues):
        x = State_AxsIpoValuesT()
        x._UnPack(stateAxsIpoValues)
        return x

    # State_AxsIpoValuesT
    def _UnPack(self, stateAxsIpoValues):
        if stateAxsIpoValues is None:
            return
        self.pos = stateAxsIpoValues.Pos()
        self.vel = stateAxsIpoValues.Vel()
        self.acc = stateAxsIpoValues.Acc()
        self.jrk = stateAxsIpoValues.Jrk()

    # State_AxsIpoValuesT
    def Pack(self, builder):
        State_AxsIpoValuesStart(builder)
        State_AxsIpoValuesAddPos(builder, self.pos)
        State_AxsIpoValuesAddVel(builder, self.vel)
        State_AxsIpoValuesAddAcc(builder, self.acc)
        State_AxsIpoValuesAddJrk(builder, self.jrk)
        stateAxsIpoValues = State_AxsIpoValuesEnd(builder)
        return stateAxsIpoValues
