# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Cmd_KinAbort(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCmd_KinAbort(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Cmd_KinAbort()
        x.Init(buf, n + offset)
        return x

    # Cmd_KinAbort
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Cmd_KinAbort
    def Base(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from script.manager.fbtypes.Cmd_Base import Cmd_Base
            obj = Cmd_Base()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Cmd_KinAbort
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Cmd_KinAbortStart(builder): builder.StartObject(2)
def Cmd_KinAbortAddBase(builder, base): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(base), 0)
def Cmd_KinAbortAddType(builder, type): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)
def Cmd_KinAbortEnd(builder): return builder.EndObject()

import script.manager.fbtypes.Cmd_Base
try:
    from typing import Optional
except:
    pass

class Cmd_KinAbortT(object):

    # Cmd_KinAbortT
    def __init__(self):
        self.base = None  # type: Optional[script.manager.fbtypes.Cmd_Base.Cmd_BaseT]
        self.type = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cmdKinAbort = Cmd_KinAbort()
        cmdKinAbort.Init(buf, pos)
        return cls.InitFromObj(cmdKinAbort)

    @classmethod
    def InitFromObj(cls, cmdKinAbort):
        x = Cmd_KinAbortT()
        x._UnPack(cmdKinAbort)
        return x

    # Cmd_KinAbortT
    def _UnPack(self, cmdKinAbort):
        if cmdKinAbort is None:
            return
        if cmdKinAbort.Base() is not None:
            self.base = script.manager.fbtypes.Cmd_Base.Cmd_BaseT.InitFromObj(cmdKinAbort.Base())
        self.type = cmdKinAbort.Type()

    # Cmd_KinAbortT
    def Pack(self, builder):
        if self.base is not None:
            base = self.base.Pack(builder)
        if self.type is not None:
            type = builder.CreateString(self.type)
        Cmd_KinAbortStart(builder)
        if self.base is not None:
            Cmd_KinAbortAddBase(builder, base)
        if self.type is not None:
            Cmd_KinAbortAddType(builder, type)
        cmdKinAbort = Cmd_KinAbortEnd(builder)
        return cmdKinAbort
