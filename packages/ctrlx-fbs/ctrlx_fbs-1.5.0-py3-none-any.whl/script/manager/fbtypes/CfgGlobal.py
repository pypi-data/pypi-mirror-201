# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CfgGlobal(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCfgGlobal(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CfgGlobal()
        x.Init(buf, n + offset)
        return x

    # CfgGlobal
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CfgGlobal
    def InitScript(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from script.manager.fbtypes.CfgInitScript import CfgInitScript
            obj = CfgInitScript()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def CfgGlobalStart(builder): builder.StartObject(1)
def CfgGlobalAddInitScript(builder, initScript): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(initScript), 0)
def CfgGlobalEnd(builder): return builder.EndObject()

import script.manager.fbtypes.CfgInitScript
try:
    from typing import Optional
except:
    pass

class CfgGlobalT(object):

    # CfgGlobalT
    def __init__(self):
        self.initScript = None  # type: Optional[script.manager.fbtypes.CfgInitScript.CfgInitScriptT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cfgGlobal = CfgGlobal()
        cfgGlobal.Init(buf, pos)
        return cls.InitFromObj(cfgGlobal)

    @classmethod
    def InitFromObj(cls, cfgGlobal):
        x = CfgGlobalT()
        x._UnPack(cfgGlobal)
        return x

    # CfgGlobalT
    def _UnPack(self, cfgGlobal):
        if cfgGlobal is None:
            return
        if cfgGlobal.InitScript() is not None:
            self.initScript = script.manager.fbtypes.CfgInitScript.CfgInitScriptT.InitFromObj(cfgGlobal.InitScript())

    # CfgGlobalT
    def Pack(self, builder):
        if self.initScript is not None:
            initScript = self.initScript.Pack(builder)
        CfgGlobalStart(builder)
        if self.initScript is not None:
            CfgGlobalAddInitScript(builder, initScript)
        cfgGlobal = CfgGlobalEnd(builder)
        return cfgGlobal
