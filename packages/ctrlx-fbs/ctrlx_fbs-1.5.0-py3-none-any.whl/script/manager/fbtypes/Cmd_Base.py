# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Cmd_Base(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCmd_Base(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Cmd_Base()
        x.Init(buf, n + offset)
        return x

    # Cmd_Base
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Cmd_Base
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Cmd_Base
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Cmd_Base
    def Line(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def Cmd_BaseStart(builder): builder.StartObject(3)
def Cmd_BaseAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def Cmd_BaseAddSource(builder, source): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)
def Cmd_BaseAddLine(builder, line): builder.PrependUint64Slot(2, line, 0)
def Cmd_BaseEnd(builder): return builder.EndObject()


class Cmd_BaseT(object):

    # Cmd_BaseT
    def __init__(self):
        self.name = None  # type: str
        self.source = None  # type: str
        self.line = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cmdBase = Cmd_Base()
        cmdBase.Init(buf, pos)
        return cls.InitFromObj(cmdBase)

    @classmethod
    def InitFromObj(cls, cmdBase):
        x = Cmd_BaseT()
        x._UnPack(cmdBase)
        return x

    # Cmd_BaseT
    def _UnPack(self, cmdBase):
        if cmdBase is None:
            return
        self.name = cmdBase.Name()
        self.source = cmdBase.Source()
        self.line = cmdBase.Line()

    # Cmd_BaseT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.source is not None:
            source = builder.CreateString(self.source)
        Cmd_BaseStart(builder)
        if self.name is not None:
            Cmd_BaseAddName(builder, name)
        if self.source is not None:
            Cmd_BaseAddSource(builder, source)
        Cmd_BaseAddLine(builder, self.line)
        cmdBase = Cmd_BaseEnd(builder)
        return cmdBase
