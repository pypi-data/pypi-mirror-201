# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Cmd_GenCmdOption(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCmd_GenCmdOption(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Cmd_GenCmdOption()
        x.Init(buf, n + offset)
        return x

    # Cmd_GenCmdOption
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Cmd_GenCmdOption
    def Base(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from script.manager.fbtypes.Cmd_Base import Cmd_Base
            obj = Cmd_Base()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Cmd_GenCmdOption
    def CmdName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Cmd_GenCmdOption
    def ObjType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Cmd_GenCmdOption
    def Params(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Cmd_GenCmdOption
    def ParamsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Cmd_GenCmdOption
    def ParamsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Cmd_GenCmdOption
    def ParamsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def Cmd_GenCmdOptionStart(builder): builder.StartObject(4)
def Cmd_GenCmdOptionAddBase(builder, base): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(base), 0)
def Cmd_GenCmdOptionAddCmdName(builder, cmdName): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(cmdName), 0)
def Cmd_GenCmdOptionAddObjType(builder, objType): builder.PrependInt8Slot(2, objType, 0)
def Cmd_GenCmdOptionAddParams(builder, params): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(params), 0)
def Cmd_GenCmdOptionStartParamsVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def Cmd_GenCmdOptionEnd(builder): return builder.EndObject()

import script.manager.fbtypes.Cmd_Base
try:
    from typing import List, Optional
except:
    pass

class Cmd_GenCmdOptionT(object):

    # Cmd_GenCmdOptionT
    def __init__(self):
        self.base = None  # type: Optional[script.manager.fbtypes.Cmd_Base.Cmd_BaseT]
        self.cmdName = None  # type: str
        self.objType = 0  # type: int
        self.params = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cmdGenCmdOption = Cmd_GenCmdOption()
        cmdGenCmdOption.Init(buf, pos)
        return cls.InitFromObj(cmdGenCmdOption)

    @classmethod
    def InitFromObj(cls, cmdGenCmdOption):
        x = Cmd_GenCmdOptionT()
        x._UnPack(cmdGenCmdOption)
        return x

    # Cmd_GenCmdOptionT
    def _UnPack(self, cmdGenCmdOption):
        if cmdGenCmdOption is None:
            return
        if cmdGenCmdOption.Base() is not None:
            self.base = script.manager.fbtypes.Cmd_Base.Cmd_BaseT.InitFromObj(cmdGenCmdOption.Base())
        self.cmdName = cmdGenCmdOption.CmdName()
        self.objType = cmdGenCmdOption.ObjType()
        if not cmdGenCmdOption.ParamsIsNone():
            if np is None:
                self.params = []
                for i in range(cmdGenCmdOption.ParamsLength()):
                    self.params.append(cmdGenCmdOption.Params(i))
            else:
                self.params = cmdGenCmdOption.ParamsAsNumpy()

    # Cmd_GenCmdOptionT
    def Pack(self, builder):
        if self.base is not None:
            base = self.base.Pack(builder)
        if self.cmdName is not None:
            cmdName = builder.CreateString(self.cmdName)
        if self.params is not None:
            if np is not None and type(self.params) is np.ndarray:
                params = builder.CreateNumpyVector(self.params)
            else:
                Cmd_GenCmdOptionStartParamsVector(builder, len(self.params))
                for i in reversed(range(len(self.params))):
                    builder.PrependUint8(self.params[i])
                params = builder.EndVector(len(self.params))
        Cmd_GenCmdOptionStart(builder)
        if self.base is not None:
            Cmd_GenCmdOptionAddBase(builder, base)
        if self.cmdName is not None:
            Cmd_GenCmdOptionAddCmdName(builder, cmdName)
        Cmd_GenCmdOptionAddObjType(builder, self.objType)
        if self.params is not None:
            Cmd_GenCmdOptionAddParams(builder, params)
        cmdGenCmdOption = Cmd_GenCmdOptionEnd(builder)
        return cmdGenCmdOption
