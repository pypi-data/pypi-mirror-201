# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# currently the actual values of the probe
class state_AxsProbeActualValuesReq(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsstate_AxsProbeActualValuesReq(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = state_AxsProbeActualValuesReq()
        x.Init(buf, n + offset)
        return x

    # state_AxsProbeActualValuesReq
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # probe object name
    # state_AxsProbeActualValuesReq
    def ObjName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # probe index
    # state_AxsProbeActualValuesReq
    def ProbeIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def state_AxsProbeActualValuesReqStart(builder): builder.StartObject(2)
def state_AxsProbeActualValuesReqAddObjName(builder, objName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(objName), 0)
def state_AxsProbeActualValuesReqAddProbeIndex(builder, probeIndex): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(probeIndex), 0)
def state_AxsProbeActualValuesReqEnd(builder): return builder.EndObject()


class state_AxsProbeActualValuesReqT(object):

    # state_AxsProbeActualValuesReqT
    def __init__(self):
        self.objName = None  # type: str
        self.probeIndex = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        stateAxsProbeActualValuesReq = state_AxsProbeActualValuesReq()
        stateAxsProbeActualValuesReq.Init(buf, pos)
        return cls.InitFromObj(stateAxsProbeActualValuesReq)

    @classmethod
    def InitFromObj(cls, stateAxsProbeActualValuesReq):
        x = state_AxsProbeActualValuesReqT()
        x._UnPack(stateAxsProbeActualValuesReq)
        return x

    # state_AxsProbeActualValuesReqT
    def _UnPack(self, stateAxsProbeActualValuesReq):
        if stateAxsProbeActualValuesReq is None:
            return
        self.objName = stateAxsProbeActualValuesReq.ObjName()
        self.probeIndex = stateAxsProbeActualValuesReq.ProbeIndex()

    # state_AxsProbeActualValuesReqT
    def Pack(self, builder):
        if self.objName is not None:
            objName = builder.CreateString(self.objName)
        if self.probeIndex is not None:
            probeIndex = builder.CreateString(self.probeIndex)
        state_AxsProbeActualValuesReqStart(builder)
        if self.objName is not None:
            state_AxsProbeActualValuesReqAddObjName(builder, objName)
        if self.probeIndex is not None:
            state_AxsProbeActualValuesReqAddProbeIndex(builder, probeIndex)
        stateAxsProbeActualValuesReq = state_AxsProbeActualValuesReqEnd(builder)
        return stateAxsProbeActualValuesReq
