# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ObjectDictionaryListResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsObjectDictionaryListResponse(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ObjectDictionaryListResponse()
        x.Init(buf, n + offset)
        return x

    # ObjectDictionaryListResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ObjectDictionaryListResponse
    def Indices(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 2))
        return 0

    # ObjectDictionaryListResponse
    def IndicesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint16Flags, o)
        return 0

    # ObjectDictionaryListResponse
    def IndicesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ObjectDictionaryListResponse
    def IndicesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def ObjectDictionaryListResponseStart(builder): builder.StartObject(1)
def ObjectDictionaryListResponseAddIndices(builder, indices): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(indices), 0)
def ObjectDictionaryListResponseStartIndicesVector(builder, numElems): return builder.StartVector(2, numElems, 2)
def ObjectDictionaryListResponseEnd(builder): return builder.EndObject()

try:
    from typing import List
except:
    pass

class ObjectDictionaryListResponseT(object):

    # ObjectDictionaryListResponseT
    def __init__(self):
        self.indices = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        objectDictionaryListResponse = ObjectDictionaryListResponse()
        objectDictionaryListResponse.Init(buf, pos)
        return cls.InitFromObj(objectDictionaryListResponse)

    @classmethod
    def InitFromObj(cls, objectDictionaryListResponse):
        x = ObjectDictionaryListResponseT()
        x._UnPack(objectDictionaryListResponse)
        return x

    # ObjectDictionaryListResponseT
    def _UnPack(self, objectDictionaryListResponse):
        if objectDictionaryListResponse is None:
            return
        if not objectDictionaryListResponse.IndicesIsNone():
            if np is None:
                self.indices = []
                for i in range(objectDictionaryListResponse.IndicesLength()):
                    self.indices.append(objectDictionaryListResponse.Indices(i))
            else:
                self.indices = objectDictionaryListResponse.IndicesAsNumpy()

    # ObjectDictionaryListResponseT
    def Pack(self, builder):
        if self.indices is not None:
            if np is not None and type(self.indices) is np.ndarray:
                indices = builder.CreateNumpyVector(self.indices)
            else:
                ObjectDictionaryListResponseStartIndicesVector(builder, len(self.indices))
                for i in reversed(range(len(self.indices))):
                    builder.PrependUint16(self.indices[i])
                indices = builder.EndVector(len(self.indices))
        ObjectDictionaryListResponseStart(builder)
        if self.indices is not None:
            ObjectDictionaryListResponseAddIndices(builder, indices)
        objectDictionaryListResponse = ObjectDictionaryListResponseEnd(builder)
        return objectDictionaryListResponse
