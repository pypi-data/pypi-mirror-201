# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FrameStatisticCountersResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFrameStatisticCountersResponse(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FrameStatisticCountersResponse()
        x.Init(buf, n + offset)
        return x

    # FrameStatisticCountersResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FrameStatisticCountersResponse
    def NumTxFrames(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FrameStatisticCountersResponse
    def NumRxFrames(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FrameStatisticCountersResponse
    def NumCyclicFrames(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FrameStatisticCountersResponse
    def NumCyclicDatagrams(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FrameStatisticCountersResponse
    def NumAcyclicFrames(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FrameStatisticCountersResponse
    def NumAcyclicDatagrams(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FrameStatisticCountersResponse
    def NumLostFrames(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FrameStatisticCountersResponse
    def NumLostCyclicFrames(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FrameStatisticCountersResponse
    def NumLostAcyclicFrames(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def FrameStatisticCountersResponseStart(builder): builder.StartObject(9)
def FrameStatisticCountersResponseAddNumTxFrames(builder, numTxFrames): builder.PrependUint32Slot(0, numTxFrames, 0)
def FrameStatisticCountersResponseAddNumRxFrames(builder, numRxFrames): builder.PrependUint32Slot(1, numRxFrames, 0)
def FrameStatisticCountersResponseAddNumCyclicFrames(builder, numCyclicFrames): builder.PrependUint32Slot(2, numCyclicFrames, 0)
def FrameStatisticCountersResponseAddNumCyclicDatagrams(builder, numCyclicDatagrams): builder.PrependUint32Slot(3, numCyclicDatagrams, 0)
def FrameStatisticCountersResponseAddNumAcyclicFrames(builder, numAcyclicFrames): builder.PrependUint32Slot(4, numAcyclicFrames, 0)
def FrameStatisticCountersResponseAddNumAcyclicDatagrams(builder, numAcyclicDatagrams): builder.PrependUint32Slot(5, numAcyclicDatagrams, 0)
def FrameStatisticCountersResponseAddNumLostFrames(builder, numLostFrames): builder.PrependUint32Slot(6, numLostFrames, 0)
def FrameStatisticCountersResponseAddNumLostCyclicFrames(builder, numLostCyclicFrames): builder.PrependUint32Slot(7, numLostCyclicFrames, 0)
def FrameStatisticCountersResponseAddNumLostAcyclicFrames(builder, numLostAcyclicFrames): builder.PrependUint32Slot(8, numLostAcyclicFrames, 0)
def FrameStatisticCountersResponseEnd(builder): return builder.EndObject()


class FrameStatisticCountersResponseT(object):

    # FrameStatisticCountersResponseT
    def __init__(self):
        self.numTxFrames = 0  # type: int
        self.numRxFrames = 0  # type: int
        self.numCyclicFrames = 0  # type: int
        self.numCyclicDatagrams = 0  # type: int
        self.numAcyclicFrames = 0  # type: int
        self.numAcyclicDatagrams = 0  # type: int
        self.numLostFrames = 0  # type: int
        self.numLostCyclicFrames = 0  # type: int
        self.numLostAcyclicFrames = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        frameStatisticCountersResponse = FrameStatisticCountersResponse()
        frameStatisticCountersResponse.Init(buf, pos)
        return cls.InitFromObj(frameStatisticCountersResponse)

    @classmethod
    def InitFromObj(cls, frameStatisticCountersResponse):
        x = FrameStatisticCountersResponseT()
        x._UnPack(frameStatisticCountersResponse)
        return x

    # FrameStatisticCountersResponseT
    def _UnPack(self, frameStatisticCountersResponse):
        if frameStatisticCountersResponse is None:
            return
        self.numTxFrames = frameStatisticCountersResponse.NumTxFrames()
        self.numRxFrames = frameStatisticCountersResponse.NumRxFrames()
        self.numCyclicFrames = frameStatisticCountersResponse.NumCyclicFrames()
        self.numCyclicDatagrams = frameStatisticCountersResponse.NumCyclicDatagrams()
        self.numAcyclicFrames = frameStatisticCountersResponse.NumAcyclicFrames()
        self.numAcyclicDatagrams = frameStatisticCountersResponse.NumAcyclicDatagrams()
        self.numLostFrames = frameStatisticCountersResponse.NumLostFrames()
        self.numLostCyclicFrames = frameStatisticCountersResponse.NumLostCyclicFrames()
        self.numLostAcyclicFrames = frameStatisticCountersResponse.NumLostAcyclicFrames()

    # FrameStatisticCountersResponseT
    def Pack(self, builder):
        FrameStatisticCountersResponseStart(builder)
        FrameStatisticCountersResponseAddNumTxFrames(builder, self.numTxFrames)
        FrameStatisticCountersResponseAddNumRxFrames(builder, self.numRxFrames)
        FrameStatisticCountersResponseAddNumCyclicFrames(builder, self.numCyclicFrames)
        FrameStatisticCountersResponseAddNumCyclicDatagrams(builder, self.numCyclicDatagrams)
        FrameStatisticCountersResponseAddNumAcyclicFrames(builder, self.numAcyclicFrames)
        FrameStatisticCountersResponseAddNumAcyclicDatagrams(builder, self.numAcyclicDatagrams)
        FrameStatisticCountersResponseAddNumLostFrames(builder, self.numLostFrames)
        FrameStatisticCountersResponseAddNumLostCyclicFrames(builder, self.numLostCyclicFrames)
        FrameStatisticCountersResponseAddNumLostAcyclicFrames(builder, self.numLostAcyclicFrames)
        frameStatisticCountersResponse = FrameStatisticCountersResponseEnd(builder)
        return frameStatisticCountersResponse
