# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class LinkLayerOnlineInfoResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsLinkLayerOnlineInfoResponse(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LinkLayerOnlineInfoResponse()
        x.Init(buf, n + offset)
        return x

    # LinkLayerOnlineInfoResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LinkLayerOnlineInfoResponse
    def Port(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # LinkLayerOnlineInfoResponse
    def LinkLayer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # LinkLayerOnlineInfoResponse
    def Arguments(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # LinkLayerOnlineInfoResponse
    def Message(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # LinkLayerOnlineInfoResponse
    def MacAddress(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # LinkLayerOnlineInfoResponse
    def MacAddressAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # LinkLayerOnlineInfoResponse
    def MacAddressLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LinkLayerOnlineInfoResponse
    def MacAddressIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # LinkLayerOnlineInfoResponse
    def FrameRepeatCntSupport(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # LinkLayerOnlineInfoResponse
    def LinkSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LinkLayerOnlineInfoResponse
    def LinkMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LinkLayerOnlineInfoResponse
    def LinkStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LinkLayerOnlineInfoResponse
    def RefClockWidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LinkLayerOnlineInfoResponse
    def SystemTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # LinkLayerOnlineInfoResponse
    def PhysicalErrorCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LinkLayerOnlineInfoResponse
    def TelegramErrorCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def LinkLayerOnlineInfoResponseStart(builder): builder.StartObject(13)
def LinkLayerOnlineInfoResponseAddPort(builder, port): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(port), 0)
def LinkLayerOnlineInfoResponseAddLinkLayer(builder, linkLayer): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(linkLayer), 0)
def LinkLayerOnlineInfoResponseAddArguments(builder, arguments): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(arguments), 0)
def LinkLayerOnlineInfoResponseAddMessage(builder, message): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(message), 0)
def LinkLayerOnlineInfoResponseAddMacAddress(builder, macAddress): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(macAddress), 0)
def LinkLayerOnlineInfoResponseStartMacAddressVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def LinkLayerOnlineInfoResponseAddFrameRepeatCntSupport(builder, frameRepeatCntSupport): builder.PrependBoolSlot(5, frameRepeatCntSupport, 0)
def LinkLayerOnlineInfoResponseAddLinkSpeed(builder, linkSpeed): builder.PrependUint32Slot(6, linkSpeed, 0)
def LinkLayerOnlineInfoResponseAddLinkMode(builder, linkMode): builder.PrependUint32Slot(7, linkMode, 0)
def LinkLayerOnlineInfoResponseAddLinkStatus(builder, linkStatus): builder.PrependUint32Slot(8, linkStatus, 0)
def LinkLayerOnlineInfoResponseAddRefClockWidth(builder, refClockWidth): builder.PrependUint32Slot(9, refClockWidth, 0)
def LinkLayerOnlineInfoResponseAddSystemTime(builder, systemTime): builder.PrependUint64Slot(10, systemTime, 0)
def LinkLayerOnlineInfoResponseAddPhysicalErrorCnt(builder, physicalErrorCnt): builder.PrependUint32Slot(11, physicalErrorCnt, 0)
def LinkLayerOnlineInfoResponseAddTelegramErrorCnt(builder, telegramErrorCnt): builder.PrependUint32Slot(12, telegramErrorCnt, 0)
def LinkLayerOnlineInfoResponseEnd(builder): return builder.EndObject()

try:
    from typing import List
except:
    pass

class LinkLayerOnlineInfoResponseT(object):

    # LinkLayerOnlineInfoResponseT
    def __init__(self):
        self.port = None  # type: str
        self.linkLayer = None  # type: str
        self.arguments = None  # type: str
        self.message = None  # type: str
        self.macAddress = None  # type: List[int]
        self.frameRepeatCntSupport = False  # type: bool
        self.linkSpeed = 0  # type: int
        self.linkMode = 0  # type: int
        self.linkStatus = 0  # type: int
        self.refClockWidth = 0  # type: int
        self.systemTime = 0  # type: int
        self.physicalErrorCnt = 0  # type: int
        self.telegramErrorCnt = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        linkLayerOnlineInfoResponse = LinkLayerOnlineInfoResponse()
        linkLayerOnlineInfoResponse.Init(buf, pos)
        return cls.InitFromObj(linkLayerOnlineInfoResponse)

    @classmethod
    def InitFromObj(cls, linkLayerOnlineInfoResponse):
        x = LinkLayerOnlineInfoResponseT()
        x._UnPack(linkLayerOnlineInfoResponse)
        return x

    # LinkLayerOnlineInfoResponseT
    def _UnPack(self, linkLayerOnlineInfoResponse):
        if linkLayerOnlineInfoResponse is None:
            return
        self.port = linkLayerOnlineInfoResponse.Port()
        self.linkLayer = linkLayerOnlineInfoResponse.LinkLayer()
        self.arguments = linkLayerOnlineInfoResponse.Arguments()
        self.message = linkLayerOnlineInfoResponse.Message()
        if not linkLayerOnlineInfoResponse.MacAddressIsNone():
            if np is None:
                self.macAddress = []
                for i in range(linkLayerOnlineInfoResponse.MacAddressLength()):
                    self.macAddress.append(linkLayerOnlineInfoResponse.MacAddress(i))
            else:
                self.macAddress = linkLayerOnlineInfoResponse.MacAddressAsNumpy()
        self.frameRepeatCntSupport = linkLayerOnlineInfoResponse.FrameRepeatCntSupport()
        self.linkSpeed = linkLayerOnlineInfoResponse.LinkSpeed()
        self.linkMode = linkLayerOnlineInfoResponse.LinkMode()
        self.linkStatus = linkLayerOnlineInfoResponse.LinkStatus()
        self.refClockWidth = linkLayerOnlineInfoResponse.RefClockWidth()
        self.systemTime = linkLayerOnlineInfoResponse.SystemTime()
        self.physicalErrorCnt = linkLayerOnlineInfoResponse.PhysicalErrorCnt()
        self.telegramErrorCnt = linkLayerOnlineInfoResponse.TelegramErrorCnt()

    # LinkLayerOnlineInfoResponseT
    def Pack(self, builder):
        if self.port is not None:
            port = builder.CreateString(self.port)
        if self.linkLayer is not None:
            linkLayer = builder.CreateString(self.linkLayer)
        if self.arguments is not None:
            arguments = builder.CreateString(self.arguments)
        if self.message is not None:
            message = builder.CreateString(self.message)
        if self.macAddress is not None:
            if np is not None and type(self.macAddress) is np.ndarray:
                macAddress = builder.CreateNumpyVector(self.macAddress)
            else:
                LinkLayerOnlineInfoResponseStartMacAddressVector(builder, len(self.macAddress))
                for i in reversed(range(len(self.macAddress))):
                    builder.PrependUint8(self.macAddress[i])
                macAddress = builder.EndVector(len(self.macAddress))
        LinkLayerOnlineInfoResponseStart(builder)
        if self.port is not None:
            LinkLayerOnlineInfoResponseAddPort(builder, port)
        if self.linkLayer is not None:
            LinkLayerOnlineInfoResponseAddLinkLayer(builder, linkLayer)
        if self.arguments is not None:
            LinkLayerOnlineInfoResponseAddArguments(builder, arguments)
        if self.message is not None:
            LinkLayerOnlineInfoResponseAddMessage(builder, message)
        if self.macAddress is not None:
            LinkLayerOnlineInfoResponseAddMacAddress(builder, macAddress)
        LinkLayerOnlineInfoResponseAddFrameRepeatCntSupport(builder, self.frameRepeatCntSupport)
        LinkLayerOnlineInfoResponseAddLinkSpeed(builder, self.linkSpeed)
        LinkLayerOnlineInfoResponseAddLinkMode(builder, self.linkMode)
        LinkLayerOnlineInfoResponseAddLinkStatus(builder, self.linkStatus)
        LinkLayerOnlineInfoResponseAddRefClockWidth(builder, self.refClockWidth)
        LinkLayerOnlineInfoResponseAddSystemTime(builder, self.systemTime)
        LinkLayerOnlineInfoResponseAddPhysicalErrorCnt(builder, self.physicalErrorCnt)
        LinkLayerOnlineInfoResponseAddTelegramErrorCnt(builder, self.telegramErrorCnt)
        linkLayerOnlineInfoResponse = LinkLayerOnlineInfoResponseEnd(builder)
        return linkLayerOnlineInfoResponse
