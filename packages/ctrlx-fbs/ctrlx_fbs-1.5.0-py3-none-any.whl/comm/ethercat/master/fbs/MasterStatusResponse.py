# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MasterStatusResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsMasterStatusResponse(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MasterStatusResponse()
        x.Init(buf, n + offset)
        return x

    # MasterStatusResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MasterStatusResponse
    def Status(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def MasterStatusResponseStart(builder): builder.StartObject(1)
def MasterStatusResponseAddStatus(builder, status): builder.PrependUint32Slot(0, status, 0)
def MasterStatusResponseEnd(builder): return builder.EndObject()


class MasterStatusResponseT(object):

    # MasterStatusResponseT
    def __init__(self):
        self.status = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        masterStatusResponse = MasterStatusResponse()
        masterStatusResponse.Init(buf, pos)
        return cls.InitFromObj(masterStatusResponse)

    @classmethod
    def InitFromObj(cls, masterStatusResponse):
        x = MasterStatusResponseT()
        x._UnPack(masterStatusResponse)
        return x

    # MasterStatusResponseT
    def _UnPack(self, masterStatusResponse):
        if masterStatusResponse is None:
            return
        self.status = masterStatusResponse.Status()

    # MasterStatusResponseT
    def Pack(self, builder):
        MasterStatusResponseStart(builder)
        MasterStatusResponseAddStatus(builder, self.status)
        masterStatusResponse = MasterStatusResponseEnd(builder)
        return masterStatusResponse
