# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EntryDescriptionResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsEntryDescriptionResponse(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EntryDescriptionResponse()
        x.Init(buf, n + offset)
        return x

    # EntryDescriptionResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EntryDescriptionResponse
    def Data(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # EntryDescriptionResponse
    def DataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # EntryDescriptionResponse
    def DataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EntryDescriptionResponse
    def DataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def EntryDescriptionResponseStart(builder): builder.StartObject(1)
def EntryDescriptionResponseAddData(builder, data): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)
def EntryDescriptionResponseStartDataVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def EntryDescriptionResponseEnd(builder): return builder.EndObject()

try:
    from typing import List
except:
    pass

class EntryDescriptionResponseT(object):

    # EntryDescriptionResponseT
    def __init__(self):
        self.data = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        entryDescriptionResponse = EntryDescriptionResponse()
        entryDescriptionResponse.Init(buf, pos)
        return cls.InitFromObj(entryDescriptionResponse)

    @classmethod
    def InitFromObj(cls, entryDescriptionResponse):
        x = EntryDescriptionResponseT()
        x._UnPack(entryDescriptionResponse)
        return x

    # EntryDescriptionResponseT
    def _UnPack(self, entryDescriptionResponse):
        if entryDescriptionResponse is None:
            return
        if not entryDescriptionResponse.DataIsNone():
            if np is None:
                self.data = []
                for i in range(entryDescriptionResponse.DataLength()):
                    self.data.append(entryDescriptionResponse.Data(i))
            else:
                self.data = entryDescriptionResponse.DataAsNumpy()

    # EntryDescriptionResponseT
    def Pack(self, builder):
        if self.data is not None:
            if np is not None and type(self.data) is np.ndarray:
                data = builder.CreateNumpyVector(self.data)
            else:
                EntryDescriptionResponseStartDataVector(builder, len(self.data))
                for i in reversed(range(len(self.data))):
                    builder.PrependUint8(self.data[i])
                data = builder.EndVector(len(self.data))
        EntryDescriptionResponseStart(builder)
        if self.data is not None:
            EntryDescriptionResponseAddData(builder, data)
        entryDescriptionResponse = EntryDescriptionResponseEnd(builder)
        return entryDescriptionResponse
