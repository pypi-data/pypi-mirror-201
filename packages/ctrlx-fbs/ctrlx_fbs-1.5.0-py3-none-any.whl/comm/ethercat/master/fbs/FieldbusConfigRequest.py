# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FieldbusConfigRequest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFieldbusConfigRequest(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FieldbusConfigRequest()
        x.Init(buf, n + offset)
        return x

    # FieldbusConfigRequest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FieldbusConfigRequest
    def Ini(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # FieldbusConfigRequest
    def IniAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # FieldbusConfigRequest
    def IniLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FieldbusConfigRequest
    def IniIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # FieldbusConfigRequest
    def Eni(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # FieldbusConfigRequest
    def EniAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # FieldbusConfigRequest
    def EniLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FieldbusConfigRequest
    def EniIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def FieldbusConfigRequestStart(builder): builder.StartObject(2)
def FieldbusConfigRequestAddIni(builder, ini): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(ini), 0)
def FieldbusConfigRequestStartIniVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def FieldbusConfigRequestAddEni(builder, eni): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(eni), 0)
def FieldbusConfigRequestStartEniVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def FieldbusConfigRequestEnd(builder): return builder.EndObject()

try:
    from typing import List
except:
    pass

class FieldbusConfigRequestT(object):

    # FieldbusConfigRequestT
    def __init__(self):
        self.ini = None  # type: List[int]
        self.eni = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        fieldbusConfigRequest = FieldbusConfigRequest()
        fieldbusConfigRequest.Init(buf, pos)
        return cls.InitFromObj(fieldbusConfigRequest)

    @classmethod
    def InitFromObj(cls, fieldbusConfigRequest):
        x = FieldbusConfigRequestT()
        x._UnPack(fieldbusConfigRequest)
        return x

    # FieldbusConfigRequestT
    def _UnPack(self, fieldbusConfigRequest):
        if fieldbusConfigRequest is None:
            return
        if not fieldbusConfigRequest.IniIsNone():
            if np is None:
                self.ini = []
                for i in range(fieldbusConfigRequest.IniLength()):
                    self.ini.append(fieldbusConfigRequest.Ini(i))
            else:
                self.ini = fieldbusConfigRequest.IniAsNumpy()
        if not fieldbusConfigRequest.EniIsNone():
            if np is None:
                self.eni = []
                for i in range(fieldbusConfigRequest.EniLength()):
                    self.eni.append(fieldbusConfigRequest.Eni(i))
            else:
                self.eni = fieldbusConfigRequest.EniAsNumpy()

    # FieldbusConfigRequestT
    def Pack(self, builder):
        if self.ini is not None:
            if np is not None and type(self.ini) is np.ndarray:
                ini = builder.CreateNumpyVector(self.ini)
            else:
                FieldbusConfigRequestStartIniVector(builder, len(self.ini))
                for i in reversed(range(len(self.ini))):
                    builder.PrependUint8(self.ini[i])
                ini = builder.EndVector(len(self.ini))
        if self.eni is not None:
            if np is not None and type(self.eni) is np.ndarray:
                eni = builder.CreateNumpyVector(self.eni)
            else:
                FieldbusConfigRequestStartEniVector(builder, len(self.eni))
                for i in reversed(range(len(self.eni))):
                    builder.PrependUint8(self.eni[i])
                eni = builder.EndVector(len(self.eni))
        FieldbusConfigRequestStart(builder)
        if self.ini is not None:
            FieldbusConfigRequestAddIni(builder, ini)
        if self.eni is not None:
            FieldbusConfigRequestAddEni(builder, eni)
        fieldbusConfigRequest = FieldbusConfigRequestEnd(builder)
        return fieldbusConfigRequest
