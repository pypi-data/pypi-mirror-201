# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SlaveOnlineInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsSlaveOnlineInfo(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SlaveOnlineInfo()
        x.Init(buf, n + offset)
        return x

    # SlaveOnlineInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SlaveOnlineInfo
    def Request(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.ethercat.master.fbs.AddressedRequest import AddressedRequest
            obj = AddressedRequest()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SlaveOnlineInfo
    def Response(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.ethercat.master.fbs.SlaveOnlineInfoResponse import SlaveOnlineInfoResponse
            obj = SlaveOnlineInfoResponse()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def SlaveOnlineInfoStart(builder): builder.StartObject(2)
def SlaveOnlineInfoAddRequest(builder, request): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(request), 0)
def SlaveOnlineInfoAddResponse(builder, response): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(response), 0)
def SlaveOnlineInfoEnd(builder): return builder.EndObject()

import comm.ethercat.master.fbs.AddressedRequest
import comm.ethercat.master.fbs.SlaveOnlineInfoResponse
try:
    from typing import Optional
except:
    pass

class SlaveOnlineInfoT(object):

    # SlaveOnlineInfoT
    def __init__(self):
        self.request = None  # type: Optional[comm.ethercat.master.fbs.AddressedRequest.AddressedRequestT]
        self.response = None  # type: Optional[comm.ethercat.master.fbs.SlaveOnlineInfoResponse.SlaveOnlineInfoResponseT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        slaveOnlineInfo = SlaveOnlineInfo()
        slaveOnlineInfo.Init(buf, pos)
        return cls.InitFromObj(slaveOnlineInfo)

    @classmethod
    def InitFromObj(cls, slaveOnlineInfo):
        x = SlaveOnlineInfoT()
        x._UnPack(slaveOnlineInfo)
        return x

    # SlaveOnlineInfoT
    def _UnPack(self, slaveOnlineInfo):
        if slaveOnlineInfo is None:
            return
        if slaveOnlineInfo.Request() is not None:
            self.request = comm.ethercat.master.fbs.AddressedRequest.AddressedRequestT.InitFromObj(slaveOnlineInfo.Request())
        if slaveOnlineInfo.Response() is not None:
            self.response = comm.ethercat.master.fbs.SlaveOnlineInfoResponse.SlaveOnlineInfoResponseT.InitFromObj(slaveOnlineInfo.Response())

    # SlaveOnlineInfoT
    def Pack(self, builder):
        if self.request is not None:
            request = self.request.Pack(builder)
        if self.response is not None:
            response = self.response.Pack(builder)
        SlaveOnlineInfoStart(builder)
        if self.request is not None:
            SlaveOnlineInfoAddRequest(builder, request)
        if self.response is not None:
            SlaveOnlineInfoAddResponse(builder, response)
        slaveOnlineInfo = SlaveOnlineInfoEnd(builder)
        return slaveOnlineInfo
