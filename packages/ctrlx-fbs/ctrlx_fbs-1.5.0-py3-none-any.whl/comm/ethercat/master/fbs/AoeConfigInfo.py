# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class AoeConfigInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsAoeConfigInfo(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AoeConfigInfo()
        x.Init(buf, n + offset)
        return x

    # AoeConfigInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AoeConfigInfo
    def Request(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.ethercat.master.fbs.AddressedRequest import AddressedRequest
            obj = AddressedRequest()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AoeConfigInfo
    def Response(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.ethercat.master.fbs.AoeConfigInfoResponse import AoeConfigInfoResponse
            obj = AoeConfigInfoResponse()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def AoeConfigInfoStart(builder): builder.StartObject(2)
def AoeConfigInfoAddRequest(builder, request): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(request), 0)
def AoeConfigInfoAddResponse(builder, response): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(response), 0)
def AoeConfigInfoEnd(builder): return builder.EndObject()

import comm.ethercat.master.fbs.AddressedRequest
import comm.ethercat.master.fbs.AoeConfigInfoResponse
try:
    from typing import Optional
except:
    pass

class AoeConfigInfoT(object):

    # AoeConfigInfoT
    def __init__(self):
        self.request = None  # type: Optional[comm.ethercat.master.fbs.AddressedRequest.AddressedRequestT]
        self.response = None  # type: Optional[comm.ethercat.master.fbs.AoeConfigInfoResponse.AoeConfigInfoResponseT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        aoeConfigInfo = AoeConfigInfo()
        aoeConfigInfo.Init(buf, pos)
        return cls.InitFromObj(aoeConfigInfo)

    @classmethod
    def InitFromObj(cls, aoeConfigInfo):
        x = AoeConfigInfoT()
        x._UnPack(aoeConfigInfo)
        return x

    # AoeConfigInfoT
    def _UnPack(self, aoeConfigInfo):
        if aoeConfigInfo is None:
            return
        if aoeConfigInfo.Request() is not None:
            self.request = comm.ethercat.master.fbs.AddressedRequest.AddressedRequestT.InitFromObj(aoeConfigInfo.Request())
        if aoeConfigInfo.Response() is not None:
            self.response = comm.ethercat.master.fbs.AoeConfigInfoResponse.AoeConfigInfoResponseT.InitFromObj(aoeConfigInfo.Response())

    # AoeConfigInfoT
    def Pack(self, builder):
        if self.request is not None:
            request = self.request.Pack(builder)
        if self.response is not None:
            response = self.response.Pack(builder)
        AoeConfigInfoStart(builder)
        if self.request is not None:
            AoeConfigInfoAddRequest(builder, request)
        if self.response is not None:
            AoeConfigInfoAddResponse(builder, response)
        aoeConfigInfo = AoeConfigInfoEnd(builder)
        return aoeConfigInfo
