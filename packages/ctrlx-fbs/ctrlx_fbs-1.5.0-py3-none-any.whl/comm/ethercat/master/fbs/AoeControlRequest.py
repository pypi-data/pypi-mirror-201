# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class AoeControlRequest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsAoeControlRequest(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AoeControlRequest()
        x.Init(buf, n + offset)
        return x

    # AoeControlRequest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AoeControlRequest
    def AddressType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # AoeControlRequest
    def Address(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # AoeControlRequest
    def TargetNetId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # AoeControlRequest
    def TargetNetIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # AoeControlRequest
    def TargetNetIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AoeControlRequest
    def TargetNetIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # AoeControlRequest
    def TargetPort(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # AoeControlRequest
    def AoeState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # AoeControlRequest
    def DeviceState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # AoeControlRequest
    def Data(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # AoeControlRequest
    def DataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # AoeControlRequest
    def DataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AoeControlRequest
    def DataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

def AoeControlRequestStart(builder): builder.StartObject(7)
def AoeControlRequestAddAddressType(builder, addressType): builder.PrependUint8Slot(0, addressType, 0)
def AoeControlRequestAddAddress(builder, address): builder.PrependUint16Slot(1, address, 0)
def AoeControlRequestAddTargetNetId(builder, targetNetId): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(targetNetId), 0)
def AoeControlRequestStartTargetNetIdVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def AoeControlRequestAddTargetPort(builder, targetPort): builder.PrependUint16Slot(3, targetPort, 0)
def AoeControlRequestAddAoeState(builder, aoeState): builder.PrependUint16Slot(4, aoeState, 0)
def AoeControlRequestAddDeviceState(builder, deviceState): builder.PrependUint16Slot(5, deviceState, 0)
def AoeControlRequestAddData(builder, data): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)
def AoeControlRequestStartDataVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def AoeControlRequestEnd(builder): return builder.EndObject()

try:
    from typing import List
except:
    pass

class AoeControlRequestT(object):

    # AoeControlRequestT
    def __init__(self):
        self.addressType = 0  # type: int
        self.address = 0  # type: int
        self.targetNetId = None  # type: List[int]
        self.targetPort = 0  # type: int
        self.aoeState = 0  # type: int
        self.deviceState = 0  # type: int
        self.data = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        aoeControlRequest = AoeControlRequest()
        aoeControlRequest.Init(buf, pos)
        return cls.InitFromObj(aoeControlRequest)

    @classmethod
    def InitFromObj(cls, aoeControlRequest):
        x = AoeControlRequestT()
        x._UnPack(aoeControlRequest)
        return x

    # AoeControlRequestT
    def _UnPack(self, aoeControlRequest):
        if aoeControlRequest is None:
            return
        self.addressType = aoeControlRequest.AddressType()
        self.address = aoeControlRequest.Address()
        if not aoeControlRequest.TargetNetIdIsNone():
            if np is None:
                self.targetNetId = []
                for i in range(aoeControlRequest.TargetNetIdLength()):
                    self.targetNetId.append(aoeControlRequest.TargetNetId(i))
            else:
                self.targetNetId = aoeControlRequest.TargetNetIdAsNumpy()
        self.targetPort = aoeControlRequest.TargetPort()
        self.aoeState = aoeControlRequest.AoeState()
        self.deviceState = aoeControlRequest.DeviceState()
        if not aoeControlRequest.DataIsNone():
            if np is None:
                self.data = []
                for i in range(aoeControlRequest.DataLength()):
                    self.data.append(aoeControlRequest.Data(i))
            else:
                self.data = aoeControlRequest.DataAsNumpy()

    # AoeControlRequestT
    def Pack(self, builder):
        if self.targetNetId is not None:
            if np is not None and type(self.targetNetId) is np.ndarray:
                targetNetId = builder.CreateNumpyVector(self.targetNetId)
            else:
                AoeControlRequestStartTargetNetIdVector(builder, len(self.targetNetId))
                for i in reversed(range(len(self.targetNetId))):
                    builder.PrependUint8(self.targetNetId[i])
                targetNetId = builder.EndVector(len(self.targetNetId))
        if self.data is not None:
            if np is not None and type(self.data) is np.ndarray:
                data = builder.CreateNumpyVector(self.data)
            else:
                AoeControlRequestStartDataVector(builder, len(self.data))
                for i in reversed(range(len(self.data))):
                    builder.PrependUint8(self.data[i])
                data = builder.EndVector(len(self.data))
        AoeControlRequestStart(builder)
        AoeControlRequestAddAddressType(builder, self.addressType)
        AoeControlRequestAddAddress(builder, self.address)
        if self.targetNetId is not None:
            AoeControlRequestAddTargetNetId(builder, targetNetId)
        AoeControlRequestAddTargetPort(builder, self.targetPort)
        AoeControlRequestAddAoeState(builder, self.aoeState)
        AoeControlRequestAddDeviceState(builder, self.deviceState)
        if self.data is not None:
            AoeControlRequestAddData(builder, data)
        aoeControlRequest = AoeControlRequestEnd(builder)
        return aoeControlRequest
