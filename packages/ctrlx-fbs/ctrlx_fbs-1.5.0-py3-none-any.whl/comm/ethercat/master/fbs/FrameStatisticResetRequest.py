# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FrameStatisticResetRequest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFrameStatisticResetRequest(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FrameStatisticResetRequest()
        x.Init(buf, n + offset)
        return x

    # FrameStatisticResetRequest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FrameStatisticResetRequest
    def NumTxFrames(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # FrameStatisticResetRequest
    def NumRxFrames(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # FrameStatisticResetRequest
    def NumCyclicFrames(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # FrameStatisticResetRequest
    def NumCyclicDatagrams(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # FrameStatisticResetRequest
    def NumAcyclicFrames(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # FrameStatisticResetRequest
    def NumAcyclicDatagrams(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # FrameStatisticResetRequest
    def NumLostFrames(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # FrameStatisticResetRequest
    def NumLostCyclicFrames(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # FrameStatisticResetRequest
    def NumLostAcyclicFrames(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def FrameStatisticResetRequestStart(builder): builder.StartObject(9)
def FrameStatisticResetRequestAddNumTxFrames(builder, numTxFrames): builder.PrependBoolSlot(0, numTxFrames, 0)
def FrameStatisticResetRequestAddNumRxFrames(builder, numRxFrames): builder.PrependBoolSlot(1, numRxFrames, 0)
def FrameStatisticResetRequestAddNumCyclicFrames(builder, numCyclicFrames): builder.PrependBoolSlot(2, numCyclicFrames, 0)
def FrameStatisticResetRequestAddNumCyclicDatagrams(builder, numCyclicDatagrams): builder.PrependBoolSlot(3, numCyclicDatagrams, 0)
def FrameStatisticResetRequestAddNumAcyclicFrames(builder, numAcyclicFrames): builder.PrependBoolSlot(4, numAcyclicFrames, 0)
def FrameStatisticResetRequestAddNumAcyclicDatagrams(builder, numAcyclicDatagrams): builder.PrependBoolSlot(5, numAcyclicDatagrams, 0)
def FrameStatisticResetRequestAddNumLostFrames(builder, numLostFrames): builder.PrependBoolSlot(6, numLostFrames, 0)
def FrameStatisticResetRequestAddNumLostCyclicFrames(builder, numLostCyclicFrames): builder.PrependBoolSlot(7, numLostCyclicFrames, 0)
def FrameStatisticResetRequestAddNumLostAcyclicFrames(builder, numLostAcyclicFrames): builder.PrependBoolSlot(8, numLostAcyclicFrames, 0)
def FrameStatisticResetRequestEnd(builder): return builder.EndObject()


class FrameStatisticResetRequestT(object):

    # FrameStatisticResetRequestT
    def __init__(self):
        self.numTxFrames = False  # type: bool
        self.numRxFrames = False  # type: bool
        self.numCyclicFrames = False  # type: bool
        self.numCyclicDatagrams = False  # type: bool
        self.numAcyclicFrames = False  # type: bool
        self.numAcyclicDatagrams = False  # type: bool
        self.numLostFrames = False  # type: bool
        self.numLostCyclicFrames = False  # type: bool
        self.numLostAcyclicFrames = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        frameStatisticResetRequest = FrameStatisticResetRequest()
        frameStatisticResetRequest.Init(buf, pos)
        return cls.InitFromObj(frameStatisticResetRequest)

    @classmethod
    def InitFromObj(cls, frameStatisticResetRequest):
        x = FrameStatisticResetRequestT()
        x._UnPack(frameStatisticResetRequest)
        return x

    # FrameStatisticResetRequestT
    def _UnPack(self, frameStatisticResetRequest):
        if frameStatisticResetRequest is None:
            return
        self.numTxFrames = frameStatisticResetRequest.NumTxFrames()
        self.numRxFrames = frameStatisticResetRequest.NumRxFrames()
        self.numCyclicFrames = frameStatisticResetRequest.NumCyclicFrames()
        self.numCyclicDatagrams = frameStatisticResetRequest.NumCyclicDatagrams()
        self.numAcyclicFrames = frameStatisticResetRequest.NumAcyclicFrames()
        self.numAcyclicDatagrams = frameStatisticResetRequest.NumAcyclicDatagrams()
        self.numLostFrames = frameStatisticResetRequest.NumLostFrames()
        self.numLostCyclicFrames = frameStatisticResetRequest.NumLostCyclicFrames()
        self.numLostAcyclicFrames = frameStatisticResetRequest.NumLostAcyclicFrames()

    # FrameStatisticResetRequestT
    def Pack(self, builder):
        FrameStatisticResetRequestStart(builder)
        FrameStatisticResetRequestAddNumTxFrames(builder, self.numTxFrames)
        FrameStatisticResetRequestAddNumRxFrames(builder, self.numRxFrames)
        FrameStatisticResetRequestAddNumCyclicFrames(builder, self.numCyclicFrames)
        FrameStatisticResetRequestAddNumCyclicDatagrams(builder, self.numCyclicDatagrams)
        FrameStatisticResetRequestAddNumAcyclicFrames(builder, self.numAcyclicFrames)
        FrameStatisticResetRequestAddNumAcyclicDatagrams(builder, self.numAcyclicDatagrams)
        FrameStatisticResetRequestAddNumLostFrames(builder, self.numLostFrames)
        FrameStatisticResetRequestAddNumLostCyclicFrames(builder, self.numLostCyclicFrames)
        FrameStatisticResetRequestAddNumLostAcyclicFrames(builder, self.numLostAcyclicFrames)
        frameStatisticResetRequest = FrameStatisticResetRequestEnd(builder)
        return frameStatisticResetRequest
