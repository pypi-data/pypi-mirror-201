# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SlaveStateResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsSlaveStateResponse(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SlaveStateResponse()
        x.Init(buf, n + offset)
        return x

    # SlaveStateResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SlaveStateResponse
    def CurrentState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # SlaveStateResponse
    def RequestedState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

def SlaveStateResponseStart(builder): builder.StartObject(2)
def SlaveStateResponseAddCurrentState(builder, currentState): builder.PrependUint16Slot(0, currentState, 0)
def SlaveStateResponseAddRequestedState(builder, requestedState): builder.PrependUint16Slot(1, requestedState, 0)
def SlaveStateResponseEnd(builder): return builder.EndObject()


class SlaveStateResponseT(object):

    # SlaveStateResponseT
    def __init__(self):
        self.currentState = 0  # type: int
        self.requestedState = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        slaveStateResponse = SlaveStateResponse()
        slaveStateResponse.Init(buf, pos)
        return cls.InitFromObj(slaveStateResponse)

    @classmethod
    def InitFromObj(cls, slaveStateResponse):
        x = SlaveStateResponseT()
        x._UnPack(slaveStateResponse)
        return x

    # SlaveStateResponseT
    def _UnPack(self, slaveStateResponse):
        if slaveStateResponse is None:
            return
        self.currentState = slaveStateResponse.CurrentState()
        self.requestedState = slaveStateResponse.RequestedState()

    # SlaveStateResponseT
    def Pack(self, builder):
        SlaveStateResponseStart(builder)
        SlaveStateResponseAddCurrentState(builder, self.currentState)
        SlaveStateResponseAddRequestedState(builder, self.requestedState)
        slaveStateResponse = SlaveStateResponseEnd(builder)
        return slaveStateResponse
