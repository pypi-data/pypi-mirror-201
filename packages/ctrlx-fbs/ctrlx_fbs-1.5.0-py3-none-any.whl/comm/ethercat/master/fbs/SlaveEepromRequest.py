# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SlaveEepromRequest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsSlaveEepromRequest(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SlaveEepromRequest()
        x.Init(buf, n + offset)
        return x

    # SlaveEepromRequest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SlaveEepromRequest
    def AddressType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # SlaveEepromRequest
    def Address(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # SlaveEepromRequest
    def EepromOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # SlaveEepromRequest
    def Data(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 2))
        return 0

    # SlaveEepromRequest
    def DataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint16Flags, o)
        return 0

    # SlaveEepromRequest
    def DataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SlaveEepromRequest
    def DataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # SlaveEepromRequest
    def MaxLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def SlaveEepromRequestStart(builder): builder.StartObject(5)
def SlaveEepromRequestAddAddressType(builder, addressType): builder.PrependUint8Slot(0, addressType, 0)
def SlaveEepromRequestAddAddress(builder, address): builder.PrependUint16Slot(1, address, 0)
def SlaveEepromRequestAddEepromOffset(builder, eepromOffset): builder.PrependUint16Slot(2, eepromOffset, 0)
def SlaveEepromRequestAddData(builder, data): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)
def SlaveEepromRequestStartDataVector(builder, numElems): return builder.StartVector(2, numElems, 2)
def SlaveEepromRequestAddMaxLength(builder, maxLength): builder.PrependUint32Slot(4, maxLength, 0)
def SlaveEepromRequestEnd(builder): return builder.EndObject()

try:
    from typing import List
except:
    pass

class SlaveEepromRequestT(object):

    # SlaveEepromRequestT
    def __init__(self):
        self.addressType = 0  # type: int
        self.address = 0  # type: int
        self.eepromOffset = 0  # type: int
        self.data = None  # type: List[int]
        self.maxLength = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        slaveEepromRequest = SlaveEepromRequest()
        slaveEepromRequest.Init(buf, pos)
        return cls.InitFromObj(slaveEepromRequest)

    @classmethod
    def InitFromObj(cls, slaveEepromRequest):
        x = SlaveEepromRequestT()
        x._UnPack(slaveEepromRequest)
        return x

    # SlaveEepromRequestT
    def _UnPack(self, slaveEepromRequest):
        if slaveEepromRequest is None:
            return
        self.addressType = slaveEepromRequest.AddressType()
        self.address = slaveEepromRequest.Address()
        self.eepromOffset = slaveEepromRequest.EepromOffset()
        if not slaveEepromRequest.DataIsNone():
            if np is None:
                self.data = []
                for i in range(slaveEepromRequest.DataLength()):
                    self.data.append(slaveEepromRequest.Data(i))
            else:
                self.data = slaveEepromRequest.DataAsNumpy()
        self.maxLength = slaveEepromRequest.MaxLength()

    # SlaveEepromRequestT
    def Pack(self, builder):
        if self.data is not None:
            if np is not None and type(self.data) is np.ndarray:
                data = builder.CreateNumpyVector(self.data)
            else:
                SlaveEepromRequestStartDataVector(builder, len(self.data))
                for i in reversed(range(len(self.data))):
                    builder.PrependUint16(self.data[i])
                data = builder.EndVector(len(self.data))
        SlaveEepromRequestStart(builder)
        SlaveEepromRequestAddAddressType(builder, self.addressType)
        SlaveEepromRequestAddAddress(builder, self.address)
        SlaveEepromRequestAddEepromOffset(builder, self.eepromOffset)
        if self.data is not None:
            SlaveEepromRequestAddData(builder, data)
        SlaveEepromRequestAddMaxLength(builder, self.maxLength)
        slaveEepromRequest = SlaveEepromRequestEnd(builder)
        return slaveEepromRequest
