# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class AoeConfigInfoResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsAoeConfigInfoResponse(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AoeConfigInfoResponse()
        x.Init(buf, n + offset)
        return x

    # AoeConfigInfoResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AoeConfigInfoResponse
    def NetId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # AoeConfigInfoResponse
    def NetIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # AoeConfigInfoResponse
    def NetIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AoeConfigInfoResponse
    def NetIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def AoeConfigInfoResponseStart(builder): builder.StartObject(1)
def AoeConfigInfoResponseAddNetId(builder, netId): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(netId), 0)
def AoeConfigInfoResponseStartNetIdVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def AoeConfigInfoResponseEnd(builder): return builder.EndObject()

try:
    from typing import List
except:
    pass

class AoeConfigInfoResponseT(object):

    # AoeConfigInfoResponseT
    def __init__(self):
        self.netId = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        aoeConfigInfoResponse = AoeConfigInfoResponse()
        aoeConfigInfoResponse.Init(buf, pos)
        return cls.InitFromObj(aoeConfigInfoResponse)

    @classmethod
    def InitFromObj(cls, aoeConfigInfoResponse):
        x = AoeConfigInfoResponseT()
        x._UnPack(aoeConfigInfoResponse)
        return x

    # AoeConfigInfoResponseT
    def _UnPack(self, aoeConfigInfoResponse):
        if aoeConfigInfoResponse is None:
            return
        if not aoeConfigInfoResponse.NetIdIsNone():
            if np is None:
                self.netId = []
                for i in range(aoeConfigInfoResponse.NetIdLength()):
                    self.netId.append(aoeConfigInfoResponse.NetId(i))
            else:
                self.netId = aoeConfigInfoResponse.NetIdAsNumpy()

    # AoeConfigInfoResponseT
    def Pack(self, builder):
        if self.netId is not None:
            if np is not None and type(self.netId) is np.ndarray:
                netId = builder.CreateNumpyVector(self.netId)
            else:
                AoeConfigInfoResponseStartNetIdVector(builder, len(self.netId))
                for i in reversed(range(len(self.netId))):
                    builder.PrependUint8(self.netId[i])
                netId = builder.EndVector(len(self.netId))
        AoeConfigInfoResponseStart(builder)
        if self.netId is not None:
            AoeConfigInfoResponseAddNetId(builder, netId)
        aoeConfigInfoResponse = AoeConfigInfoResponseEnd(builder)
        return aoeConfigInfoResponse
