# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MasterStateResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsMasterStateResponse(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MasterStateResponse()
        x.Init(buf, n + offset)
        return x

    # MasterStateResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MasterStateResponse
    def CurrentState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # MasterStateResponse
    def RequestedState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

def MasterStateResponseStart(builder): builder.StartObject(2)
def MasterStateResponseAddCurrentState(builder, currentState): builder.PrependUint16Slot(0, currentState, 0)
def MasterStateResponseAddRequestedState(builder, requestedState): builder.PrependUint16Slot(1, requestedState, 0)
def MasterStateResponseEnd(builder): return builder.EndObject()


class MasterStateResponseT(object):

    # MasterStateResponseT
    def __init__(self):
        self.currentState = 0  # type: int
        self.requestedState = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        masterStateResponse = MasterStateResponse()
        masterStateResponse.Init(buf, pos)
        return cls.InitFromObj(masterStateResponse)

    @classmethod
    def InitFromObj(cls, masterStateResponse):
        x = MasterStateResponseT()
        x._UnPack(masterStateResponse)
        return x

    # MasterStateResponseT
    def _UnPack(self, masterStateResponse):
        if masterStateResponse is None:
            return
        self.currentState = masterStateResponse.CurrentState()
        self.requestedState = masterStateResponse.RequestedState()

    # MasterStateResponseT
    def Pack(self, builder):
        MasterStateResponseStart(builder)
        MasterStateResponseAddCurrentState(builder, self.currentState)
        MasterStateResponseAddRequestedState(builder, self.requestedState)
        masterStateResponse = MasterStateResponseEnd(builder)
        return masterStateResponse
