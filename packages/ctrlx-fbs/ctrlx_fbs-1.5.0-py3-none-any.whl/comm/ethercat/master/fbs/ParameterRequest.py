# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ParameterRequest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsParameterRequest(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ParameterRequest()
        x.Init(buf, n + offset)
        return x

    # ParameterRequest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ParameterRequest
    def AddressType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # ParameterRequest
    def Address(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # ParameterRequest
    def DriveNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # ParameterRequest
    def ElementFlags(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # ParameterRequest
    def Idn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # ParameterRequest
    def Data(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # ParameterRequest
    def DataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # ParameterRequest
    def DataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ParameterRequest
    def DataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # ParameterRequest
    def MaxLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def ParameterRequestStart(builder): builder.StartObject(7)
def ParameterRequestAddAddressType(builder, addressType): builder.PrependUint8Slot(0, addressType, 0)
def ParameterRequestAddAddress(builder, address): builder.PrependUint16Slot(1, address, 0)
def ParameterRequestAddDriveNumber(builder, driveNumber): builder.PrependUint8Slot(2, driveNumber, 0)
def ParameterRequestAddElementFlags(builder, elementFlags): builder.PrependUint8Slot(3, elementFlags, 0)
def ParameterRequestAddIdn(builder, idn): builder.PrependUint16Slot(4, idn, 0)
def ParameterRequestAddData(builder, data): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)
def ParameterRequestStartDataVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def ParameterRequestAddMaxLength(builder, maxLength): builder.PrependUint32Slot(6, maxLength, 0)
def ParameterRequestEnd(builder): return builder.EndObject()

try:
    from typing import List
except:
    pass

class ParameterRequestT(object):

    # ParameterRequestT
    def __init__(self):
        self.addressType = 0  # type: int
        self.address = 0  # type: int
        self.driveNumber = 0  # type: int
        self.elementFlags = 0  # type: int
        self.idn = 0  # type: int
        self.data = None  # type: List[int]
        self.maxLength = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        parameterRequest = ParameterRequest()
        parameterRequest.Init(buf, pos)
        return cls.InitFromObj(parameterRequest)

    @classmethod
    def InitFromObj(cls, parameterRequest):
        x = ParameterRequestT()
        x._UnPack(parameterRequest)
        return x

    # ParameterRequestT
    def _UnPack(self, parameterRequest):
        if parameterRequest is None:
            return
        self.addressType = parameterRequest.AddressType()
        self.address = parameterRequest.Address()
        self.driveNumber = parameterRequest.DriveNumber()
        self.elementFlags = parameterRequest.ElementFlags()
        self.idn = parameterRequest.Idn()
        if not parameterRequest.DataIsNone():
            if np is None:
                self.data = []
                for i in range(parameterRequest.DataLength()):
                    self.data.append(parameterRequest.Data(i))
            else:
                self.data = parameterRequest.DataAsNumpy()
        self.maxLength = parameterRequest.MaxLength()

    # ParameterRequestT
    def Pack(self, builder):
        if self.data is not None:
            if np is not None and type(self.data) is np.ndarray:
                data = builder.CreateNumpyVector(self.data)
            else:
                ParameterRequestStartDataVector(builder, len(self.data))
                for i in reversed(range(len(self.data))):
                    builder.PrependUint8(self.data[i])
                data = builder.EndVector(len(self.data))
        ParameterRequestStart(builder)
        ParameterRequestAddAddressType(builder, self.addressType)
        ParameterRequestAddAddress(builder, self.address)
        ParameterRequestAddDriveNumber(builder, self.driveNumber)
        ParameterRequestAddElementFlags(builder, self.elementFlags)
        ParameterRequestAddIdn(builder, self.idn)
        if self.data is not None:
            ParameterRequestAddData(builder, data)
        ParameterRequestAddMaxLength(builder, self.maxLength)
        parameterRequest = ParameterRequestEnd(builder)
        return parameterRequest
