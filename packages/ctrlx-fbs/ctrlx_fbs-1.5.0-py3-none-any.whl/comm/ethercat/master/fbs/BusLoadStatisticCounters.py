# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class BusLoadStatisticCounters(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsBusLoadStatisticCounters(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BusLoadStatisticCounters()
        x.Init(buf, n + offset)
        return x

    # BusLoadStatisticCounters
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BusLoadStatisticCounters
    def Response(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.ethercat.master.fbs.BusLoadStatisticCountersResponse import BusLoadStatisticCountersResponse
            obj = BusLoadStatisticCountersResponse()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def BusLoadStatisticCountersStart(builder): builder.StartObject(1)
def BusLoadStatisticCountersAddResponse(builder, response): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(response), 0)
def BusLoadStatisticCountersEnd(builder): return builder.EndObject()

import comm.ethercat.master.fbs.BusLoadStatisticCountersResponse
try:
    from typing import Optional
except:
    pass

class BusLoadStatisticCountersT(object):

    # BusLoadStatisticCountersT
    def __init__(self):
        self.response = None  # type: Optional[comm.ethercat.master.fbs.BusLoadStatisticCountersResponse.BusLoadStatisticCountersResponseT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        busLoadStatisticCounters = BusLoadStatisticCounters()
        busLoadStatisticCounters.Init(buf, pos)
        return cls.InitFromObj(busLoadStatisticCounters)

    @classmethod
    def InitFromObj(cls, busLoadStatisticCounters):
        x = BusLoadStatisticCountersT()
        x._UnPack(busLoadStatisticCounters)
        return x

    # BusLoadStatisticCountersT
    def _UnPack(self, busLoadStatisticCounters):
        if busLoadStatisticCounters is None:
            return
        if busLoadStatisticCounters.Response() is not None:
            self.response = comm.ethercat.master.fbs.BusLoadStatisticCountersResponse.BusLoadStatisticCountersResponseT.InitFromObj(busLoadStatisticCounters.Response())

    # BusLoadStatisticCountersT
    def Pack(self, builder):
        if self.response is not None:
            response = self.response.Pack(builder)
        BusLoadStatisticCountersStart(builder)
        if self.response is not None:
            BusLoadStatisticCountersAddResponse(builder, response)
        busLoadStatisticCounters = BusLoadStatisticCountersEnd(builder)
        return busLoadStatisticCounters
