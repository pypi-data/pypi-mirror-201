# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SDO(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsSDO(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SDO()
        x.Init(buf, n + offset)
        return x

    # SDO
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SDO
    def Request(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.ethercat.master.fbs.SDORequest import SDORequest
            obj = SDORequest()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SDO
    def Response(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.ethercat.master.fbs.SDOResponse import SDOResponse
            obj = SDOResponse()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def SDOStart(builder): builder.StartObject(2)
def SDOAddRequest(builder, request): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(request), 0)
def SDOAddResponse(builder, response): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(response), 0)
def SDOEnd(builder): return builder.EndObject()

import comm.ethercat.master.fbs.SDORequest
import comm.ethercat.master.fbs.SDOResponse
try:
    from typing import Optional
except:
    pass

class SDOT(object):

    # SDOT
    def __init__(self):
        self.request = None  # type: Optional[comm.ethercat.master.fbs.SDORequest.SDORequestT]
        self.response = None  # type: Optional[comm.ethercat.master.fbs.SDOResponse.SDOResponseT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        sDO = SDO()
        sDO.Init(buf, pos)
        return cls.InitFromObj(sDO)

    @classmethod
    def InitFromObj(cls, sDO):
        x = SDOT()
        x._UnPack(sDO)
        return x

    # SDOT
    def _UnPack(self, sDO):
        if sDO is None:
            return
        if sDO.Request() is not None:
            self.request = comm.ethercat.master.fbs.SDORequest.SDORequestT.InitFromObj(sDO.Request())
        if sDO.Response() is not None:
            self.response = comm.ethercat.master.fbs.SDOResponse.SDOResponseT.InitFromObj(sDO.Response())

    # SDOT
    def Pack(self, builder):
        if self.request is not None:
            request = self.request.Pack(builder)
        if self.response is not None:
            response = self.response.Pack(builder)
        SDOStart(builder)
        if self.request is not None:
            SDOAddRequest(builder, request)
        if self.response is not None:
            SDOAddResponse(builder, response)
        sDO = SDOEnd(builder)
        return sDO
