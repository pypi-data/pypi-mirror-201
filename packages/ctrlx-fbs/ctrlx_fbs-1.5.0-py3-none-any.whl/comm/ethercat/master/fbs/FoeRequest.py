# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FoeRequest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFoeRequest(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FoeRequest()
        x.Init(buf, n + offset)
        return x

    # FoeRequest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FoeRequest
    def AddressType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # FoeRequest
    def Address(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # FoeRequest
    def Data(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # FoeRequest
    def DataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # FoeRequest
    def DataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FoeRequest
    def DataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # FoeRequest
    def MaxLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FoeRequest
    def Filename(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FoeRequest
    def Password(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FoeRequest
    def Timeout(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def FoeRequestStart(builder): builder.StartObject(7)
def FoeRequestAddAddressType(builder, addressType): builder.PrependUint8Slot(0, addressType, 0)
def FoeRequestAddAddress(builder, address): builder.PrependUint16Slot(1, address, 0)
def FoeRequestAddData(builder, data): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)
def FoeRequestStartDataVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def FoeRequestAddMaxLength(builder, maxLength): builder.PrependUint32Slot(3, maxLength, 0)
def FoeRequestAddFilename(builder, filename): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(filename), 0)
def FoeRequestAddPassword(builder, password): builder.PrependUint32Slot(5, password, 0)
def FoeRequestAddTimeout(builder, timeout): builder.PrependUint32Slot(6, timeout, 0)
def FoeRequestEnd(builder): return builder.EndObject()

try:
    from typing import List
except:
    pass

class FoeRequestT(object):

    # FoeRequestT
    def __init__(self):
        self.addressType = 0  # type: int
        self.address = 0  # type: int
        self.data = None  # type: List[int]
        self.maxLength = 0  # type: int
        self.filename = None  # type: str
        self.password = 0  # type: int
        self.timeout = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        foeRequest = FoeRequest()
        foeRequest.Init(buf, pos)
        return cls.InitFromObj(foeRequest)

    @classmethod
    def InitFromObj(cls, foeRequest):
        x = FoeRequestT()
        x._UnPack(foeRequest)
        return x

    # FoeRequestT
    def _UnPack(self, foeRequest):
        if foeRequest is None:
            return
        self.addressType = foeRequest.AddressType()
        self.address = foeRequest.Address()
        if not foeRequest.DataIsNone():
            if np is None:
                self.data = []
                for i in range(foeRequest.DataLength()):
                    self.data.append(foeRequest.Data(i))
            else:
                self.data = foeRequest.DataAsNumpy()
        self.maxLength = foeRequest.MaxLength()
        self.filename = foeRequest.Filename()
        self.password = foeRequest.Password()
        self.timeout = foeRequest.Timeout()

    # FoeRequestT
    def Pack(self, builder):
        if self.data is not None:
            if np is not None and type(self.data) is np.ndarray:
                data = builder.CreateNumpyVector(self.data)
            else:
                FoeRequestStartDataVector(builder, len(self.data))
                for i in reversed(range(len(self.data))):
                    builder.PrependUint8(self.data[i])
                data = builder.EndVector(len(self.data))
        if self.filename is not None:
            filename = builder.CreateString(self.filename)
        FoeRequestStart(builder)
        FoeRequestAddAddressType(builder, self.addressType)
        FoeRequestAddAddress(builder, self.address)
        if self.data is not None:
            FoeRequestAddData(builder, data)
        FoeRequestAddMaxLength(builder, self.maxLength)
        if self.filename is not None:
            FoeRequestAddFilename(builder, filename)
        FoeRequestAddPassword(builder, self.password)
        FoeRequestAddTimeout(builder, self.timeout)
        foeRequest = FoeRequestEnd(builder)
        return foeRequest
