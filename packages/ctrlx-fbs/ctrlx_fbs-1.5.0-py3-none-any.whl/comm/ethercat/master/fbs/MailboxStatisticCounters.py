# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MailboxStatisticCounters(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsMailboxStatisticCounters(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MailboxStatisticCounters()
        x.Init(buf, n + offset)
        return x

    # MailboxStatisticCounters
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MailboxStatisticCounters
    def Response(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.ethercat.master.fbs.MailboxStatisticCountersResponse import MailboxStatisticCountersResponse
            obj = MailboxStatisticCountersResponse()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def MailboxStatisticCountersStart(builder): builder.StartObject(1)
def MailboxStatisticCountersAddResponse(builder, response): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(response), 0)
def MailboxStatisticCountersEnd(builder): return builder.EndObject()

import comm.ethercat.master.fbs.MailboxStatisticCountersResponse
try:
    from typing import Optional
except:
    pass

class MailboxStatisticCountersT(object):

    # MailboxStatisticCountersT
    def __init__(self):
        self.response = None  # type: Optional[comm.ethercat.master.fbs.MailboxStatisticCountersResponse.MailboxStatisticCountersResponseT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        mailboxStatisticCounters = MailboxStatisticCounters()
        mailboxStatisticCounters.Init(buf, pos)
        return cls.InitFromObj(mailboxStatisticCounters)

    @classmethod
    def InitFromObj(cls, mailboxStatisticCounters):
        x = MailboxStatisticCountersT()
        x._UnPack(mailboxStatisticCounters)
        return x

    # MailboxStatisticCountersT
    def _UnPack(self, mailboxStatisticCounters):
        if mailboxStatisticCounters is None:
            return
        if mailboxStatisticCounters.Response() is not None:
            self.response = comm.ethercat.master.fbs.MailboxStatisticCountersResponse.MailboxStatisticCountersResponseT.InitFromObj(mailboxStatisticCounters.Response())

    # MailboxStatisticCountersT
    def Pack(self, builder):
        if self.response is not None:
            response = self.response.Pack(builder)
        MailboxStatisticCountersStart(builder)
        if self.response is not None:
            MailboxStatisticCountersAddResponse(builder, response)
        mailboxStatisticCounters = MailboxStatisticCountersEnd(builder)
        return mailboxStatisticCounters
