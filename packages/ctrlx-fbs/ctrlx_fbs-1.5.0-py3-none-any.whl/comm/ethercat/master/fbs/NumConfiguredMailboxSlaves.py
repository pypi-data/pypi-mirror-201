# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class NumConfiguredMailboxSlaves(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsNumConfiguredMailboxSlaves(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NumConfiguredMailboxSlaves()
        x.Init(buf, n + offset)
        return x

    # NumConfiguredMailboxSlaves
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # NumConfiguredMailboxSlaves
    def Response(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.ethercat.master.fbs.NumConfiguredMailboxSlavesResponse import NumConfiguredMailboxSlavesResponse
            obj = NumConfiguredMailboxSlavesResponse()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def NumConfiguredMailboxSlavesStart(builder): builder.StartObject(1)
def NumConfiguredMailboxSlavesAddResponse(builder, response): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(response), 0)
def NumConfiguredMailboxSlavesEnd(builder): return builder.EndObject()

import comm.ethercat.master.fbs.NumConfiguredMailboxSlavesResponse
try:
    from typing import Optional
except:
    pass

class NumConfiguredMailboxSlavesT(object):

    # NumConfiguredMailboxSlavesT
    def __init__(self):
        self.response = None  # type: Optional[comm.ethercat.master.fbs.NumConfiguredMailboxSlavesResponse.NumConfiguredMailboxSlavesResponseT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        numConfiguredMailboxSlaves = NumConfiguredMailboxSlaves()
        numConfiguredMailboxSlaves.Init(buf, pos)
        return cls.InitFromObj(numConfiguredMailboxSlaves)

    @classmethod
    def InitFromObj(cls, numConfiguredMailboxSlaves):
        x = NumConfiguredMailboxSlavesT()
        x._UnPack(numConfiguredMailboxSlaves)
        return x

    # NumConfiguredMailboxSlavesT
    def _UnPack(self, numConfiguredMailboxSlaves):
        if numConfiguredMailboxSlaves is None:
            return
        if numConfiguredMailboxSlaves.Response() is not None:
            self.response = comm.ethercat.master.fbs.NumConfiguredMailboxSlavesResponse.NumConfiguredMailboxSlavesResponseT.InitFromObj(numConfiguredMailboxSlaves.Response())

    # NumConfiguredMailboxSlavesT
    def Pack(self, builder):
        if self.response is not None:
            response = self.response.Pack(builder)
        NumConfiguredMailboxSlavesStart(builder)
        if self.response is not None:
            NumConfiguredMailboxSlavesAddResponse(builder, response)
        numConfiguredMailboxSlaves = NumConfiguredMailboxSlavesEnd(builder)
        return numConfiguredMailboxSlaves
