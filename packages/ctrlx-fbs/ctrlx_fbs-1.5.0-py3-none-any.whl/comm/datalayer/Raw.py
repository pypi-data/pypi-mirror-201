# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Raw(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsRaw(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Raw()
        x.Init(buf, n + offset)
        return x

    # Raw
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Raw
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Raw
    def ValueAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int8Flags, o)
        return 0

    # Raw
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Raw
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def RawStart(builder): builder.StartObject(1)
def RawAddValue(builder, value): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)
def RawStartValueVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def RawEnd(builder): return builder.EndObject()

try:
    from typing import List
except:
    pass

class RawT(object):

    # RawT
    def __init__(self):
        self.value = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        raw = Raw()
        raw.Init(buf, pos)
        return cls.InitFromObj(raw)

    @classmethod
    def InitFromObj(cls, raw):
        x = RawT()
        x._UnPack(raw)
        return x

    # RawT
    def _UnPack(self, raw):
        if raw is None:
            return
        if not raw.ValueIsNone():
            if np is None:
                self.value = []
                for i in range(raw.ValueLength()):
                    self.value.append(raw.Value(i))
            else:
                self.value = raw.ValueAsNumpy()

    # RawT
    def Pack(self, builder):
        if self.value is not None:
            if np is not None and type(self.value) is np.ndarray:
                value = builder.CreateNumpyVector(self.value)
            else:
                RawStartValueVector(builder, len(self.value))
                for i in reversed(range(len(self.value))):
                    builder.PrependByte(self.value[i])
                value = builder.EndVector(len(self.value))
        RawStart(builder)
        if self.value is not None:
            RawAddValue(builder, value)
        raw = RawEnd(builder)
        return raw
