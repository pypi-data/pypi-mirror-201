# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Scopes(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsScopes(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Scopes()
        x.Init(buf, n + offset)
        return x

    # Scopes
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # List of scopes
    # Scopes
    def Scopes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.datalayer.Scope import Scope
            obj = Scope()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Scopes
    def ScopesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Scopes
    def ScopesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def ScopesStart(builder): builder.StartObject(1)
def ScopesAddScopes(builder, scopes): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(scopes), 0)
def ScopesStartScopesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ScopesEnd(builder): return builder.EndObject()

import comm.datalayer.Scope
try:
    from typing import List
except:
    pass

class ScopesT(object):

    # ScopesT
    def __init__(self):
        self.scopes = None  # type: List[comm.datalayer.Scope.ScopeT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        scopes = Scopes()
        scopes.Init(buf, pos)
        return cls.InitFromObj(scopes)

    @classmethod
    def InitFromObj(cls, scopes):
        x = ScopesT()
        x._UnPack(scopes)
        return x

    # ScopesT
    def _UnPack(self, scopes):
        if scopes is None:
            return
        if not scopes.ScopesIsNone():
            self.scopes = []
            for i in range(scopes.ScopesLength()):
                if scopes.Scopes(i) is None:
                    self.scopes.append(None)
                else:
                    scope_ = comm.datalayer.Scope.ScopeT.InitFromObj(scopes.Scopes(i))
                    self.scopes.append(scope_)

    # ScopesT
    def Pack(self, builder):
        if self.scopes is not None:
            scopeslist = []
            for i in range(len(self.scopes)):
                scopeslist.append(self.scopes[i].Pack(builder))
            ScopesStartScopesVector(builder, len(self.scopes))
            for i in reversed(range(len(self.scopes))):
                builder.PrependUOffsetTRelative(scopeslist[i])
            scopes = builder.EndVector(len(self.scopes))
        ScopesStart(builder)
        if self.scopes is not None:
            ScopesAddScopes(builder, scopes)
        scopes = ScopesEnd(builder)
        return scopes
