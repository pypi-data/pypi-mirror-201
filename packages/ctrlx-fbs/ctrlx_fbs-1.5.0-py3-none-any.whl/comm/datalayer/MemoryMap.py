# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MemoryMap(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsMemoryMap(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MemoryMap()
        x.Init(buf, n + offset)
        return x

    # MemoryMap
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # array of variables
    # MemoryMap
    def Variables(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.datalayer.Variable import Variable
            obj = Variable()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MemoryMap
    def VariablesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MemoryMap
    def VariablesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # revision number- changes every time on variables changes
    # MemoryMap
    def Revision(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Disable input buffer so save one copy from image to data
    # MemoryMap
    def DisableInputImage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def MemoryMapStart(builder): builder.StartObject(3)
def MemoryMapAddVariables(builder, variables): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(variables), 0)
def MemoryMapStartVariablesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MemoryMapAddRevision(builder, revision): builder.PrependUint32Slot(1, revision, 0)
def MemoryMapAddDisableInputImage(builder, disableInputImage): builder.PrependBoolSlot(2, disableInputImage, 0)
def MemoryMapEnd(builder): return builder.EndObject()

import comm.datalayer.Variable
try:
    from typing import List
except:
    pass

class MemoryMapT(object):

    # MemoryMapT
    def __init__(self):
        self.variables = None  # type: List[comm.datalayer.Variable.VariableT]
        self.revision = 0  # type: int
        self.disableInputImage = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        memoryMap = MemoryMap()
        memoryMap.Init(buf, pos)
        return cls.InitFromObj(memoryMap)

    @classmethod
    def InitFromObj(cls, memoryMap):
        x = MemoryMapT()
        x._UnPack(memoryMap)
        return x

    # MemoryMapT
    def _UnPack(self, memoryMap):
        if memoryMap is None:
            return
        if not memoryMap.VariablesIsNone():
            self.variables = []
            for i in range(memoryMap.VariablesLength()):
                if memoryMap.Variables(i) is None:
                    self.variables.append(None)
                else:
                    variable_ = comm.datalayer.Variable.VariableT.InitFromObj(memoryMap.Variables(i))
                    self.variables.append(variable_)
        self.revision = memoryMap.Revision()
        self.disableInputImage = memoryMap.DisableInputImage()

    # MemoryMapT
    def Pack(self, builder):
        if self.variables is not None:
            variableslist = []
            for i in range(len(self.variables)):
                variableslist.append(self.variables[i].Pack(builder))
            MemoryMapStartVariablesVector(builder, len(self.variables))
            for i in reversed(range(len(self.variables))):
                builder.PrependUOffsetTRelative(variableslist[i])
            variables = builder.EndVector(len(self.variables))
        MemoryMapStart(builder)
        if self.variables is not None:
            MemoryMapAddVariables(builder, variables)
        MemoryMapAddRevision(builder, self.revision)
        MemoryMapAddDisableInputImage(builder, self.disableInputImage)
        memoryMap = MemoryMapEnd(builder)
        return memoryMap
