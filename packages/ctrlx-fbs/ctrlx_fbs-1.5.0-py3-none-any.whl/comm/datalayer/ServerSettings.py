# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ServerSettings(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsServerSettings(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ServerSettings()
        x.Init(buf, n + offset)
        return x

    # ServerSettings
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # after this time send a ping to not used provider is send to test if provider is still alive
    # ServerSettings
    def ServerIdlePingTimeout(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 30000

    # after this time a response from provider is expected - if there is no answer a provider is assumed to be dead --> kick provider out of routing
    # ServerSettings
    def ServerWaitResponseTimeout(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 3000

    # maximum inbound message size
    # ServerSettings
    def ServerMaxMessageSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 52428800

    # Address to debug disconnect
    # ServerSettings
    def DebugAddress(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Maximum size of a RT area
    # ServerSettings
    def ServerMaxRtSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 1048576

    # Emulated NVRam size - will be active after a restart of app.automationcore
    # ServerSettings
    def ServerEmulatedNvramSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 122880

def ServerSettingsStart(builder): builder.StartObject(6)
def ServerSettingsAddServerIdlePingTimeout(builder, serverIdlePingTimeout): builder.PrependUint32Slot(0, serverIdlePingTimeout, 30000)
def ServerSettingsAddServerWaitResponseTimeout(builder, serverWaitResponseTimeout): builder.PrependUint32Slot(1, serverWaitResponseTimeout, 3000)
def ServerSettingsAddServerMaxMessageSize(builder, serverMaxMessageSize): builder.PrependUint32Slot(2, serverMaxMessageSize, 52428800)
def ServerSettingsAddDebugAddress(builder, debugAddress): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(debugAddress), 0)
def ServerSettingsAddServerMaxRtSize(builder, serverMaxRtSize): builder.PrependUint32Slot(4, serverMaxRtSize, 1048576)
def ServerSettingsAddServerEmulatedNvramSize(builder, serverEmulatedNvramSize): builder.PrependUint32Slot(5, serverEmulatedNvramSize, 122880)
def ServerSettingsEnd(builder): return builder.EndObject()


class ServerSettingsT(object):

    # ServerSettingsT
    def __init__(self):
        self.serverIdlePingTimeout = 30000  # type: int
        self.serverWaitResponseTimeout = 3000  # type: int
        self.serverMaxMessageSize = 52428800  # type: int
        self.debugAddress = None  # type: str
        self.serverMaxRtSize = 1048576  # type: int
        self.serverEmulatedNvramSize = 122880  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        serverSettings = ServerSettings()
        serverSettings.Init(buf, pos)
        return cls.InitFromObj(serverSettings)

    @classmethod
    def InitFromObj(cls, serverSettings):
        x = ServerSettingsT()
        x._UnPack(serverSettings)
        return x

    # ServerSettingsT
    def _UnPack(self, serverSettings):
        if serverSettings is None:
            return
        self.serverIdlePingTimeout = serverSettings.ServerIdlePingTimeout()
        self.serverWaitResponseTimeout = serverSettings.ServerWaitResponseTimeout()
        self.serverMaxMessageSize = serverSettings.ServerMaxMessageSize()
        self.debugAddress = serverSettings.DebugAddress()
        self.serverMaxRtSize = serverSettings.ServerMaxRtSize()
        self.serverEmulatedNvramSize = serverSettings.ServerEmulatedNvramSize()

    # ServerSettingsT
    def Pack(self, builder):
        if self.debugAddress is not None:
            debugAddress = builder.CreateString(self.debugAddress)
        ServerSettingsStart(builder)
        ServerSettingsAddServerIdlePingTimeout(builder, self.serverIdlePingTimeout)
        ServerSettingsAddServerWaitResponseTimeout(builder, self.serverWaitResponseTimeout)
        ServerSettingsAddServerMaxMessageSize(builder, self.serverMaxMessageSize)
        if self.debugAddress is not None:
            ServerSettingsAddDebugAddress(builder, debugAddress)
        ServerSettingsAddServerMaxRtSize(builder, self.serverMaxRtSize)
        ServerSettingsAddServerEmulatedNvramSize(builder, self.serverEmulatedNvramSize)
        serverSettings = ServerSettingsEnd(builder)
        return serverSettings
