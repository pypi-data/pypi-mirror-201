# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Extension(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsExtension(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Extension()
        x.Init(buf, n + offset)
        return x

    # Extension
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Extension
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Extension
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def ExtensionStart(builder): builder.StartObject(2)
def ExtensionAddKey(builder, key): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)
def ExtensionAddValue(builder, value): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)
def ExtensionEnd(builder): return builder.EndObject()


class ExtensionT(object):

    # ExtensionT
    def __init__(self):
        self.key = None  # type: str
        self.value = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        extension = Extension()
        extension.Init(buf, pos)
        return cls.InitFromObj(extension)

    @classmethod
    def InitFromObj(cls, extension):
        x = ExtensionT()
        x._UnPack(extension)
        return x

    # ExtensionT
    def _UnPack(self, extension):
        if extension is None:
            return
        self.key = extension.Key()
        self.value = extension.Value()

    # ExtensionT
    def Pack(self, builder):
        if self.key is not None:
            key = builder.CreateString(self.key)
        if self.value is not None:
            value = builder.CreateString(self.value)
        ExtensionStart(builder)
        if self.key is not None:
            ExtensionAddKey(builder, key)
        if self.value is not None:
            ExtensionAddValue(builder, value)
        extension = ExtensionEnd(builder)
        return extension
