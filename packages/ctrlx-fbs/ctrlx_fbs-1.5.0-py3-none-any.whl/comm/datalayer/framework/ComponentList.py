# automatically generated by the FlatBuffers compiler, do not modify

# namespace: framework

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ComponentList(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsComponentList(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ComponentList()
        x.Init(buf, n + offset)
        return x

    # ComponentList
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ComponentList
    def Components(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.datalayer.framework.Component import Component
            obj = Component()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ComponentList
    def ComponentsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ComponentList
    def ComponentsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def ComponentListStart(builder): builder.StartObject(1)
def ComponentListAddComponents(builder, components): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(components), 0)
def ComponentListStartComponentsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ComponentListEnd(builder): return builder.EndObject()

import comm.datalayer.framework.Component
try:
    from typing import List
except:
    pass

class ComponentListT(object):

    # ComponentListT
    def __init__(self):
        self.components = None  # type: List[comm.datalayer.framework.Component.ComponentT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        componentList = ComponentList()
        componentList.Init(buf, pos)
        return cls.InitFromObj(componentList)

    @classmethod
    def InitFromObj(cls, componentList):
        x = ComponentListT()
        x._UnPack(componentList)
        return x

    # ComponentListT
    def _UnPack(self, componentList):
        if componentList is None:
            return
        if not componentList.ComponentsIsNone():
            self.components = []
            for i in range(componentList.ComponentsLength()):
                if componentList.Components(i) is None:
                    self.components.append(None)
                else:
                    component_ = comm.datalayer.framework.Component.ComponentT.InitFromObj(componentList.Components(i))
                    self.components.append(component_)

    # ComponentListT
    def Pack(self, builder):
        if self.components is not None:
            componentslist = []
            for i in range(len(self.components)):
                componentslist.append(self.components[i].Pack(builder))
            ComponentListStartComponentsVector(builder, len(self.components))
            for i in reversed(range(len(self.components))):
                builder.PrependUOffsetTRelative(componentslist[i])
            components = builder.EndVector(len(self.components))
        ComponentListStart(builder)
        if self.components is not None:
            ComponentListAddComponents(builder, components)
        componentList = ComponentListEnd(builder)
        return componentList
