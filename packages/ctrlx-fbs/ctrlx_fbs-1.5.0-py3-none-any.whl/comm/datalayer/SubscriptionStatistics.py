# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SubscriptionStatistics(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsSubscriptionStatistics(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SubscriptionStatistics()
        x.Init(buf, n + offset)
        return x

    # SubscriptionStatistics
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Number of clients with subscriptions
    # SubscriptionStatistics
    def NumberClients(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Number of subscriptions
    # SubscriptionStatistics
    def NumberSubscriptions(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Number of subscribed nodes;
    # SubscriptionStatistics
    def NumberSubscribedNodes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Number of realtime subscribed nodes
    # SubscriptionStatistics
    def NumberRTSubscribedNodes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def SubscriptionStatisticsStart(builder): builder.StartObject(4)
def SubscriptionStatisticsAddNumberClients(builder, numberClients): builder.PrependUint32Slot(0, numberClients, 0)
def SubscriptionStatisticsAddNumberSubscriptions(builder, numberSubscriptions): builder.PrependUint32Slot(1, numberSubscriptions, 0)
def SubscriptionStatisticsAddNumberSubscribedNodes(builder, numberSubscribedNodes): builder.PrependUint32Slot(2, numberSubscribedNodes, 0)
def SubscriptionStatisticsAddNumberRTSubscribedNodes(builder, numberRTSubscribedNodes): builder.PrependUint32Slot(3, numberRTSubscribedNodes, 0)
def SubscriptionStatisticsEnd(builder): return builder.EndObject()


class SubscriptionStatisticsT(object):

    # SubscriptionStatisticsT
    def __init__(self):
        self.numberClients = 0  # type: int
        self.numberSubscriptions = 0  # type: int
        self.numberSubscribedNodes = 0  # type: int
        self.numberRTSubscribedNodes = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        subscriptionStatistics = SubscriptionStatistics()
        subscriptionStatistics.Init(buf, pos)
        return cls.InitFromObj(subscriptionStatistics)

    @classmethod
    def InitFromObj(cls, subscriptionStatistics):
        x = SubscriptionStatisticsT()
        x._UnPack(subscriptionStatistics)
        return x

    # SubscriptionStatisticsT
    def _UnPack(self, subscriptionStatistics):
        if subscriptionStatistics is None:
            return
        self.numberClients = subscriptionStatistics.NumberClients()
        self.numberSubscriptions = subscriptionStatistics.NumberSubscriptions()
        self.numberSubscribedNodes = subscriptionStatistics.NumberSubscribedNodes()
        self.numberRTSubscribedNodes = subscriptionStatistics.NumberRTSubscribedNodes()

    # SubscriptionStatisticsT
    def Pack(self, builder):
        SubscriptionStatisticsStart(builder)
        SubscriptionStatisticsAddNumberClients(builder, self.numberClients)
        SubscriptionStatisticsAddNumberSubscriptions(builder, self.numberSubscriptions)
        SubscriptionStatisticsAddNumberSubscribedNodes(builder, self.numberSubscribedNodes)
        SubscriptionStatisticsAddNumberRTSubscribedNodes(builder, self.numberRTSubscribedNodes)
        subscriptionStatistics = SubscriptionStatisticsEnd(builder)
        return subscriptionStatistics
