# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class NTelBufferConfig(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsNTelBufferConfig(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NTelBufferConfig()
        x.Init(buf, n + offset)
        return x

    # NTelBufferConfig
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # number of buffer used if ntel buffer is used
    # NTelBufferConfig
    def DefaultN(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 6

def NTelBufferConfigStart(builder): builder.StartObject(1)
def NTelBufferConfigAddDefaultN(builder, defaultN): builder.PrependUint16Slot(0, defaultN, 6)
def NTelBufferConfigEnd(builder): return builder.EndObject()


class NTelBufferConfigT(object):

    # NTelBufferConfigT
    def __init__(self):
        self.defaultN = 6  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        nTelBufferConfig = NTelBufferConfig()
        nTelBufferConfig.Init(buf, pos)
        return cls.InitFromObj(nTelBufferConfig)

    @classmethod
    def InitFromObj(cls, nTelBufferConfig):
        x = NTelBufferConfigT()
        x._UnPack(nTelBufferConfig)
        return x

    # NTelBufferConfigT
    def _UnPack(self, nTelBufferConfig):
        if nTelBufferConfig is None:
            return
        self.defaultN = nTelBufferConfig.DefaultN()

    # NTelBufferConfigT
    def Pack(self, builder):
        NTelBufferConfigStart(builder)
        NTelBufferConfigAddDefaultN(builder, self.defaultN)
        nTelBufferConfig = NTelBufferConfigEnd(builder)
        return nTelBufferConfig
