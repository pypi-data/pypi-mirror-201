# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ProgramTask(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsProgramTask(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ProgramTask()
        x.Init(buf, n + offset)
        return x

    # ProgramTask
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # id of the task
    # ProgramTask
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # state of the task
    # ProgramTask
    def State(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Progress of the task in percent, if it's not possible to calculate, set state to running and progress to 0
    # ProgramTask
    def Progress(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # result of task;
    # ProgramTask
    def Result(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.datalayer.Diagnosis import Diagnosis
            obj = Diagnosis()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Additional progress information
    # ProgramTask
    def ProgressInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def ProgramTaskStart(builder): builder.StartObject(5)
def ProgramTaskAddId(builder, id): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)
def ProgramTaskAddState(builder, state): builder.PrependInt8Slot(1, state, 0)
def ProgramTaskAddProgress(builder, progress): builder.PrependUint32Slot(2, progress, 0)
def ProgramTaskAddResult(builder, result): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(result), 0)
def ProgramTaskAddProgressInfo(builder, progressInfo): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(progressInfo), 0)
def ProgramTaskEnd(builder): return builder.EndObject()

import comm.datalayer.Diagnosis
try:
    from typing import Optional
except:
    pass

class ProgramTaskT(object):

    # ProgramTaskT
    def __init__(self):
        self.id = None  # type: str
        self.state = 0  # type: int
        self.progress = 0  # type: int
        self.result = None  # type: Optional[comm.datalayer.Diagnosis.DiagnosisT]
        self.progressInfo = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        programTask = ProgramTask()
        programTask.Init(buf, pos)
        return cls.InitFromObj(programTask)

    @classmethod
    def InitFromObj(cls, programTask):
        x = ProgramTaskT()
        x._UnPack(programTask)
        return x

    # ProgramTaskT
    def _UnPack(self, programTask):
        if programTask is None:
            return
        self.id = programTask.Id()
        self.state = programTask.State()
        self.progress = programTask.Progress()
        if programTask.Result() is not None:
            self.result = comm.datalayer.Diagnosis.DiagnosisT.InitFromObj(programTask.Result())
        self.progressInfo = programTask.ProgressInfo()

    # ProgramTaskT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.result is not None:
            result = self.result.Pack(builder)
        if self.progressInfo is not None:
            progressInfo = builder.CreateString(self.progressInfo)
        ProgramTaskStart(builder)
        if self.id is not None:
            ProgramTaskAddId(builder, id)
        ProgramTaskAddState(builder, self.state)
        ProgramTaskAddProgress(builder, self.progress)
        if self.result is not None:
            ProgramTaskAddResult(builder, result)
        if self.progressInfo is not None:
            ProgramTaskAddProgressInfo(builder, progressInfo)
        programTask = ProgramTaskEnd(builder)
        return programTask
