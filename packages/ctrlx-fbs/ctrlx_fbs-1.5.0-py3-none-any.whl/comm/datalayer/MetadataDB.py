# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MetadataDB(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsMetadataDB(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MetadataDB()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def MetadataDBBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4D\x44\x44\x42", size_prefixed=size_prefixed)

    # MetadataDB
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MetadataDB
    def Address(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # MetadataDB
    def Childs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.datalayer.MetadataDB import MetadataDB
            obj = MetadataDB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MetadataDB
    def ChildsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MetadataDB
    def ChildsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # MetadataDB
    def Asterisk(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.datalayer.MetadataDB import MetadataDB
            obj = MetadataDB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MetadataDB
    def Metadata(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.datalayer.Metadata import Metadata
            obj = Metadata()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def MetadataDBStart(builder): builder.StartObject(4)
def MetadataDBAddAddress(builder, address): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(address), 0)
def MetadataDBAddChilds(builder, childs): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(childs), 0)
def MetadataDBStartChildsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def MetadataDBAddAsterisk(builder, asterisk): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(asterisk), 0)
def MetadataDBAddMetadata(builder, metadata): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(metadata), 0)
def MetadataDBEnd(builder): return builder.EndObject()

import comm.datalayer.Metadata
try:
    from typing import List, Optional
except:
    pass

class MetadataDBT(object):

    # MetadataDBT
    def __init__(self):
        self.address = None  # type: str
        self.childs = None  # type: List[comm.datalayer.MetadataDB.MetadataDBT]
        self.asterisk = None  # type: Optional[comm.datalayer.MetadataDB.MetadataDBT]
        self.metadata = None  # type: Optional[comm.datalayer.Metadata.MetadataT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        metadataDB = MetadataDB()
        metadataDB.Init(buf, pos)
        return cls.InitFromObj(metadataDB)

    @classmethod
    def InitFromObj(cls, metadataDB):
        x = MetadataDBT()
        x._UnPack(metadataDB)
        return x

    # MetadataDBT
    def _UnPack(self, metadataDB):
        if metadataDB is None:
            return
        self.address = metadataDB.Address()
        if not metadataDB.ChildsIsNone():
            self.childs = []
            for i in range(metadataDB.ChildsLength()):
                if metadataDB.Childs(i) is None:
                    self.childs.append(None)
                else:
                    metadataDB_ = comm.datalayer.MetadataDB.MetadataDBT.InitFromObj(metadataDB.Childs(i))
                    self.childs.append(metadataDB_)
        if metadataDB.Asterisk() is not None:
            self.asterisk = comm.datalayer.MetadataDB.MetadataDBT.InitFromObj(metadataDB.Asterisk())
        if metadataDB.Metadata() is not None:
            self.metadata = comm.datalayer.Metadata.MetadataT.InitFromObj(metadataDB.Metadata())

    # MetadataDBT
    def Pack(self, builder):
        if self.address is not None:
            address = builder.CreateString(self.address)
        if self.childs is not None:
            childslist = []
            for i in range(len(self.childs)):
                childslist.append(self.childs[i].Pack(builder))
            MetadataDBStartChildsVector(builder, len(self.childs))
            for i in reversed(range(len(self.childs))):
                builder.PrependUOffsetTRelative(childslist[i])
            childs = builder.EndVector(len(self.childs))
        if self.asterisk is not None:
            asterisk = self.asterisk.Pack(builder)
        if self.metadata is not None:
            metadata = self.metadata.Pack(builder)
        MetadataDBStart(builder)
        if self.address is not None:
            MetadataDBAddAddress(builder, address)
        if self.childs is not None:
            MetadataDBAddChilds(builder, childs)
        if self.asterisk is not None:
            MetadataDBAddAsterisk(builder, asterisk)
        if self.metadata is not None:
            MetadataDBAddMetadata(builder, metadata)
        metadataDB = MetadataDBEnd(builder)
        return metadataDB
