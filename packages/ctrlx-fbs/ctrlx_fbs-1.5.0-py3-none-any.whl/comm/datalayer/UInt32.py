# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UInt32(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsUInt32(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UInt32()
        x.Init(buf, n + offset)
        return x

    # UInt32
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UInt32
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def UInt32Start(builder): builder.StartObject(1)
def UInt32AddValue(builder, value): builder.PrependUint32Slot(0, value, 0)
def UInt32End(builder): return builder.EndObject()


class UInt32T(object):

    # UInt32T
    def __init__(self):
        self.value = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        uInt32 = UInt32()
        uInt32.Init(buf, pos)
        return cls.InitFromObj(uInt32)

    @classmethod
    def InitFromObj(cls, uInt32):
        x = UInt32T()
        x._UnPack(uInt32)
        return x

    # UInt32T
    def _UnPack(self, uInt32):
        if uInt32 is None:
            return
        self.value = uInt32.Value()

    # UInt32T
    def Pack(self, builder):
        UInt32Start(builder)
        UInt32AddValue(builder, self.value)
        uInt32 = UInt32End(builder)
        return uInt32
