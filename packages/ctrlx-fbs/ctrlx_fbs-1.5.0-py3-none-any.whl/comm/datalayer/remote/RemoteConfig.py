# automatically generated by the FlatBuffers compiler, do not modify

# namespace: remote

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class RemoteConfig(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsRemoteConfig(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RemoteConfig()
        x.Init(buf, n + offset)
        return x

    # RemoteConfig
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RemoteConfig
    def Remotes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.datalayer.remote.ConfigItem import ConfigItem
            obj = ConfigItem()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RemoteConfig
    def RemotesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RemoteConfig
    def RemotesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def RemoteConfigStart(builder): builder.StartObject(1)
def RemoteConfigAddRemotes(builder, remotes): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(remotes), 0)
def RemoteConfigStartRemotesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def RemoteConfigEnd(builder): return builder.EndObject()

import comm.datalayer.remote.ConfigItem
try:
    from typing import List
except:
    pass

class RemoteConfigT(object):

    # RemoteConfigT
    def __init__(self):
        self.remotes = None  # type: List[comm.datalayer.remote.ConfigItem.ConfigItemT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        remoteConfig = RemoteConfig()
        remoteConfig.Init(buf, pos)
        return cls.InitFromObj(remoteConfig)

    @classmethod
    def InitFromObj(cls, remoteConfig):
        x = RemoteConfigT()
        x._UnPack(remoteConfig)
        return x

    # RemoteConfigT
    def _UnPack(self, remoteConfig):
        if remoteConfig is None:
            return
        if not remoteConfig.RemotesIsNone():
            self.remotes = []
            for i in range(remoteConfig.RemotesLength()):
                if remoteConfig.Remotes(i) is None:
                    self.remotes.append(None)
                else:
                    configItem_ = comm.datalayer.remote.ConfigItem.ConfigItemT.InitFromObj(remoteConfig.Remotes(i))
                    self.remotes.append(configItem_)

    # RemoteConfigT
    def Pack(self, builder):
        if self.remotes is not None:
            remoteslist = []
            for i in range(len(self.remotes)):
                remoteslist.append(self.remotes[i].Pack(builder))
            RemoteConfigStartRemotesVector(builder, len(self.remotes))
            for i in reversed(range(len(self.remotes))):
                builder.PrependUOffsetTRelative(remoteslist[i])
            remotes = builder.EndVector(len(self.remotes))
        RemoteConfigStart(builder)
        if self.remotes is not None:
            RemoteConfigAddRemotes(builder, remotes)
        remoteConfig = RemoteConfigEnd(builder)
        return remoteConfig
