# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SubscriptionSettings(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsSubscriptionSettings(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SubscriptionSettings()
        x.Init(buf, n + offset)
        return x

    # SubscriptionSettings
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # minimum publish interval in milliseconds
    # SubscriptionSettings
    def MinimumPublishInterval(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 50

    # minimum sampling interval in microseconds
    # SubscriptionSettings
    def MinimumSampleInterval(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 100000

    # maximum size of buffer
    # SubscriptionSettings
    def MaximumBufferSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 50

    # minimum error interval
    # SubscriptionSettings
    def MinimumErrorInterval(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 10000

    # Maximum allowed count of RT Subscriptions to addresses
    # SubscriptionSettings
    def MaximumRTSubscribedNodes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 50

def SubscriptionSettingsStart(builder): builder.StartObject(5)
def SubscriptionSettingsAddMinimumPublishInterval(builder, minimumPublishInterval): builder.PrependUint32Slot(0, minimumPublishInterval, 50)
def SubscriptionSettingsAddMinimumSampleInterval(builder, minimumSampleInterval): builder.PrependUint64Slot(1, minimumSampleInterval, 100000)
def SubscriptionSettingsAddMaximumBufferSize(builder, maximumBufferSize): builder.PrependUint32Slot(2, maximumBufferSize, 50)
def SubscriptionSettingsAddMinimumErrorInterval(builder, minimumErrorInterval): builder.PrependUint32Slot(3, minimumErrorInterval, 10000)
def SubscriptionSettingsAddMaximumRTSubscribedNodes(builder, maximumRTSubscribedNodes): builder.PrependUint32Slot(4, maximumRTSubscribedNodes, 50)
def SubscriptionSettingsEnd(builder): return builder.EndObject()


class SubscriptionSettingsT(object):

    # SubscriptionSettingsT
    def __init__(self):
        self.minimumPublishInterval = 50  # type: int
        self.minimumSampleInterval = 100000  # type: int
        self.maximumBufferSize = 50  # type: int
        self.minimumErrorInterval = 10000  # type: int
        self.maximumRTSubscribedNodes = 50  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        subscriptionSettings = SubscriptionSettings()
        subscriptionSettings.Init(buf, pos)
        return cls.InitFromObj(subscriptionSettings)

    @classmethod
    def InitFromObj(cls, subscriptionSettings):
        x = SubscriptionSettingsT()
        x._UnPack(subscriptionSettings)
        return x

    # SubscriptionSettingsT
    def _UnPack(self, subscriptionSettings):
        if subscriptionSettings is None:
            return
        self.minimumPublishInterval = subscriptionSettings.MinimumPublishInterval()
        self.minimumSampleInterval = subscriptionSettings.MinimumSampleInterval()
        self.maximumBufferSize = subscriptionSettings.MaximumBufferSize()
        self.minimumErrorInterval = subscriptionSettings.MinimumErrorInterval()
        self.maximumRTSubscribedNodes = subscriptionSettings.MaximumRTSubscribedNodes()

    # SubscriptionSettingsT
    def Pack(self, builder):
        SubscriptionSettingsStart(builder)
        SubscriptionSettingsAddMinimumPublishInterval(builder, self.minimumPublishInterval)
        SubscriptionSettingsAddMinimumSampleInterval(builder, self.minimumSampleInterval)
        SubscriptionSettingsAddMaximumBufferSize(builder, self.maximumBufferSize)
        SubscriptionSettingsAddMinimumErrorInterval(builder, self.minimumErrorInterval)
        SubscriptionSettingsAddMaximumRTSubscribedNodes(builder, self.maximumRTSubscribedNodes)
        subscriptionSettings = SubscriptionSettingsEnd(builder)
        return subscriptionSettings
