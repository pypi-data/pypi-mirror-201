# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UInt8(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsUInt8(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UInt8()
        x.Init(buf, n + offset)
        return x

    # UInt8
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UInt8
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

def UInt8Start(builder): builder.StartObject(1)
def UInt8AddValue(builder, value): builder.PrependUint8Slot(0, value, 0)
def UInt8End(builder): return builder.EndObject()


class UInt8T(object):

    # UInt8T
    def __init__(self):
        self.value = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        uInt8 = UInt8()
        uInt8.Init(buf, pos)
        return cls.InitFromObj(uInt8)

    @classmethod
    def InitFromObj(cls, uInt8):
        x = UInt8T()
        x._UnPack(uInt8)
        return x

    # UInt8T
    def _UnPack(self, uInt8):
        if uInt8 is None:
            return
        self.value = uInt8.Value()

    # UInt8T
    def Pack(self, builder):
        UInt8Start(builder)
        UInt8AddValue(builder, self.value)
        uInt8 = UInt8End(builder)
        return uInt8
