# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class RetainStats(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsRetainStats(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RetainStats()
        x.Init(buf, n + offset)
        return x

    # RetainStats
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # total size of memory in bytes
    # RetainStats
    def Total(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # free size of memory in bytes
    # RetainStats
    def Free(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # used size of memory in bytes
    # RetainStats
    def Used(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # biggest free chunk of memory in bytes
    # RetainStats
    def BiggestFree(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # now often was the nvram synced
    # RetainStats
    def SyncCounter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # last used offset
    # RetainStats
    def LastUsed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # debug information of shared memory
    # RetainStats
    def Info(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def RetainStatsStart(builder): builder.StartObject(7)
def RetainStatsAddTotal(builder, total): builder.PrependUint32Slot(0, total, 0)
def RetainStatsAddFree(builder, free): builder.PrependUint32Slot(1, free, 0)
def RetainStatsAddUsed(builder, used): builder.PrependUint32Slot(2, used, 0)
def RetainStatsAddBiggestFree(builder, biggestFree): builder.PrependUint32Slot(3, biggestFree, 0)
def RetainStatsAddSyncCounter(builder, syncCounter): builder.PrependUint32Slot(4, syncCounter, 0)
def RetainStatsAddLastUsed(builder, lastUsed): builder.PrependUint32Slot(5, lastUsed, 0)
def RetainStatsAddInfo(builder, info): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(info), 0)
def RetainStatsEnd(builder): return builder.EndObject()


class RetainStatsT(object):

    # RetainStatsT
    def __init__(self):
        self.total = 0  # type: int
        self.free = 0  # type: int
        self.used = 0  # type: int
        self.biggestFree = 0  # type: int
        self.syncCounter = 0  # type: int
        self.lastUsed = 0  # type: int
        self.info = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        retainStats = RetainStats()
        retainStats.Init(buf, pos)
        return cls.InitFromObj(retainStats)

    @classmethod
    def InitFromObj(cls, retainStats):
        x = RetainStatsT()
        x._UnPack(retainStats)
        return x

    # RetainStatsT
    def _UnPack(self, retainStats):
        if retainStats is None:
            return
        self.total = retainStats.Total()
        self.free = retainStats.Free()
        self.used = retainStats.Used()
        self.biggestFree = retainStats.BiggestFree()
        self.syncCounter = retainStats.SyncCounter()
        self.lastUsed = retainStats.LastUsed()
        self.info = retainStats.Info()

    # RetainStatsT
    def Pack(self, builder):
        if self.info is not None:
            info = builder.CreateString(self.info)
        RetainStatsStart(builder)
        RetainStatsAddTotal(builder, self.total)
        RetainStatsAddFree(builder, self.free)
        RetainStatsAddUsed(builder, self.used)
        RetainStatsAddBiggestFree(builder, self.biggestFree)
        RetainStatsAddSyncCounter(builder, self.syncCounter)
        RetainStatsAddLastUsed(builder, self.lastUsed)
        if self.info is not None:
            RetainStatsAddInfo(builder, info)
        retainStats = RetainStatsEnd(builder)
        return retainStats
