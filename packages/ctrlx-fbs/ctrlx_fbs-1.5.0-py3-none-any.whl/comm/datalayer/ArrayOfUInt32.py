# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ArrayOfUInt32(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsArrayOfUInt32(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ArrayOfUInt32()
        x.Init(buf, n + offset)
        return x

    # ArrayOfUInt32
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ArrayOfUInt32
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # ArrayOfUInt32
    def ValueAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # ArrayOfUInt32
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ArrayOfUInt32
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def ArrayOfUInt32Start(builder): builder.StartObject(1)
def ArrayOfUInt32AddValue(builder, value): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)
def ArrayOfUInt32StartValueVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ArrayOfUInt32End(builder): return builder.EndObject()

try:
    from typing import List
except:
    pass

class ArrayOfUInt32T(object):

    # ArrayOfUInt32T
    def __init__(self):
        self.value = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        arrayOfUInt32 = ArrayOfUInt32()
        arrayOfUInt32.Init(buf, pos)
        return cls.InitFromObj(arrayOfUInt32)

    @classmethod
    def InitFromObj(cls, arrayOfUInt32):
        x = ArrayOfUInt32T()
        x._UnPack(arrayOfUInt32)
        return x

    # ArrayOfUInt32T
    def _UnPack(self, arrayOfUInt32):
        if arrayOfUInt32 is None:
            return
        if not arrayOfUInt32.ValueIsNone():
            if np is None:
                self.value = []
                for i in range(arrayOfUInt32.ValueLength()):
                    self.value.append(arrayOfUInt32.Value(i))
            else:
                self.value = arrayOfUInt32.ValueAsNumpy()

    # ArrayOfUInt32T
    def Pack(self, builder):
        if self.value is not None:
            if np is not None and type(self.value) is np.ndarray:
                value = builder.CreateNumpyVector(self.value)
            else:
                ArrayOfUInt32StartValueVector(builder, len(self.value))
                for i in reversed(range(len(self.value))):
                    builder.PrependUint32(self.value[i])
                value = builder.EndVector(len(self.value))
        ArrayOfUInt32Start(builder)
        if self.value is not None:
            ArrayOfUInt32AddValue(builder, value)
        arrayOfUInt32 = ArrayOfUInt32End(builder)
        return arrayOfUInt32
