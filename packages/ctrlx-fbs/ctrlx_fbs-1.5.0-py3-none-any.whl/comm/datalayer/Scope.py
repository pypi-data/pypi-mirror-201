# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Scope(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsScope(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Scope()
        x.Init(buf, n + offset)
        return x

    # Scope
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Identifier of the Scope
    # Scope
    def Identifier(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Human readable name of the Scope
    # Scope
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Description of the Scope
    # Scope
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # List of permission string for read operations
    # Scope
    def PermissionsR(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Scope
    def PermissionsRLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Scope
    def PermissionsRIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # List of permission string for read/write operations
    # Scope
    def PermissionsRW(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Scope
    def PermissionsRWLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Scope
    def PermissionsRWIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # List of permission string for execute operations
    # Scope
    def PermissionsX(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Scope
    def PermissionsXLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Scope
    def PermissionsXIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # List of permission string for all operations
    # Scope
    def PermissionsRWX(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Scope
    def PermissionsRWXLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Scope
    def PermissionsRWXIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

def ScopeStart(builder): builder.StartObject(7)
def ScopeAddIdentifier(builder, identifier): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(identifier), 0)
def ScopeAddName(builder, name): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def ScopeAddDescription(builder, description): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)
def ScopeAddPermissionsR(builder, permissionsR): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(permissionsR), 0)
def ScopeStartPermissionsRVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ScopeAddPermissionsRW(builder, permissionsRW): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(permissionsRW), 0)
def ScopeStartPermissionsRWVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ScopeAddPermissionsX(builder, permissionsX): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(permissionsX), 0)
def ScopeStartPermissionsXVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ScopeAddPermissionsRWX(builder, permissionsRWX): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(permissionsRWX), 0)
def ScopeStartPermissionsRWXVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ScopeEnd(builder): return builder.EndObject()

try:
    from typing import List
except:
    pass

class ScopeT(object):

    # ScopeT
    def __init__(self):
        self.identifier = None  # type: str
        self.name = None  # type: str
        self.description = None  # type: str
        self.permissionsR = None  # type: List[str]
        self.permissionsRW = None  # type: List[str]
        self.permissionsX = None  # type: List[str]
        self.permissionsRWX = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        scope = Scope()
        scope.Init(buf, pos)
        return cls.InitFromObj(scope)

    @classmethod
    def InitFromObj(cls, scope):
        x = ScopeT()
        x._UnPack(scope)
        return x

    # ScopeT
    def _UnPack(self, scope):
        if scope is None:
            return
        self.identifier = scope.Identifier()
        self.name = scope.Name()
        self.description = scope.Description()
        if not scope.PermissionsRIsNone():
            self.permissionsR = []
            for i in range(scope.PermissionsRLength()):
                self.permissionsR.append(scope.PermissionsR(i))
        if not scope.PermissionsRWIsNone():
            self.permissionsRW = []
            for i in range(scope.PermissionsRWLength()):
                self.permissionsRW.append(scope.PermissionsRW(i))
        if not scope.PermissionsXIsNone():
            self.permissionsX = []
            for i in range(scope.PermissionsXLength()):
                self.permissionsX.append(scope.PermissionsX(i))
        if not scope.PermissionsRWXIsNone():
            self.permissionsRWX = []
            for i in range(scope.PermissionsRWXLength()):
                self.permissionsRWX.append(scope.PermissionsRWX(i))

    # ScopeT
    def Pack(self, builder):
        if self.identifier is not None:
            identifier = builder.CreateString(self.identifier)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.permissionsR is not None:
            permissionsRlist = []
            for i in range(len(self.permissionsR)):
                permissionsRlist.append(builder.CreateString(self.permissionsR[i]))
            ScopeStartPermissionsRVector(builder, len(self.permissionsR))
            for i in reversed(range(len(self.permissionsR))):
                builder.PrependUOffsetTRelative(permissionsRlist[i])
            permissionsR = builder.EndVector(len(self.permissionsR))
        if self.permissionsRW is not None:
            permissionsRWlist = []
            for i in range(len(self.permissionsRW)):
                permissionsRWlist.append(builder.CreateString(self.permissionsRW[i]))
            ScopeStartPermissionsRWVector(builder, len(self.permissionsRW))
            for i in reversed(range(len(self.permissionsRW))):
                builder.PrependUOffsetTRelative(permissionsRWlist[i])
            permissionsRW = builder.EndVector(len(self.permissionsRW))
        if self.permissionsX is not None:
            permissionsXlist = []
            for i in range(len(self.permissionsX)):
                permissionsXlist.append(builder.CreateString(self.permissionsX[i]))
            ScopeStartPermissionsXVector(builder, len(self.permissionsX))
            for i in reversed(range(len(self.permissionsX))):
                builder.PrependUOffsetTRelative(permissionsXlist[i])
            permissionsX = builder.EndVector(len(self.permissionsX))
        if self.permissionsRWX is not None:
            permissionsRWXlist = []
            for i in range(len(self.permissionsRWX)):
                permissionsRWXlist.append(builder.CreateString(self.permissionsRWX[i]))
            ScopeStartPermissionsRWXVector(builder, len(self.permissionsRWX))
            for i in reversed(range(len(self.permissionsRWX))):
                builder.PrependUOffsetTRelative(permissionsRWXlist[i])
            permissionsRWX = builder.EndVector(len(self.permissionsRWX))
        ScopeStart(builder)
        if self.identifier is not None:
            ScopeAddIdentifier(builder, identifier)
        if self.name is not None:
            ScopeAddName(builder, name)
        if self.description is not None:
            ScopeAddDescription(builder, description)
        if self.permissionsR is not None:
            ScopeAddPermissionsR(builder, permissionsR)
        if self.permissionsRW is not None:
            ScopeAddPermissionsRW(builder, permissionsRW)
        if self.permissionsX is not None:
            ScopeAddPermissionsX(builder, permissionsX)
        if self.permissionsRWX is not None:
            ScopeAddPermissionsRWX(builder, permissionsRWX)
        scope = ScopeEnd(builder)
        return scope
