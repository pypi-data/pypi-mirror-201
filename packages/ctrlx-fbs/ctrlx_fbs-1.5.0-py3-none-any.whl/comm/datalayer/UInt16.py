# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UInt16(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsUInt16(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UInt16()
        x.Init(buf, n + offset)
        return x

    # UInt16
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UInt16
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

def UInt16Start(builder): builder.StartObject(1)
def UInt16AddValue(builder, value): builder.PrependUint16Slot(0, value, 0)
def UInt16End(builder): return builder.EndObject()


class UInt16T(object):

    # UInt16T
    def __init__(self):
        self.value = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        uInt16 = UInt16()
        uInt16.Init(buf, pos)
        return cls.InitFromObj(uInt16)

    @classmethod
    def InitFromObj(cls, uInt16):
        x = UInt16T()
        x._UnPack(uInt16)
        return x

    # UInt16T
    def _UnPack(self, uInt16):
        if uInt16 is None:
            return
        self.value = uInt16.Value()

    # UInt16T
    def Pack(self, builder):
        UInt16Start(builder)
        UInt16AddValue(builder, self.value)
        uInt16 = UInt16End(builder)
        return uInt16
