# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Watchlists(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsWatchlists(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Watchlists()
        x.Init(buf, n + offset)
        return x

    # Watchlists
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Watchlists
    # Watchlists
    def Watchlists(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from comm.datalayer.Watchlist import Watchlist
            obj = Watchlist()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Watchlists
    def WatchlistsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Watchlists
    def WatchlistsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def WatchlistsStart(builder): builder.StartObject(1)
def WatchlistsAddWatchlists(builder, watchlists): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(watchlists), 0)
def WatchlistsStartWatchlistsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def WatchlistsEnd(builder): return builder.EndObject()

import comm.datalayer.Watchlist
try:
    from typing import List
except:
    pass

class WatchlistsT(object):

    # WatchlistsT
    def __init__(self):
        self.watchlists = None  # type: List[comm.datalayer.Watchlist.WatchlistT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        watchlists = Watchlists()
        watchlists.Init(buf, pos)
        return cls.InitFromObj(watchlists)

    @classmethod
    def InitFromObj(cls, watchlists):
        x = WatchlistsT()
        x._UnPack(watchlists)
        return x

    # WatchlistsT
    def _UnPack(self, watchlists):
        if watchlists is None:
            return
        if not watchlists.WatchlistsIsNone():
            self.watchlists = []
            for i in range(watchlists.WatchlistsLength()):
                if watchlists.Watchlists(i) is None:
                    self.watchlists.append(None)
                else:
                    watchlist_ = comm.datalayer.Watchlist.WatchlistT.InitFromObj(watchlists.Watchlists(i))
                    self.watchlists.append(watchlist_)

    # WatchlistsT
    def Pack(self, builder):
        if self.watchlists is not None:
            watchlistslist = []
            for i in range(len(self.watchlists)):
                watchlistslist.append(self.watchlists[i].Pack(builder))
            WatchlistsStartWatchlistsVector(builder, len(self.watchlists))
            for i in reversed(range(len(self.watchlists))):
                builder.PrependUOffsetTRelative(watchlistslist[i])
            watchlists = builder.EndVector(len(self.watchlists))
        WatchlistsStart(builder)
        if self.watchlists is not None:
            WatchlistsAddWatchlists(builder, watchlists)
        watchlists = WatchlistsEnd(builder)
        return watchlists
