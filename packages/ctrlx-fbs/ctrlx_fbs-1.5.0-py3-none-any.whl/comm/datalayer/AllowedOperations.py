# automatically generated by the FlatBuffers compiler, do not modify

# namespace: datalayer

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class AllowedOperations(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsAllowedOperations(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AllowedOperations()
        x.Init(buf, n + offset)
        return x

    # AllowedOperations
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # get
    # AllowedOperations
    def Read(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # put
    # AllowedOperations
    def Write(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # post
    # AllowedOperations
    def Create(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # delete
    # AllowedOperations
    def Delete(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # browse
    # AllowedOperations
    def Browse(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return True

def AllowedOperationsStart(builder): builder.StartObject(5)
def AllowedOperationsAddRead(builder, read): builder.PrependBoolSlot(0, read, 0)
def AllowedOperationsAddWrite(builder, write): builder.PrependBoolSlot(1, write, 0)
def AllowedOperationsAddCreate(builder, create): builder.PrependBoolSlot(2, create, 0)
def AllowedOperationsAddDelete(builder, delete): builder.PrependBoolSlot(3, delete, 0)
def AllowedOperationsAddBrowse(builder, browse): builder.PrependBoolSlot(4, browse, 1)
def AllowedOperationsEnd(builder): return builder.EndObject()


class AllowedOperationsT(object):

    # AllowedOperationsT
    def __init__(self):
        self.read = False  # type: bool
        self.write = False  # type: bool
        self.create = False  # type: bool
        self.delete = False  # type: bool
        self.browse = True  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        allowedOperations = AllowedOperations()
        allowedOperations.Init(buf, pos)
        return cls.InitFromObj(allowedOperations)

    @classmethod
    def InitFromObj(cls, allowedOperations):
        x = AllowedOperationsT()
        x._UnPack(allowedOperations)
        return x

    # AllowedOperationsT
    def _UnPack(self, allowedOperations):
        if allowedOperations is None:
            return
        self.read = allowedOperations.Read()
        self.write = allowedOperations.Write()
        self.create = allowedOperations.Create()
        self.delete = allowedOperations.Delete()
        self.browse = allowedOperations.Browse()

    # AllowedOperationsT
    def Pack(self, builder):
        AllowedOperationsStart(builder)
        AllowedOperationsAddRead(builder, self.read)
        AllowedOperationsAddWrite(builder, self.write)
        AllowedOperationsAddCreate(builder, self.create)
        AllowedOperationsAddDelete(builder, self.delete)
        AllowedOperationsAddBrowse(builder, self.browse)
        allowedOperations = AllowedOperationsEnd(builder)
        return allowedOperations
