# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class profileTypeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsprofileTypeData(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = profileTypeData()
        x.Init(buf, n + offset)
        return x

    # profileTypeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # profileTypeData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def profileTypeDataStart(builder): builder.StartObject(1)
def profileTypeDataAddType(builder, type): builder.PrependUint32Slot(0, type, 0)
def profileTypeDataEnd(builder): return builder.EndObject()


class profileTypeDataT(object):

    # profileTypeDataT
    def __init__(self):
        self.type = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        profileTypeData = profileTypeData()
        profileTypeData.Init(buf, pos)
        return cls.InitFromObj(profileTypeData)

    @classmethod
    def InitFromObj(cls, profileTypeData):
        x = profileTypeDataT()
        x._UnPack(profileTypeData)
        return x

    # profileTypeDataT
    def _UnPack(self, profileTypeData):
        if profileTypeData is None:
            return
        self.type = profileTypeData.Type()

    # profileTypeDataT
    def Pack(self, builder):
        profileTypeDataStart(builder)
        profileTypeDataAddType(builder, self.type)
        profileTypeData = profileTypeDataEnd(builder)
        return profileTypeData
