# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class mappingEntry(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsmappingEntry(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = mappingEntry()
        x.Init(buf, n + offset)
        return x

    # mappingEntry
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # mappingEntry
    def ValueID(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # mappingEntry
    def DatalayerURI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # mappingEntry
    def ProfileVar(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def mappingEntryStart(builder): builder.StartObject(3)
def mappingEntryAddValueID(builder, valueID): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(valueID), 0)
def mappingEntryAddDatalayerURI(builder, datalayerURI): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(datalayerURI), 0)
def mappingEntryAddProfileVar(builder, profileVar): builder.PrependInt8Slot(2, profileVar, 0)
def mappingEntryEnd(builder): return builder.EndObject()


class mappingEntryT(object):

    # mappingEntryT
    def __init__(self):
        self.valueID = None  # type: str
        self.datalayerURI = None  # type: str
        self.profileVar = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        mappingEntry = mappingEntry()
        mappingEntry.Init(buf, pos)
        return cls.InitFromObj(mappingEntry)

    @classmethod
    def InitFromObj(cls, mappingEntry):
        x = mappingEntryT()
        x._UnPack(mappingEntry)
        return x

    # mappingEntryT
    def _UnPack(self, mappingEntry):
        if mappingEntry is None:
            return
        self.valueID = mappingEntry.ValueID()
        self.datalayerURI = mappingEntry.DatalayerURI()
        self.profileVar = mappingEntry.ProfileVar()

    # mappingEntryT
    def Pack(self, builder):
        if self.valueID is not None:
            valueID = builder.CreateString(self.valueID)
        if self.datalayerURI is not None:
            datalayerURI = builder.CreateString(self.datalayerURI)
        mappingEntryStart(builder)
        if self.valueID is not None:
            mappingEntryAddValueID(builder, valueID)
        if self.datalayerURI is not None:
            mappingEntryAddDatalayerURI(builder, datalayerURI)
        mappingEntryAddProfileVar(builder, self.profileVar)
        mappingEntry = mappingEntryEnd(builder)
        return mappingEntry
