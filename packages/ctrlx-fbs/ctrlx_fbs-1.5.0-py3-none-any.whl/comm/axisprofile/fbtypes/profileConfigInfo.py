# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class profileConfigInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsprofileConfigInfo(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = profileConfigInfo()
        x.Init(buf, n + offset)
        return x

    # profileConfigInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # profileConfigInfo
    def DeviceAddress(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # profileConfigInfo
    def InputBuffer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # profileConfigInfo
    def OutputBuffer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # profileConfigInfo
    def ProfileType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.axisprofile.fbtypes.profileTypeData import profileTypeData
            obj = profileTypeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # profileConfigInfo
    def ProfileName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # profileConfigInfo
    def InputMapping(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.axisprofile.fbtypes.valueMapping import valueMapping
            obj = valueMapping()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # profileConfigInfo
    def OutputMapping(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.axisprofile.fbtypes.valueMapping import valueMapping
            obj = valueMapping()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # profileConfigInfo
    def ScalingInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from comm.axisprofile.fbtypes.profileScalingCfg import profileScalingCfg
            obj = profileScalingCfg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # profileConfigInfo
    def DeviceName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def profileConfigInfoStart(builder): builder.StartObject(9)
def profileConfigInfoAddDeviceAddress(builder, deviceAddress): builder.PrependUint32Slot(0, deviceAddress, 0)
def profileConfigInfoAddInputBuffer(builder, inputBuffer): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(inputBuffer), 0)
def profileConfigInfoAddOutputBuffer(builder, outputBuffer): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(outputBuffer), 0)
def profileConfigInfoAddProfileType(builder, profileType): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(profileType), 0)
def profileConfigInfoAddProfileName(builder, profileName): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(profileName), 0)
def profileConfigInfoAddInputMapping(builder, inputMapping): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(inputMapping), 0)
def profileConfigInfoAddOutputMapping(builder, outputMapping): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(outputMapping), 0)
def profileConfigInfoAddScalingInfo(builder, scalingInfo): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(scalingInfo), 0)
def profileConfigInfoAddDeviceName(builder, deviceName): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(deviceName), 0)
def profileConfigInfoEnd(builder): return builder.EndObject()

import comm.axisprofile.fbtypes.profileScalingCfg
import comm.axisprofile.fbtypes.profileTypeData
import comm.axisprofile.fbtypes.valueMapping
try:
    from typing import Optional
except:
    pass

class profileConfigInfoT(object):

    # profileConfigInfoT
    def __init__(self):
        self.deviceAddress = 0  # type: int
        self.inputBuffer = None  # type: str
        self.outputBuffer = None  # type: str
        self.profileType = None  # type: Optional[comm.axisprofile.fbtypes.profileTypeData.profileTypeDataT]
        self.profileName = None  # type: str
        self.inputMapping = None  # type: Optional[comm.axisprofile.fbtypes.valueMapping.valueMappingT]
        self.outputMapping = None  # type: Optional[comm.axisprofile.fbtypes.valueMapping.valueMappingT]
        self.scalingInfo = None  # type: Optional[comm.axisprofile.fbtypes.profileScalingCfg.profileScalingCfgT]
        self.deviceName = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        profileConfigInfo = profileConfigInfo()
        profileConfigInfo.Init(buf, pos)
        return cls.InitFromObj(profileConfigInfo)

    @classmethod
    def InitFromObj(cls, profileConfigInfo):
        x = profileConfigInfoT()
        x._UnPack(profileConfigInfo)
        return x

    # profileConfigInfoT
    def _UnPack(self, profileConfigInfo):
        if profileConfigInfo is None:
            return
        self.deviceAddress = profileConfigInfo.DeviceAddress()
        self.inputBuffer = profileConfigInfo.InputBuffer()
        self.outputBuffer = profileConfigInfo.OutputBuffer()
        if profileConfigInfo.ProfileType() is not None:
            self.profileType = comm.axisprofile.fbtypes.profileTypeData.profileTypeDataT.InitFromObj(profileConfigInfo.ProfileType())
        self.profileName = profileConfigInfo.ProfileName()
        if profileConfigInfo.InputMapping() is not None:
            self.inputMapping = comm.axisprofile.fbtypes.valueMapping.valueMappingT.InitFromObj(profileConfigInfo.InputMapping())
        if profileConfigInfo.OutputMapping() is not None:
            self.outputMapping = comm.axisprofile.fbtypes.valueMapping.valueMappingT.InitFromObj(profileConfigInfo.OutputMapping())
        if profileConfigInfo.ScalingInfo() is not None:
            self.scalingInfo = comm.axisprofile.fbtypes.profileScalingCfg.profileScalingCfgT.InitFromObj(profileConfigInfo.ScalingInfo())
        self.deviceName = profileConfigInfo.DeviceName()

    # profileConfigInfoT
    def Pack(self, builder):
        if self.inputBuffer is not None:
            inputBuffer = builder.CreateString(self.inputBuffer)
        if self.outputBuffer is not None:
            outputBuffer = builder.CreateString(self.outputBuffer)
        if self.profileType is not None:
            profileType = self.profileType.Pack(builder)
        if self.profileName is not None:
            profileName = builder.CreateString(self.profileName)
        if self.inputMapping is not None:
            inputMapping = self.inputMapping.Pack(builder)
        if self.outputMapping is not None:
            outputMapping = self.outputMapping.Pack(builder)
        if self.scalingInfo is not None:
            scalingInfo = self.scalingInfo.Pack(builder)
        if self.deviceName is not None:
            deviceName = builder.CreateString(self.deviceName)
        profileConfigInfoStart(builder)
        profileConfigInfoAddDeviceAddress(builder, self.deviceAddress)
        if self.inputBuffer is not None:
            profileConfigInfoAddInputBuffer(builder, inputBuffer)
        if self.outputBuffer is not None:
            profileConfigInfoAddOutputBuffer(builder, outputBuffer)
        if self.profileType is not None:
            profileConfigInfoAddProfileType(builder, profileType)
        if self.profileName is not None:
            profileConfigInfoAddProfileName(builder, profileName)
        if self.inputMapping is not None:
            profileConfigInfoAddInputMapping(builder, inputMapping)
        if self.outputMapping is not None:
            profileConfigInfoAddOutputMapping(builder, outputMapping)
        if self.scalingInfo is not None:
            profileConfigInfoAddScalingInfo(builder, scalingInfo)
        if self.deviceName is not None:
            profileConfigInfoAddDeviceName(builder, deviceName)
        profileConfigInfo = profileConfigInfoEnd(builder)
        return profileConfigInfo
