# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Watchdog(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsWatchdog(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Watchdog()
        x.Init(buf, n + offset)
        return x

    # Watchdog
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Watchdog
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Watchdog
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from common.scheduler.watchdog.fbs.Type import Type
            obj = Type()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Watchdog
    def VariantType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Watchdog
    def Variant(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def WatchdogStart(builder): builder.StartObject(4)
def WatchdogAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def WatchdogAddType(builder, type): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)
def WatchdogAddVariantType(builder, variantType): builder.PrependUint8Slot(2, variantType, 0)
def WatchdogAddVariant(builder, variant): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(variant), 0)
def WatchdogEnd(builder): return builder.EndObject()

import common.scheduler.watchdog.fbs.Cyclic
import common.scheduler.watchdog.fbs.Type
import common.scheduler.watchdog.fbs.WatchdogVariant
try:
    from typing import Optional, Union
except:
    pass

class WatchdogT(object):

    # WatchdogT
    def __init__(self):
        self.name = None  # type: str
        self.type = None  # type: Optional[common.scheduler.watchdog.fbs.Type.TypeT]
        self.variantType = 0  # type: int
        self.variant = None  # type: Union[None, common.scheduler.watchdog.fbs.Cyclic.CyclicT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        watchdog = Watchdog()
        watchdog.Init(buf, pos)
        return cls.InitFromObj(watchdog)

    @classmethod
    def InitFromObj(cls, watchdog):
        x = WatchdogT()
        x._UnPack(watchdog)
        return x

    # WatchdogT
    def _UnPack(self, watchdog):
        if watchdog is None:
            return
        self.name = watchdog.Name()
        if watchdog.Type() is not None:
            self.type = common.scheduler.watchdog.fbs.Type.TypeT.InitFromObj(watchdog.Type())
        self.variantType = watchdog.VariantType()
        self.variant = common.scheduler.watchdog.fbs.WatchdogVariant.WatchdogVariantCreator(self.variantType, watchdog.Variant())

    # WatchdogT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.type is not None:
            type = self.type.Pack(builder)
        if self.variant is not None:
            variant = self.variant.Pack(builder)
        WatchdogStart(builder)
        if self.name is not None:
            WatchdogAddName(builder, name)
        if self.type is not None:
            WatchdogAddType(builder, type)
        WatchdogAddVariantType(builder, self.variantType)
        if self.variant is not None:
            WatchdogAddVariant(builder, variant)
        watchdog = WatchdogEnd(builder)
        return watchdog
