# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ErrorReaction(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsErrorReaction(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ErrorReaction()
        x.Init(buf, n + offset)
        return x

    # ErrorReaction
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ErrorReaction
    def Class_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from common.scheduler.watchdog.errorreaction.fbs.Class import Class
            obj = Class()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ErrorReaction
    def Configuration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from common.scheduler.watchdog.errorreaction.fbs.Configuration import Configuration
            obj = Configuration()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ErrorReaction
    def MaxConsecutiveErrors(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def ErrorReactionStart(builder): builder.StartObject(3)
def ErrorReactionAddClass_(builder, class_): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(class_), 0)
def ErrorReactionAddConfiguration(builder, configuration): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(configuration), 0)
def ErrorReactionAddMaxConsecutiveErrors(builder, maxConsecutiveErrors): builder.PrependUint32Slot(2, maxConsecutiveErrors, 0)
def ErrorReactionEnd(builder): return builder.EndObject()

import common.scheduler.watchdog.errorreaction.fbs.Class
import common.scheduler.watchdog.errorreaction.fbs.Configuration
try:
    from typing import Optional
except:
    pass

class ErrorReactionT(object):

    # ErrorReactionT
    def __init__(self):
        self.class_ = None  # type: Optional[common.scheduler.watchdog.errorreaction.fbs.Class.ClassT]
        self.configuration = None  # type: Optional[common.scheduler.watchdog.errorreaction.fbs.Configuration.ConfigurationT]
        self.maxConsecutiveErrors = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        errorReaction = ErrorReaction()
        errorReaction.Init(buf, pos)
        return cls.InitFromObj(errorReaction)

    @classmethod
    def InitFromObj(cls, errorReaction):
        x = ErrorReactionT()
        x._UnPack(errorReaction)
        return x

    # ErrorReactionT
    def _UnPack(self, errorReaction):
        if errorReaction is None:
            return
        if errorReaction.Class_() is not None:
            self.class_ = common.scheduler.watchdog.errorreaction.fbs.Class.ClassT.InitFromObj(errorReaction.Class_())
        if errorReaction.Configuration() is not None:
            self.configuration = common.scheduler.watchdog.errorreaction.fbs.Configuration.ConfigurationT.InitFromObj(errorReaction.Configuration())
        self.maxConsecutiveErrors = errorReaction.MaxConsecutiveErrors()

    # ErrorReactionT
    def Pack(self, builder):
        if self.class_ is not None:
            class_ = self.class_.Pack(builder)
        if self.configuration is not None:
            configuration = self.configuration.Pack(builder)
        ErrorReactionStart(builder)
        if self.class_ is not None:
            ErrorReactionAddClass_(builder, class_)
        if self.configuration is not None:
            ErrorReactionAddConfiguration(builder, configuration)
        ErrorReactionAddMaxConsecutiveErrors(builder, self.maxConsecutiveErrors)
        errorReaction = ErrorReactionEnd(builder)
        return errorReaction
