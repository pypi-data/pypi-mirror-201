# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Task behavior in case of a task watchdog occurs
class Configuration(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsConfiguration(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Configuration()
        x.Init(buf, n + offset)
        return x

    # Configuration
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Task behavior in case of a task watchdog occurs
    # Configuration
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def ConfigurationStart(builder): builder.StartObject(1)
def ConfigurationAddType(builder, type): builder.PrependInt8Slot(0, type, 0)
def ConfigurationEnd(builder): return builder.EndObject()


class ConfigurationT(object):

    # ConfigurationT
    def __init__(self):
        self.type = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        configuration = Configuration()
        configuration.Init(buf, pos)
        return cls.InitFromObj(configuration)

    @classmethod
    def InitFromObj(cls, configuration):
        x = ConfigurationT()
        x._UnPack(configuration)
        return x

    # ConfigurationT
    def _UnPack(self, configuration):
        if configuration is None:
            return
        self.type = configuration.Type()

    # ConfigurationT
    def Pack(self, builder):
        ConfigurationStart(builder)
        ConfigurationAddType(builder, self.type)
        configuration = ConfigurationEnd(builder)
        return configuration
