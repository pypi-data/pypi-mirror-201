# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Timing histogram
class Histogram(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsHistogram(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Histogram()
        x.Init(buf, n + offset)
        return x

    # Histogram
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Scale of one element of timing histogram in [Âµs]
    # Histogram
    def Scale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Count of hits within the ranges of the scale elements of the timing values
    # Histogram
    def Values(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # Histogram
    def ValuesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint64Flags, o)
        return 0

    # Histogram
    def ValuesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Histogram
    def ValuesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def HistogramStart(builder): builder.StartObject(2)
def HistogramAddScale(builder, scale): builder.PrependUint64Slot(0, scale, 0)
def HistogramAddValues(builder, values): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(values), 0)
def HistogramStartValuesVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def HistogramEnd(builder): return builder.EndObject()

try:
    from typing import List
except:
    pass

class HistogramT(object):

    # HistogramT
    def __init__(self):
        self.scale = 0  # type: int
        self.values = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        histogram = Histogram()
        histogram.Init(buf, pos)
        return cls.InitFromObj(histogram)

    @classmethod
    def InitFromObj(cls, histogram):
        x = HistogramT()
        x._UnPack(histogram)
        return x

    # HistogramT
    def _UnPack(self, histogram):
        if histogram is None:
            return
        self.scale = histogram.Scale()
        if not histogram.ValuesIsNone():
            if np is None:
                self.values = []
                for i in range(histogram.ValuesLength()):
                    self.values.append(histogram.Values(i))
            else:
                self.values = histogram.ValuesAsNumpy()

    # HistogramT
    def Pack(self, builder):
        if self.values is not None:
            if np is not None and type(self.values) is np.ndarray:
                values = builder.CreateNumpyVector(self.values)
            else:
                HistogramStartValuesVector(builder, len(self.values))
                for i in reversed(range(len(self.values))):
                    builder.PrependUint64(self.values[i])
                values = builder.EndVector(len(self.values))
        HistogramStart(builder)
        HistogramAddScale(builder, self.scale)
        if self.values is not None:
            HistogramAddValues(builder, values)
        histogram = HistogramEnd(builder)
        return histogram
