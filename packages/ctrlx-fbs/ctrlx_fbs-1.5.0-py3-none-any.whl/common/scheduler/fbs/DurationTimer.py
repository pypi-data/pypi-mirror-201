# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Type selector of duration measurement
class DurationTimer(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsDurationTimer(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DurationTimer()
        x.Init(buf, n + offset)
        return x

    # DurationTimer
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Type selector of duration measurement
    # DurationTimer
    def Timer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 4

def DurationTimerStart(builder): builder.StartObject(1)
def DurationTimerAddTimer(builder, timer): builder.PrependInt8Slot(0, timer, 4)
def DurationTimerEnd(builder): return builder.EndObject()


class DurationTimerT(object):

    # DurationTimerT
    def __init__(self):
        self.timer = 4  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        durationTimer = DurationTimer()
        durationTimer.Init(buf, pos)
        return cls.InitFromObj(durationTimer)

    @classmethod
    def InitFromObj(cls, durationTimer):
        x = DurationTimerT()
        x._UnPack(durationTimer)
        return x

    # DurationTimerT
    def _UnPack(self, durationTimer):
        if durationTimer is None:
            return
        self.timer = durationTimer.Timer()

    # DurationTimerT
    def Pack(self, builder):
        DurationTimerStart(builder)
        DurationTimerAddTimer(builder, self.timer)
        durationTimer = DurationTimerEnd(builder)
        return durationTimer
