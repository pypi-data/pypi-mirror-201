# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# This table defines the unique identification of a diagnostic log in combination with the timestamp of the log.
class DiagnosisIdentificationWithTimestamp(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsDiagnosisIdentificationWithTimestamp(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DiagnosisIdentificationWithTimestamp()
        x.Init(buf, n + offset)
        return x

    # DiagnosisIdentificationWithTimestamp
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identification of the diagnostic log.
    # DiagnosisIdentificationWithTimestamp
    def DiagnosisIdentification(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from common.log.diagnosis.fbs.DiagnosisIdentification import DiagnosisIdentification
            obj = DiagnosisIdentification()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Timestamp of the diagnostic log.
    # DiagnosisIdentificationWithTimestamp
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def DiagnosisIdentificationWithTimestampStart(builder): builder.StartObject(2)
def DiagnosisIdentificationWithTimestampAddDiagnosisIdentification(builder, diagnosisIdentification): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(diagnosisIdentification), 0)
def DiagnosisIdentificationWithTimestampAddTimestamp(builder, timestamp): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(timestamp), 0)
def DiagnosisIdentificationWithTimestampEnd(builder): return builder.EndObject()

import common.log.diagnosis.fbs.DiagnosisIdentification
try:
    from typing import Optional
except:
    pass

class DiagnosisIdentificationWithTimestampT(object):

    # DiagnosisIdentificationWithTimestampT
    def __init__(self):
        self.diagnosisIdentification = None  # type: Optional[common.log.diagnosis.fbs.DiagnosisIdentification.DiagnosisIdentificationT]
        self.timestamp = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        diagnosisIdentificationWithTimestamp = DiagnosisIdentificationWithTimestamp()
        diagnosisIdentificationWithTimestamp.Init(buf, pos)
        return cls.InitFromObj(diagnosisIdentificationWithTimestamp)

    @classmethod
    def InitFromObj(cls, diagnosisIdentificationWithTimestamp):
        x = DiagnosisIdentificationWithTimestampT()
        x._UnPack(diagnosisIdentificationWithTimestamp)
        return x

    # DiagnosisIdentificationWithTimestampT
    def _UnPack(self, diagnosisIdentificationWithTimestamp):
        if diagnosisIdentificationWithTimestamp is None:
            return
        if diagnosisIdentificationWithTimestamp.DiagnosisIdentification() is not None:
            self.diagnosisIdentification = common.log.diagnosis.fbs.DiagnosisIdentification.DiagnosisIdentificationT.InitFromObj(diagnosisIdentificationWithTimestamp.DiagnosisIdentification())
        self.timestamp = diagnosisIdentificationWithTimestamp.Timestamp()

    # DiagnosisIdentificationWithTimestampT
    def Pack(self, builder):
        if self.diagnosisIdentification is not None:
            diagnosisIdentification = self.diagnosisIdentification.Pack(builder)
        if self.timestamp is not None:
            timestamp = builder.CreateString(self.timestamp)
        DiagnosisIdentificationWithTimestampStart(builder)
        if self.diagnosisIdentification is not None:
            DiagnosisIdentificationWithTimestampAddDiagnosisIdentification(builder, diagnosisIdentification)
        if self.timestamp is not None:
            DiagnosisIdentificationWithTimestampAddTimestamp(builder, timestamp)
        diagnosisIdentificationWithTimestamp = DiagnosisIdentificationWithTimestampEnd(builder)
        return diagnosisIdentificationWithTimestamp
