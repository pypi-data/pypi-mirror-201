# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# This table defines which log class is selected.
class ClassConfig(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsClassConfig(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ClassConfig()
        x.Init(buf, n + offset)
        return x

    # ClassConfig
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Selection of log class.
    # ClassConfig
    def ClassConfig(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 2

def ClassConfigStart(builder): builder.StartObject(1)
def ClassConfigAddClassConfig(builder, classConfig): builder.PrependInt8Slot(0, classConfig, 2)
def ClassConfigEnd(builder): return builder.EndObject()


class ClassConfigT(object):

    # ClassConfigT
    def __init__(self):
        self.classConfig = 2  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        classConfig = ClassConfig()
        classConfig.Init(buf, pos)
        return cls.InitFromObj(classConfig)

    @classmethod
    def InitFromObj(cls, classConfig):
        x = ClassConfigT()
        x._UnPack(classConfig)
        return x

    # ClassConfigT
    def _UnPack(self, classConfig):
        if classConfig is None:
            return
        self.classConfig = classConfig.ClassConfig()

    # ClassConfigT
    def Pack(self, builder):
        ClassConfigStart(builder)
        ClassConfigAddClassConfig(builder, self.classConfig)
        classConfig = ClassConfigEnd(builder)
        return classConfig
