# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# This table defines the elements of a main or detailed diagnostics that should be registered.
class DiagnosisElement(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsDiagnosisElement(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DiagnosisElement()
        x.Init(buf, n + offset)
        return x

    # DiagnosisElement
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Main or detailed diagnostic number.
    # DiagnosisElement
    def DiagnosisNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Version of the diagnostics starting with 1.
    # DiagnosisElement
    def Version(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # English text of the diagnostics.
    # DiagnosisElement
    def TextEnglish(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def DiagnosisElementStart(builder): builder.StartObject(3)
def DiagnosisElementAddDiagnosisNumber(builder, diagnosisNumber): builder.PrependUint32Slot(0, diagnosisNumber, 0)
def DiagnosisElementAddVersion(builder, version): builder.PrependUint8Slot(1, version, 0)
def DiagnosisElementAddTextEnglish(builder, textEnglish): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(textEnglish), 0)
def DiagnosisElementEnd(builder): return builder.EndObject()


class DiagnosisElementT(object):

    # DiagnosisElementT
    def __init__(self):
        self.diagnosisNumber = 0  # type: int
        self.version = 0  # type: int
        self.textEnglish = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        diagnosisElement = DiagnosisElement()
        diagnosisElement.Init(buf, pos)
        return cls.InitFromObj(diagnosisElement)

    @classmethod
    def InitFromObj(cls, diagnosisElement):
        x = DiagnosisElementT()
        x._UnPack(diagnosisElement)
        return x

    # DiagnosisElementT
    def _UnPack(self, diagnosisElement):
        if diagnosisElement is None:
            return
        self.diagnosisNumber = diagnosisElement.DiagnosisNumber()
        self.version = diagnosisElement.Version()
        self.textEnglish = diagnosisElement.TextEnglish()

    # DiagnosisElementT
    def Pack(self, builder):
        if self.textEnglish is not None:
            textEnglish = builder.CreateString(self.textEnglish)
        DiagnosisElementStart(builder)
        DiagnosisElementAddDiagnosisNumber(builder, self.diagnosisNumber)
        DiagnosisElementAddVersion(builder, self.version)
        if self.textEnglish is not None:
            DiagnosisElementAddTextEnglish(builder, textEnglish)
        diagnosisElement = DiagnosisElementEnd(builder)
        return diagnosisElement
