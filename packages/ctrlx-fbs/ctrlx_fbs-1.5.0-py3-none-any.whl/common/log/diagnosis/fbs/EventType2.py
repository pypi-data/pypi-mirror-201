# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# This table defines the generic event type 2 that is used to evaluate specific diagnostic events.
class EventType2(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsEventType2(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EventType2()
        x.Init(buf, n + offset)
        return x

    # EventType2
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Event counter that is incremented if the selected event occurs. 
    # EventType2
    def EventCounter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def EventType2Start(builder): builder.StartObject(1)
def EventType2AddEventCounter(builder, eventCounter): builder.PrependUint64Slot(0, eventCounter, 0)
def EventType2End(builder): return builder.EndObject()


class EventType2T(object):

    # EventType2T
    def __init__(self):
        self.eventCounter = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        eventType2 = EventType2()
        eventType2.Init(buf, pos)
        return cls.InitFromObj(eventType2)

    @classmethod
    def InitFromObj(cls, eventType2):
        x = EventType2T()
        x._UnPack(eventType2)
        return x

    # EventType2T
    def _UnPack(self, eventType2):
        if eventType2 is None:
            return
        self.eventCounter = eventType2.EventCounter()

    # EventType2T
    def Pack(self, builder):
        EventType2Start(builder)
        EventType2AddEventCounter(builder, self.eventCounter)
        eventType2 = EventType2End(builder)
        return eventType2
