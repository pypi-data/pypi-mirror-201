# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# request structure for the ResetAllMotionObjects nodes
class SysCmdReset(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsSysCmdReset(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SysCmdReset()
        x.Init(buf, n + offset)
        return x

    # SysCmdReset
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # type of the system reset request
    # SysCmdReset
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def SysCmdResetStart(builder): builder.StartObject(1)
def SysCmdResetAddType(builder, type): builder.PrependInt8Slot(0, type, 0)
def SysCmdResetEnd(builder): return builder.EndObject()


class SysCmdResetT(object):

    # SysCmdResetT
    def __init__(self):
        self.type = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        sysCmdReset = SysCmdReset()
        sysCmdReset.Init(buf, pos)
        return cls.InitFromObj(sysCmdReset)

    @classmethod
    def InitFromObj(cls, sysCmdReset):
        x = SysCmdResetT()
        x._UnPack(sysCmdReset)
        return x

    # SysCmdResetT
    def _UnPack(self, sysCmdReset):
        if sysCmdReset is None:
            return
        self.type = sysCmdReset.Type()

    # SysCmdResetT
    def Pack(self, builder):
        SysCmdResetStart(builder)
        SysCmdResetAddType(builder, self.type)
        sysCmdReset = SysCmdResetEnd(builder)
        return sysCmdReset
