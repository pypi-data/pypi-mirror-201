# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters of the axis probe command
class AxsCmdProbeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsAxsCmdProbeData(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCmdProbeData()
        x.Init(buf, n + offset)
        return x

    # AxsCmdProbeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # base param of trigger src and probe index
    # AxsCmdProbeData
    def BaseData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.AxsCmdProbeBaseData import AxsCmdProbeBaseData
            obj = AxsCmdProbeBaseData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # probe parameter for data 
    # AxsCmdProbeData
    def CfgData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.ProbeCfgData import ProbeCfgData
            obj = ProbeCfgData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def AxsCmdProbeDataStart(builder): builder.StartObject(2)
def AxsCmdProbeDataAddBaseData(builder, baseData): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(baseData), 0)
def AxsCmdProbeDataAddCfgData(builder, cfgData): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(cfgData), 0)
def AxsCmdProbeDataEnd(builder): return builder.EndObject()

import motion.core.fbtypes.AxsCmdProbeBaseData
import motion.core.fbtypes.ProbeCfgData
try:
    from typing import Optional
except:
    pass

class AxsCmdProbeDataT(object):

    # AxsCmdProbeDataT
    def __init__(self):
        self.baseData = None  # type: Optional[motion.core.fbtypes.AxsCmdProbeBaseData.AxsCmdProbeBaseDataT]
        self.cfgData = None  # type: Optional[motion.core.fbtypes.ProbeCfgData.ProbeCfgDataT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCmdProbeData = AxsCmdProbeData()
        axsCmdProbeData.Init(buf, pos)
        return cls.InitFromObj(axsCmdProbeData)

    @classmethod
    def InitFromObj(cls, axsCmdProbeData):
        x = AxsCmdProbeDataT()
        x._UnPack(axsCmdProbeData)
        return x

    # AxsCmdProbeDataT
    def _UnPack(self, axsCmdProbeData):
        if axsCmdProbeData is None:
            return
        if axsCmdProbeData.BaseData() is not None:
            self.baseData = motion.core.fbtypes.AxsCmdProbeBaseData.AxsCmdProbeBaseDataT.InitFromObj(axsCmdProbeData.BaseData())
        if axsCmdProbeData.CfgData() is not None:
            self.cfgData = motion.core.fbtypes.ProbeCfgData.ProbeCfgDataT.InitFromObj(axsCmdProbeData.CfgData())

    # AxsCmdProbeDataT
    def Pack(self, builder):
        if self.baseData is not None:
            baseData = self.baseData.Pack(builder)
        if self.cfgData is not None:
            cfgData = self.cfgData.Pack(builder)
        AxsCmdProbeDataStart(builder)
        if self.baseData is not None:
            AxsCmdProbeDataAddBaseData(builder, baseData)
        if self.cfgData is not None:
            AxsCmdProbeDataAddCfgData(builder, cfgData)
        axsCmdProbeData = AxsCmdProbeDataEnd(builder)
        return axsCmdProbeData
