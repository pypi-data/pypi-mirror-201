# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters for the command option SafeArea (monitoring of safe zones and work areas) for kinematics
class KinCmdOptAxsDynLimData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsKinCmdOptAxsDynLimData(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCmdOptAxsDynLimData()
        x.Init(buf, n + offset)
        return x

    # KinCmdOptAxsDynLimData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # name of the kinematics axis, that dynamic limits should be reduced
    # KinCmdOptAxsDynLimData
    def AxsName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dynamic limits for the following motion commands for this axis (optional)
    # leave it out to disable the command option
    # KinCmdOptAxsDynLimData
    def Lim(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.DynamicLimits import DynamicLimits
            obj = DynamicLimits()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def KinCmdOptAxsDynLimDataStart(builder): builder.StartObject(2)
def KinCmdOptAxsDynLimDataAddAxsName(builder, axsName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(axsName), 0)
def KinCmdOptAxsDynLimDataAddLim(builder, lim): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(lim), 0)
def KinCmdOptAxsDynLimDataEnd(builder): return builder.EndObject()

import motion.core.fbtypes.DynamicLimits
try:
    from typing import Optional
except:
    pass

class KinCmdOptAxsDynLimDataT(object):

    # KinCmdOptAxsDynLimDataT
    def __init__(self):
        self.axsName = None  # type: str
        self.lim = None  # type: Optional[motion.core.fbtypes.DynamicLimits.DynamicLimitsT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinCmdOptAxsDynLimData = KinCmdOptAxsDynLimData()
        kinCmdOptAxsDynLimData.Init(buf, pos)
        return cls.InitFromObj(kinCmdOptAxsDynLimData)

    @classmethod
    def InitFromObj(cls, kinCmdOptAxsDynLimData):
        x = KinCmdOptAxsDynLimDataT()
        x._UnPack(kinCmdOptAxsDynLimData)
        return x

    # KinCmdOptAxsDynLimDataT
    def _UnPack(self, kinCmdOptAxsDynLimData):
        if kinCmdOptAxsDynLimData is None:
            return
        self.axsName = kinCmdOptAxsDynLimData.AxsName()
        if kinCmdOptAxsDynLimData.Lim() is not None:
            self.lim = motion.core.fbtypes.DynamicLimits.DynamicLimitsT.InitFromObj(kinCmdOptAxsDynLimData.Lim())

    # KinCmdOptAxsDynLimDataT
    def Pack(self, builder):
        if self.axsName is not None:
            axsName = builder.CreateString(self.axsName)
        if self.lim is not None:
            lim = self.lim.Pack(builder)
        KinCmdOptAxsDynLimDataStart(builder)
        if self.axsName is not None:
            KinCmdOptAxsDynLimDataAddAxsName(builder, axsName)
        if self.lim is not None:
            KinCmdOptAxsDynLimDataAddLim(builder, lim)
        kinCmdOptAxsDynLimData = KinCmdOptAxsDynLimDataEnd(builder)
        return kinCmdOptAxsDynLimData
