# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# DEPRECATED; Do not use! Values in this structure are ignored.
# common configuration of orientation. Effective radius as factor for the relation between position to orientation.
class KinOriRadius(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsKinOriRadius(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinOriRadius()
        x.Init(buf, n + offset)
        return x

    # KinOriRadius
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # radius = (linear value)/(rotational value)
    # KinOriRadius
    def Radius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # unit for linear
    # KinOriRadius
    def UnitLin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit for rotation
    # KinOriRadius
    def UnitRot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def KinOriRadiusStart(builder): builder.StartObject(3)
def KinOriRadiusAddRadius(builder, radius): builder.PrependFloat64Slot(0, radius, 0.0)
def KinOriRadiusAddUnitLin(builder, unitLin): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(unitLin), 0)
def KinOriRadiusAddUnitRot(builder, unitRot): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(unitRot), 0)
def KinOriRadiusEnd(builder): return builder.EndObject()


class KinOriRadiusT(object):

    # KinOriRadiusT
    def __init__(self):
        self.radius = 0.0  # type: float
        self.unitLin = None  # type: str
        self.unitRot = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinOriRadius = KinOriRadius()
        kinOriRadius.Init(buf, pos)
        return cls.InitFromObj(kinOriRadius)

    @classmethod
    def InitFromObj(cls, kinOriRadius):
        x = KinOriRadiusT()
        x._UnPack(kinOriRadius)
        return x

    # KinOriRadiusT
    def _UnPack(self, kinOriRadius):
        if kinOriRadius is None:
            return
        self.radius = kinOriRadius.Radius()
        self.unitLin = kinOriRadius.UnitLin()
        self.unitRot = kinOriRadius.UnitRot()

    # KinOriRadiusT
    def Pack(self, builder):
        if self.unitLin is not None:
            unitLin = builder.CreateString(self.unitLin)
        if self.unitRot is not None:
            unitRot = builder.CreateString(self.unitRot)
        KinOriRadiusStart(builder)
        KinOriRadiusAddRadius(builder, self.radius)
        if self.unitLin is not None:
            KinOriRadiusAddUnitLin(builder, unitLin)
        if self.unitRot is not None:
            KinOriRadiusAddUnitRot(builder, unitRot)
        kinOriRadius = KinOriRadiusEnd(builder)
        return kinOriRadius
