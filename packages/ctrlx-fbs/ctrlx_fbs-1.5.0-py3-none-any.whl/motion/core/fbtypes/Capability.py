# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Response for a single capability
class Capability(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCapability(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Capability()
        x.Init(buf, n + offset)
        return x

    # Capability
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # how many items are allowed by the system or the ressource? (when true/false then 1 represents true and 0 represents false)
    # Capability
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # in case of count==0: get here the main diagnosis code, why the capability is missing
    # Capability
    def MainDiag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # in case of count==0: get here the detail diagnosis code, why the capability is missing
    # Capability
    def DetailDiag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # in case of count==0: get here additional information text, why the capability is missing
    # Capability
    def AddInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def CapabilityStart(builder): builder.StartObject(4)
def CapabilityAddCount(builder, count): builder.PrependUint32Slot(0, count, 0)
def CapabilityAddMainDiag(builder, mainDiag): builder.PrependUint32Slot(1, mainDiag, 0)
def CapabilityAddDetailDiag(builder, detailDiag): builder.PrependUint32Slot(2, detailDiag, 0)
def CapabilityAddAddInfo(builder, addInfo): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(addInfo), 0)
def CapabilityEnd(builder): return builder.EndObject()


class CapabilityT(object):

    # CapabilityT
    def __init__(self):
        self.count = 0  # type: int
        self.mainDiag = 0  # type: int
        self.detailDiag = 0  # type: int
        self.addInfo = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        capability = Capability()
        capability.Init(buf, pos)
        return cls.InitFromObj(capability)

    @classmethod
    def InitFromObj(cls, capability):
        x = CapabilityT()
        x._UnPack(capability)
        return x

    # CapabilityT
    def _UnPack(self, capability):
        if capability is None:
            return
        self.count = capability.Count()
        self.mainDiag = capability.MainDiag()
        self.detailDiag = capability.DetailDiag()
        self.addInfo = capability.AddInfo()

    # CapabilityT
    def Pack(self, builder):
        if self.addInfo is not None:
            addInfo = builder.CreateString(self.addInfo)
        CapabilityStart(builder)
        CapabilityAddCount(builder, self.count)
        CapabilityAddMainDiag(builder, self.mainDiag)
        CapabilityAddDetailDiag(builder, self.detailDiag)
        if self.addInfo is not None:
            CapabilityAddAddInfo(builder, addInfo)
        capability = CapabilityEnd(builder)
        return capability
