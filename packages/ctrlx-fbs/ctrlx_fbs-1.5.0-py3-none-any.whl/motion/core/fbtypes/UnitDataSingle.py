# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# informations of a single unit, that is supported by the system
class UnitDataSingle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsUnitDataSingle(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UnitDataSingle()
        x.Init(buf, n + offset)
        return x

    # UnitDataSingle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # name of the unit
    # UnitDataSingle
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit object type (linear/rotational/any)
    # UnitDataSingle
    def UnitObjType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit value type (position, velocity, force, time, ...)
    # UnitDataSingle
    def UnitValueType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # abbreviation of the unit (as it will being used in flatbuffers and files)
    # UnitDataSingle
    def Abbreviation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # URI abbreviation of the unit (as it will being used in datalayer paths)
    # UnitDataSingle
    def AbbreviationURI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # is this a default value, that will be set, when the axis/kinematics is created?
    # UnitDataSingle
    def IsDefault(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def UnitDataSingleStart(builder): builder.StartObject(6)
def UnitDataSingleAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def UnitDataSingleAddUnitObjType(builder, unitObjType): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(unitObjType), 0)
def UnitDataSingleAddUnitValueType(builder, unitValueType): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(unitValueType), 0)
def UnitDataSingleAddAbbreviation(builder, abbreviation): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(abbreviation), 0)
def UnitDataSingleAddAbbreviationURI(builder, abbreviationURI): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(abbreviationURI), 0)
def UnitDataSingleAddIsDefault(builder, isDefault): builder.PrependBoolSlot(5, isDefault, 0)
def UnitDataSingleEnd(builder): return builder.EndObject()


class UnitDataSingleT(object):

    # UnitDataSingleT
    def __init__(self):
        self.name = None  # type: str
        self.unitObjType = None  # type: str
        self.unitValueType = None  # type: str
        self.abbreviation = None  # type: str
        self.abbreviationURI = None  # type: str
        self.isDefault = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        unitDataSingle = UnitDataSingle()
        unitDataSingle.Init(buf, pos)
        return cls.InitFromObj(unitDataSingle)

    @classmethod
    def InitFromObj(cls, unitDataSingle):
        x = UnitDataSingleT()
        x._UnPack(unitDataSingle)
        return x

    # UnitDataSingleT
    def _UnPack(self, unitDataSingle):
        if unitDataSingle is None:
            return
        self.name = unitDataSingle.Name()
        self.unitObjType = unitDataSingle.UnitObjType()
        self.unitValueType = unitDataSingle.UnitValueType()
        self.abbreviation = unitDataSingle.Abbreviation()
        self.abbreviationURI = unitDataSingle.AbbreviationURI()
        self.isDefault = unitDataSingle.IsDefault()

    # UnitDataSingleT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.unitObjType is not None:
            unitObjType = builder.CreateString(self.unitObjType)
        if self.unitValueType is not None:
            unitValueType = builder.CreateString(self.unitValueType)
        if self.abbreviation is not None:
            abbreviation = builder.CreateString(self.abbreviation)
        if self.abbreviationURI is not None:
            abbreviationURI = builder.CreateString(self.abbreviationURI)
        UnitDataSingleStart(builder)
        if self.name is not None:
            UnitDataSingleAddName(builder, name)
        if self.unitObjType is not None:
            UnitDataSingleAddUnitObjType(builder, unitObjType)
        if self.unitValueType is not None:
            UnitDataSingleAddUnitValueType(builder, unitValueType)
        if self.abbreviation is not None:
            UnitDataSingleAddAbbreviation(builder, abbreviation)
        if self.abbreviationURI is not None:
            UnitDataSingleAddAbbreviationURI(builder, abbreviationURI)
        UnitDataSingleAddIsDefault(builder, self.isDefault)
        unitDataSingle = UnitDataSingleEnd(builder)
        return unitDataSingle
