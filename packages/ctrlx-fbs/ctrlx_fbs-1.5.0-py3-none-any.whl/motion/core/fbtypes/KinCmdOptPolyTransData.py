# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters for the command option PolyTrans (inserting polynomial commands between successively move commands) for kinematics
class KinCmdOptPolyTransData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsKinCmdOptPolyTransData(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCmdOptPolyTransData()
        x.Init(buf, n + offset)
        return x

    # KinCmdOptPolyTransData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # permanent type (e.g. "PermOn")
    # KinCmdOptPolyTransData
    def PermType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # optional distance D1 (distance to shorten the start of the precorner, must be greater than zero)
    # when dist1 is greater then zero, also dist2 must be greater than zero; eps must not be set in this case (or equal zero)
    # KinCmdOptPolyTransData
    def Dist1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # optional distance D2 (distance to shorten the start of the postcorner, must be greater than zero)
    # when dist2 is greater then zero, also dist1 must be greater than zero; eps must not be set in this case (or equal zero)
    # KinCmdOptPolyTransData
    def Dist2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # optional distance EPS (maximum permissible tolerance eps, must be greater than zero)
    # when eps is greater then zero, than dist1 and dist2 should not be set (or equal zero)
    # KinCmdOptPolyTransData
    def Eps(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def KinCmdOptPolyTransDataStart(builder): builder.StartObject(4)
def KinCmdOptPolyTransDataAddPermType(builder, permType): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(permType), 0)
def KinCmdOptPolyTransDataAddDist1(builder, dist1): builder.PrependFloat64Slot(1, dist1, 0.0)
def KinCmdOptPolyTransDataAddDist2(builder, dist2): builder.PrependFloat64Slot(2, dist2, 0.0)
def KinCmdOptPolyTransDataAddEps(builder, eps): builder.PrependFloat64Slot(3, eps, 0.0)
def KinCmdOptPolyTransDataEnd(builder): return builder.EndObject()


class KinCmdOptPolyTransDataT(object):

    # KinCmdOptPolyTransDataT
    def __init__(self):
        self.permType = None  # type: str
        self.dist1 = 0.0  # type: float
        self.dist2 = 0.0  # type: float
        self.eps = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinCmdOptPolyTransData = KinCmdOptPolyTransData()
        kinCmdOptPolyTransData.Init(buf, pos)
        return cls.InitFromObj(kinCmdOptPolyTransData)

    @classmethod
    def InitFromObj(cls, kinCmdOptPolyTransData):
        x = KinCmdOptPolyTransDataT()
        x._UnPack(kinCmdOptPolyTransData)
        return x

    # KinCmdOptPolyTransDataT
    def _UnPack(self, kinCmdOptPolyTransData):
        if kinCmdOptPolyTransData is None:
            return
        self.permType = kinCmdOptPolyTransData.PermType()
        self.dist1 = kinCmdOptPolyTransData.Dist1()
        self.dist2 = kinCmdOptPolyTransData.Dist2()
        self.eps = kinCmdOptPolyTransData.Eps()

    # KinCmdOptPolyTransDataT
    def Pack(self, builder):
        if self.permType is not None:
            permType = builder.CreateString(self.permType)
        KinCmdOptPolyTransDataStart(builder)
        if self.permType is not None:
            KinCmdOptPolyTransDataAddPermType(builder, permType)
        KinCmdOptPolyTransDataAddDist1(builder, self.dist1)
        KinCmdOptPolyTransDataAddDist2(builder, self.dist2)
        KinCmdOptPolyTransDataAddEps(builder, self.eps)
        kinCmdOptPolyTransData = KinCmdOptPolyTransDataEnd(builder)
        return kinCmdOptPolyTransData
