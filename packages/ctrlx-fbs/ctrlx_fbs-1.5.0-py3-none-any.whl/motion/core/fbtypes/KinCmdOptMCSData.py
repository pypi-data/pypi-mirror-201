# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters for the command option MCS (machine coordinate system a.k.a. joint transformation) for kinematics
class KinCmdOptMCSData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsKinCmdOptMCSData(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCmdOptMCSData()
        x.Init(buf, n + offset)
        return x

    # KinCmdOptMCSData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # permanent type (e.g. "PermOn")
    # KinCmdOptMCSData
    def PermType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # name of the joint transformation set that should become active
    # KinCmdOptMCSData
    def SetName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def KinCmdOptMCSDataStart(builder): builder.StartObject(2)
def KinCmdOptMCSDataAddPermType(builder, permType): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(permType), 0)
def KinCmdOptMCSDataAddSetName(builder, setName): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(setName), 0)
def KinCmdOptMCSDataEnd(builder): return builder.EndObject()


class KinCmdOptMCSDataT(object):

    # KinCmdOptMCSDataT
    def __init__(self):
        self.permType = None  # type: str
        self.setName = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinCmdOptMCSData = KinCmdOptMCSData()
        kinCmdOptMCSData.Init(buf, pos)
        return cls.InitFromObj(kinCmdOptMCSData)

    @classmethod
    def InitFromObj(cls, kinCmdOptMCSData):
        x = KinCmdOptMCSDataT()
        x._UnPack(kinCmdOptMCSData)
        return x

    # KinCmdOptMCSDataT
    def _UnPack(self, kinCmdOptMCSData):
        if kinCmdOptMCSData is None:
            return
        self.permType = kinCmdOptMCSData.PermType()
        self.setName = kinCmdOptMCSData.SetName()

    # KinCmdOptMCSDataT
    def Pack(self, builder):
        if self.permType is not None:
            permType = builder.CreateString(self.permType)
        if self.setName is not None:
            setName = builder.CreateString(self.setName)
        KinCmdOptMCSDataStart(builder)
        if self.permType is not None:
            KinCmdOptMCSDataAddPermType(builder, permType)
        if self.setName is not None:
            KinCmdOptMCSDataAddSetName(builder, setName)
        kinCmdOptMCSData = KinCmdOptMCSDataEnd(builder)
        return kinCmdOptMCSData
