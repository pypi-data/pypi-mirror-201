# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters of the axis velocity command
class AxsCmdVelData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsAxsCmdVelData(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCmdVelData()
        x.Init(buf, n + offset)
        return x

    # AxsCmdVelData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # commanded target velocity (can be negative)
    # AxsCmdVelData
    def AxsVel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # should this command switch/stay the drive to velocity mode (or switch/stay to position mode)?
    # AxsCmdVelData
    def DriveVelMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # should this be a buffered command?
    # AxsCmdVelData
    def Buffered(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # dynamic limits for the motion of this command
    # AxsCmdVelData
    def Lim(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.DynamicLimits import DynamicLimits
            obj = DynamicLimits()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def AxsCmdVelDataStart(builder): builder.StartObject(4)
def AxsCmdVelDataAddAxsVel(builder, axsVel): builder.PrependFloat64Slot(0, axsVel, 0.0)
def AxsCmdVelDataAddDriveVelMode(builder, driveVelMode): builder.PrependBoolSlot(1, driveVelMode, 0)
def AxsCmdVelDataAddBuffered(builder, buffered): builder.PrependBoolSlot(2, buffered, 0)
def AxsCmdVelDataAddLim(builder, lim): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(lim), 0)
def AxsCmdVelDataEnd(builder): return builder.EndObject()

import motion.core.fbtypes.DynamicLimits
try:
    from typing import Optional
except:
    pass

class AxsCmdVelDataT(object):

    # AxsCmdVelDataT
    def __init__(self):
        self.axsVel = 0.0  # type: float
        self.driveVelMode = False  # type: bool
        self.buffered = False  # type: bool
        self.lim = None  # type: Optional[motion.core.fbtypes.DynamicLimits.DynamicLimitsT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCmdVelData = AxsCmdVelData()
        axsCmdVelData.Init(buf, pos)
        return cls.InitFromObj(axsCmdVelData)

    @classmethod
    def InitFromObj(cls, axsCmdVelData):
        x = AxsCmdVelDataT()
        x._UnPack(axsCmdVelData)
        return x

    # AxsCmdVelDataT
    def _UnPack(self, axsCmdVelData):
        if axsCmdVelData is None:
            return
        self.axsVel = axsCmdVelData.AxsVel()
        self.driveVelMode = axsCmdVelData.DriveVelMode()
        self.buffered = axsCmdVelData.Buffered()
        if axsCmdVelData.Lim() is not None:
            self.lim = motion.core.fbtypes.DynamicLimits.DynamicLimitsT.InitFromObj(axsCmdVelData.Lim())

    # AxsCmdVelDataT
    def Pack(self, builder):
        if self.lim is not None:
            lim = self.lim.Pack(builder)
        AxsCmdVelDataStart(builder)
        AxsCmdVelDataAddAxsVel(builder, self.axsVel)
        AxsCmdVelDataAddDriveVelMode(builder, self.driveVelMode)
        AxsCmdVelDataAddBuffered(builder, self.buffered)
        if self.lim is not None:
            AxsCmdVelDataAddLim(builder, lim)
        axsCmdVelData = AxsCmdVelDataEnd(builder)
        return axsCmdVelData
