# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# common axis properties for a single axis
class AxsCfgProperties(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsAxsCfgProperties(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCfgProperties()
        x.Init(buf, n + offset)
        return x

    # AxsCfgProperties
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # name of the axis type (e.g. "LINEAR")
    # AxsCfgProperties
    def AxsType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # is this a modulo axis?
    # AxsCfgProperties
    def Modulo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # the modulo value, if the axis is a modulo axis
    # AxsCfgProperties
    def ModuloValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # unit of moduloValue
    # AxsCfgProperties
    def ModuloValueUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def AxsCfgPropertiesStart(builder): builder.StartObject(4)
def AxsCfgPropertiesAddAxsType(builder, axsType): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(axsType), 0)
def AxsCfgPropertiesAddModulo(builder, modulo): builder.PrependBoolSlot(1, modulo, 0)
def AxsCfgPropertiesAddModuloValue(builder, moduloValue): builder.PrependFloat64Slot(2, moduloValue, 0.0)
def AxsCfgPropertiesAddModuloValueUnit(builder, moduloValueUnit): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(moduloValueUnit), 0)
def AxsCfgPropertiesEnd(builder): return builder.EndObject()


class AxsCfgPropertiesT(object):

    # AxsCfgPropertiesT
    def __init__(self):
        self.axsType = None  # type: str
        self.modulo = False  # type: bool
        self.moduloValue = 0.0  # type: float
        self.moduloValueUnit = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCfgProperties = AxsCfgProperties()
        axsCfgProperties.Init(buf, pos)
        return cls.InitFromObj(axsCfgProperties)

    @classmethod
    def InitFromObj(cls, axsCfgProperties):
        x = AxsCfgPropertiesT()
        x._UnPack(axsCfgProperties)
        return x

    # AxsCfgPropertiesT
    def _UnPack(self, axsCfgProperties):
        if axsCfgProperties is None:
            return
        self.axsType = axsCfgProperties.AxsType()
        self.modulo = axsCfgProperties.Modulo()
        self.moduloValue = axsCfgProperties.ModuloValue()
        self.moduloValueUnit = axsCfgProperties.ModuloValueUnit()

    # AxsCfgPropertiesT
    def Pack(self, builder):
        if self.axsType is not None:
            axsType = builder.CreateString(self.axsType)
        if self.moduloValueUnit is not None:
            moduloValueUnit = builder.CreateString(self.moduloValueUnit)
        AxsCfgPropertiesStart(builder)
        if self.axsType is not None:
            AxsCfgPropertiesAddAxsType(builder, axsType)
        AxsCfgPropertiesAddModulo(builder, self.modulo)
        AxsCfgPropertiesAddModuloValue(builder, self.moduloValue)
        if self.moduloValueUnit is not None:
            AxsCfgPropertiesAddModuloValueUnit(builder, moduloValueUnit)
        axsCfgProperties = AxsCfgPropertiesEnd(builder)
        return axsCfgProperties
