# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters for the command option blending for kinematics
class KinCmdOptBlendData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsKinCmdOptBlendData(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCmdOptBlendData()
        x.Init(buf, n + offset)
        return x

    # KinCmdOptBlendData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # permanent type (e.g. "Once")
    # KinCmdOptBlendData
    def PermType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # distance D1 (refer to the manual, should be greater than zero)
    # KinCmdOptBlendData
    def Dist1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # distance D2 (refer to the manual, should be greater than zero)
    # KinCmdOptBlendData
    def Dist2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def KinCmdOptBlendDataStart(builder): builder.StartObject(3)
def KinCmdOptBlendDataAddPermType(builder, permType): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(permType), 0)
def KinCmdOptBlendDataAddDist1(builder, dist1): builder.PrependFloat64Slot(1, dist1, 0.0)
def KinCmdOptBlendDataAddDist2(builder, dist2): builder.PrependFloat64Slot(2, dist2, 0.0)
def KinCmdOptBlendDataEnd(builder): return builder.EndObject()


class KinCmdOptBlendDataT(object):

    # KinCmdOptBlendDataT
    def __init__(self):
        self.permType = None  # type: str
        self.dist1 = 0.0  # type: float
        self.dist2 = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinCmdOptBlendData = KinCmdOptBlendData()
        kinCmdOptBlendData.Init(buf, pos)
        return cls.InitFromObj(kinCmdOptBlendData)

    @classmethod
    def InitFromObj(cls, kinCmdOptBlendData):
        x = KinCmdOptBlendDataT()
        x._UnPack(kinCmdOptBlendData)
        return x

    # KinCmdOptBlendDataT
    def _UnPack(self, kinCmdOptBlendData):
        if kinCmdOptBlendData is None:
            return
        self.permType = kinCmdOptBlendData.PermType()
        self.dist1 = kinCmdOptBlendData.Dist1()
        self.dist2 = kinCmdOptBlendData.Dist2()

    # KinCmdOptBlendDataT
    def Pack(self, builder):
        if self.permType is not None:
            permType = builder.CreateString(self.permType)
        KinCmdOptBlendDataStart(builder)
        if self.permType is not None:
            KinCmdOptBlendDataAddPermType(builder, permType)
        KinCmdOptBlendDataAddDist1(builder, self.dist1)
        KinCmdOptBlendDataAddDist2(builder, self.dist2)
        kinCmdOptBlendData = KinCmdOptBlendDataEnd(builder)
        return kinCmdOptBlendData
