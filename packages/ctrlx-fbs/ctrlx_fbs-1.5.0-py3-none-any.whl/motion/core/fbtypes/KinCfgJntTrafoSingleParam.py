# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration of a single parameter of a joint transformation
class KinCfgJntTrafoSingleParam(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsKinCfgJntTrafoSingleParam(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCfgJntTrafoSingleParam()
        x.Init(buf, n + offset)
        return x

    # KinCfgJntTrafoSingleParam
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # name of the parameter
    # KinCfgJntTrafoSingleParam
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # value of the parameter (when it's a double value)
    # KinCfgJntTrafoSingleParam
    def ValueDouble(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # value of the parameter (when it's a integer value)
    # KinCfgJntTrafoSingleParam
    def ValueInt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # value of the parameter (when it's a string value)
    # KinCfgJntTrafoSingleParam
    def ValueString(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of the parameter
    # KinCfgJntTrafoSingleParam
    def Unit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def KinCfgJntTrafoSingleParamStart(builder): builder.StartObject(5)
def KinCfgJntTrafoSingleParamAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def KinCfgJntTrafoSingleParamAddValueDouble(builder, valueDouble): builder.PrependFloat64Slot(1, valueDouble, 0.0)
def KinCfgJntTrafoSingleParamAddValueInt(builder, valueInt): builder.PrependInt64Slot(2, valueInt, 0)
def KinCfgJntTrafoSingleParamAddValueString(builder, valueString): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(valueString), 0)
def KinCfgJntTrafoSingleParamAddUnit(builder, unit): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(unit), 0)
def KinCfgJntTrafoSingleParamEnd(builder): return builder.EndObject()


class KinCfgJntTrafoSingleParamT(object):

    # KinCfgJntTrafoSingleParamT
    def __init__(self):
        self.name = None  # type: str
        self.valueDouble = 0.0  # type: float
        self.valueInt = 0  # type: int
        self.valueString = None  # type: str
        self.unit = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinCfgJntTrafoSingleParam = KinCfgJntTrafoSingleParam()
        kinCfgJntTrafoSingleParam.Init(buf, pos)
        return cls.InitFromObj(kinCfgJntTrafoSingleParam)

    @classmethod
    def InitFromObj(cls, kinCfgJntTrafoSingleParam):
        x = KinCfgJntTrafoSingleParamT()
        x._UnPack(kinCfgJntTrafoSingleParam)
        return x

    # KinCfgJntTrafoSingleParamT
    def _UnPack(self, kinCfgJntTrafoSingleParam):
        if kinCfgJntTrafoSingleParam is None:
            return
        self.name = kinCfgJntTrafoSingleParam.Name()
        self.valueDouble = kinCfgJntTrafoSingleParam.ValueDouble()
        self.valueInt = kinCfgJntTrafoSingleParam.ValueInt()
        self.valueString = kinCfgJntTrafoSingleParam.ValueString()
        self.unit = kinCfgJntTrafoSingleParam.Unit()

    # KinCfgJntTrafoSingleParamT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.valueString is not None:
            valueString = builder.CreateString(self.valueString)
        if self.unit is not None:
            unit = builder.CreateString(self.unit)
        KinCfgJntTrafoSingleParamStart(builder)
        if self.name is not None:
            KinCfgJntTrafoSingleParamAddName(builder, name)
        KinCfgJntTrafoSingleParamAddValueDouble(builder, self.valueDouble)
        KinCfgJntTrafoSingleParamAddValueInt(builder, self.valueInt)
        if self.valueString is not None:
            KinCfgJntTrafoSingleParamAddValueString(builder, valueString)
        if self.unit is not None:
            KinCfgJntTrafoSingleParamAddUnit(builder, unit)
        kinCfgJntTrafoSingleParam = KinCfgJntTrafoSingleParamEnd(builder)
        return kinCfgJntTrafoSingleParam
