# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters for the contour command for a kinematics
class KinCmdContourData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsKinCmdContourData(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCmdContourData()
        x.Init(buf, n + offset)
        return x

    # KinCmdContourData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # is this the start of the contour? 
    # KinCmdContourData
    def IsStart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return True

    # set the number of commands that should be prepared completely (only relevant when isStart=true)
    # KinCmdContourData
    def PrepCmds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def KinCmdContourDataStart(builder): builder.StartObject(2)
def KinCmdContourDataAddIsStart(builder, isStart): builder.PrependBoolSlot(0, isStart, 1)
def KinCmdContourDataAddPrepCmds(builder, prepCmds): builder.PrependUint32Slot(1, prepCmds, 0)
def KinCmdContourDataEnd(builder): return builder.EndObject()


class KinCmdContourDataT(object):

    # KinCmdContourDataT
    def __init__(self):
        self.isStart = True  # type: bool
        self.prepCmds = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinCmdContourData = KinCmdContourData()
        kinCmdContourData.Init(buf, pos)
        return cls.InitFromObj(kinCmdContourData)

    @classmethod
    def InitFromObj(cls, kinCmdContourData):
        x = KinCmdContourDataT()
        x._UnPack(kinCmdContourData)
        return x

    # KinCmdContourDataT
    def _UnPack(self, kinCmdContourData):
        if kinCmdContourData is None:
            return
        self.isStart = kinCmdContourData.IsStart()
        self.prepCmds = kinCmdContourData.PrepCmds()

    # KinCmdContourDataT
    def Pack(self, builder):
        KinCmdContourDataStart(builder)
        KinCmdContourDataAddIsStart(builder, self.isStart)
        KinCmdContourDataAddPrepCmds(builder, self.prepCmds)
        kinCmdContourData = KinCmdContourDataEnd(builder)
        return kinCmdContourData
