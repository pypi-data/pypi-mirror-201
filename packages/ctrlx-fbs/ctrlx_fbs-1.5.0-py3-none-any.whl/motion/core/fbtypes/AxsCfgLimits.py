# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configured limits of a single axis
class AxsCfgLimits(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsAxsCfgLimits(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCfgLimits()
        x.Init(buf, n + offset)
        return x

    # AxsCfgLimits
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # minimum position limit (should be less than maximum position limit)
    # AxsCfgLimits
    def PosMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # maximum position limit (should be greater than minimum position limit)
    # AxsCfgLimits
    def PosMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # absolute minimum velocity limit (should be greater than zero)
    # AxsCfgLimits
    def VelPos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # absolute maximum velocity limit (should be greater than zero)
    # AxsCfgLimits
    def VelNeg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # absolute acceleration limit (should be greater than zero)
    # AxsCfgLimits
    def Acc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # absolute deceleration limit (should be greater than zero)
    # AxsCfgLimits
    def Dec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # absolute acceleration jerk limit (should be greater than zero OR zero for not jerk limited motion)
    # AxsCfgLimits
    def JrkAcc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # absolute deceleration jerk limit (should be greater than zero OR zero for not jerk limited motion)
    # AxsCfgLimits
    def JrkDec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # unit of posMin
    # AxsCfgLimits
    def PosMinUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of posMax
    # AxsCfgLimits
    def PosMaxUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of velPos
    # AxsCfgLimits
    def VelPosUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of velNeg
    # AxsCfgLimits
    def VelNegUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of acc
    # AxsCfgLimits
    def AccUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of dec
    # AxsCfgLimits
    def DecUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of jrkAcc
    # AxsCfgLimits
    def JrkAccUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # unit of jrkDec
    # AxsCfgLimits
    def JrkDecUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def AxsCfgLimitsStart(builder): builder.StartObject(16)
def AxsCfgLimitsAddPosMin(builder, posMin): builder.PrependFloat64Slot(0, posMin, 0.0)
def AxsCfgLimitsAddPosMax(builder, posMax): builder.PrependFloat64Slot(1, posMax, 0.0)
def AxsCfgLimitsAddVelPos(builder, velPos): builder.PrependFloat64Slot(2, velPos, 0.0)
def AxsCfgLimitsAddVelNeg(builder, velNeg): builder.PrependFloat64Slot(3, velNeg, 0.0)
def AxsCfgLimitsAddAcc(builder, acc): builder.PrependFloat64Slot(4, acc, 0.0)
def AxsCfgLimitsAddDec(builder, dec): builder.PrependFloat64Slot(5, dec, 0.0)
def AxsCfgLimitsAddJrkAcc(builder, jrkAcc): builder.PrependFloat64Slot(6, jrkAcc, 0.0)
def AxsCfgLimitsAddJrkDec(builder, jrkDec): builder.PrependFloat64Slot(7, jrkDec, 0.0)
def AxsCfgLimitsAddPosMinUnit(builder, posMinUnit): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(posMinUnit), 0)
def AxsCfgLimitsAddPosMaxUnit(builder, posMaxUnit): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(posMaxUnit), 0)
def AxsCfgLimitsAddVelPosUnit(builder, velPosUnit): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(velPosUnit), 0)
def AxsCfgLimitsAddVelNegUnit(builder, velNegUnit): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(velNegUnit), 0)
def AxsCfgLimitsAddAccUnit(builder, accUnit): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(accUnit), 0)
def AxsCfgLimitsAddDecUnit(builder, decUnit): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(decUnit), 0)
def AxsCfgLimitsAddJrkAccUnit(builder, jrkAccUnit): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(jrkAccUnit), 0)
def AxsCfgLimitsAddJrkDecUnit(builder, jrkDecUnit): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(jrkDecUnit), 0)
def AxsCfgLimitsEnd(builder): return builder.EndObject()


class AxsCfgLimitsT(object):

    # AxsCfgLimitsT
    def __init__(self):
        self.posMin = 0.0  # type: float
        self.posMax = 0.0  # type: float
        self.velPos = 0.0  # type: float
        self.velNeg = 0.0  # type: float
        self.acc = 0.0  # type: float
        self.dec = 0.0  # type: float
        self.jrkAcc = 0.0  # type: float
        self.jrkDec = 0.0  # type: float
        self.posMinUnit = None  # type: str
        self.posMaxUnit = None  # type: str
        self.velPosUnit = None  # type: str
        self.velNegUnit = None  # type: str
        self.accUnit = None  # type: str
        self.decUnit = None  # type: str
        self.jrkAccUnit = None  # type: str
        self.jrkDecUnit = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCfgLimits = AxsCfgLimits()
        axsCfgLimits.Init(buf, pos)
        return cls.InitFromObj(axsCfgLimits)

    @classmethod
    def InitFromObj(cls, axsCfgLimits):
        x = AxsCfgLimitsT()
        x._UnPack(axsCfgLimits)
        return x

    # AxsCfgLimitsT
    def _UnPack(self, axsCfgLimits):
        if axsCfgLimits is None:
            return
        self.posMin = axsCfgLimits.PosMin()
        self.posMax = axsCfgLimits.PosMax()
        self.velPos = axsCfgLimits.VelPos()
        self.velNeg = axsCfgLimits.VelNeg()
        self.acc = axsCfgLimits.Acc()
        self.dec = axsCfgLimits.Dec()
        self.jrkAcc = axsCfgLimits.JrkAcc()
        self.jrkDec = axsCfgLimits.JrkDec()
        self.posMinUnit = axsCfgLimits.PosMinUnit()
        self.posMaxUnit = axsCfgLimits.PosMaxUnit()
        self.velPosUnit = axsCfgLimits.VelPosUnit()
        self.velNegUnit = axsCfgLimits.VelNegUnit()
        self.accUnit = axsCfgLimits.AccUnit()
        self.decUnit = axsCfgLimits.DecUnit()
        self.jrkAccUnit = axsCfgLimits.JrkAccUnit()
        self.jrkDecUnit = axsCfgLimits.JrkDecUnit()

    # AxsCfgLimitsT
    def Pack(self, builder):
        if self.posMinUnit is not None:
            posMinUnit = builder.CreateString(self.posMinUnit)
        if self.posMaxUnit is not None:
            posMaxUnit = builder.CreateString(self.posMaxUnit)
        if self.velPosUnit is not None:
            velPosUnit = builder.CreateString(self.velPosUnit)
        if self.velNegUnit is not None:
            velNegUnit = builder.CreateString(self.velNegUnit)
        if self.accUnit is not None:
            accUnit = builder.CreateString(self.accUnit)
        if self.decUnit is not None:
            decUnit = builder.CreateString(self.decUnit)
        if self.jrkAccUnit is not None:
            jrkAccUnit = builder.CreateString(self.jrkAccUnit)
        if self.jrkDecUnit is not None:
            jrkDecUnit = builder.CreateString(self.jrkDecUnit)
        AxsCfgLimitsStart(builder)
        AxsCfgLimitsAddPosMin(builder, self.posMin)
        AxsCfgLimitsAddPosMax(builder, self.posMax)
        AxsCfgLimitsAddVelPos(builder, self.velPos)
        AxsCfgLimitsAddVelNeg(builder, self.velNeg)
        AxsCfgLimitsAddAcc(builder, self.acc)
        AxsCfgLimitsAddDec(builder, self.dec)
        AxsCfgLimitsAddJrkAcc(builder, self.jrkAcc)
        AxsCfgLimitsAddJrkDec(builder, self.jrkDec)
        if self.posMinUnit is not None:
            AxsCfgLimitsAddPosMinUnit(builder, posMinUnit)
        if self.posMaxUnit is not None:
            AxsCfgLimitsAddPosMaxUnit(builder, posMaxUnit)
        if self.velPosUnit is not None:
            AxsCfgLimitsAddVelPosUnit(builder, velPosUnit)
        if self.velNegUnit is not None:
            AxsCfgLimitsAddVelNegUnit(builder, velNegUnit)
        if self.accUnit is not None:
            AxsCfgLimitsAddAccUnit(builder, accUnit)
        if self.decUnit is not None:
            AxsCfgLimitsAddDecUnit(builder, decUnit)
        if self.jrkAccUnit is not None:
            AxsCfgLimitsAddJrkAccUnit(builder, jrkAccUnit)
        if self.jrkDecUnit is not None:
            AxsCfgLimitsAddJrkDecUnit(builder, jrkDecUnit)
        axsCfgLimits = AxsCfgLimitsEnd(builder)
        return axsCfgLimits
