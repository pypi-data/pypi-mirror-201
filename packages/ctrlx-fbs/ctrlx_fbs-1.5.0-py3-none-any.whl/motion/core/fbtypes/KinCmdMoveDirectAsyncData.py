# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# parameters for the move direct asynchronous command for a kinematics
class KinCmdMoveDirectAsyncData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsKinCmdMoveDirectAsyncData(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinCmdMoveDirectAsyncData()
        x.Init(buf, n + offset)
        return x

    # KinCmdMoveDirectAsyncData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # commanded target position (or increment for relative position command)
    # KinCmdMoveDirectAsyncData
    def KinPos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # KinCmdMoveDirectAsyncData
    def KinPosAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # KinCmdMoveDirectAsyncData
    def KinPosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinCmdMoveDirectAsyncData
    def KinPosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # coordSys for commanded target position
    # KinCmdMoveDirectAsyncData
    def CoordSys(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dynamic limits factors
    # KinCmdMoveDirectAsyncData
    def DynLimFactors(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from motion.core.fbtypes.DynamicLimits import DynamicLimits
            obj = DynamicLimits()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # should this be a buffered command?
    # KinCmdMoveDirectAsyncData
    def Buffered(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return True

def KinCmdMoveDirectAsyncDataStart(builder): builder.StartObject(4)
def KinCmdMoveDirectAsyncDataAddKinPos(builder, kinPos): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(kinPos), 0)
def KinCmdMoveDirectAsyncDataStartKinPosVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def KinCmdMoveDirectAsyncDataAddCoordSys(builder, coordSys): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(coordSys), 0)
def KinCmdMoveDirectAsyncDataAddDynLimFactors(builder, dynLimFactors): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(dynLimFactors), 0)
def KinCmdMoveDirectAsyncDataAddBuffered(builder, buffered): builder.PrependBoolSlot(3, buffered, 1)
def KinCmdMoveDirectAsyncDataEnd(builder): return builder.EndObject()

import motion.core.fbtypes.DynamicLimits
try:
    from typing import List, Optional
except:
    pass

class KinCmdMoveDirectAsyncDataT(object):

    # KinCmdMoveDirectAsyncDataT
    def __init__(self):
        self.kinPos = None  # type: List[float]
        self.coordSys = None  # type: str
        self.dynLimFactors = None  # type: Optional[motion.core.fbtypes.DynamicLimits.DynamicLimitsT]
        self.buffered = True  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinCmdMoveDirectAsyncData = KinCmdMoveDirectAsyncData()
        kinCmdMoveDirectAsyncData.Init(buf, pos)
        return cls.InitFromObj(kinCmdMoveDirectAsyncData)

    @classmethod
    def InitFromObj(cls, kinCmdMoveDirectAsyncData):
        x = KinCmdMoveDirectAsyncDataT()
        x._UnPack(kinCmdMoveDirectAsyncData)
        return x

    # KinCmdMoveDirectAsyncDataT
    def _UnPack(self, kinCmdMoveDirectAsyncData):
        if kinCmdMoveDirectAsyncData is None:
            return
        if not kinCmdMoveDirectAsyncData.KinPosIsNone():
            if np is None:
                self.kinPos = []
                for i in range(kinCmdMoveDirectAsyncData.KinPosLength()):
                    self.kinPos.append(kinCmdMoveDirectAsyncData.KinPos(i))
            else:
                self.kinPos = kinCmdMoveDirectAsyncData.KinPosAsNumpy()
        self.coordSys = kinCmdMoveDirectAsyncData.CoordSys()
        if kinCmdMoveDirectAsyncData.DynLimFactors() is not None:
            self.dynLimFactors = motion.core.fbtypes.DynamicLimits.DynamicLimitsT.InitFromObj(kinCmdMoveDirectAsyncData.DynLimFactors())
        self.buffered = kinCmdMoveDirectAsyncData.Buffered()

    # KinCmdMoveDirectAsyncDataT
    def Pack(self, builder):
        if self.kinPos is not None:
            if np is not None and type(self.kinPos) is np.ndarray:
                kinPos = builder.CreateNumpyVector(self.kinPos)
            else:
                KinCmdMoveDirectAsyncDataStartKinPosVector(builder, len(self.kinPos))
                for i in reversed(range(len(self.kinPos))):
                    builder.PrependFloat64(self.kinPos[i])
                kinPos = builder.EndVector(len(self.kinPos))
        if self.coordSys is not None:
            coordSys = builder.CreateString(self.coordSys)
        if self.dynLimFactors is not None:
            dynLimFactors = self.dynLimFactors.Pack(builder)
        KinCmdMoveDirectAsyncDataStart(builder)
        if self.kinPos is not None:
            KinCmdMoveDirectAsyncDataAddKinPos(builder, kinPos)
        if self.coordSys is not None:
            KinCmdMoveDirectAsyncDataAddCoordSys(builder, coordSys)
        if self.dynLimFactors is not None:
            KinCmdMoveDirectAsyncDataAddDynLimFactors(builder, dynLimFactors)
        KinCmdMoveDirectAsyncDataAddBuffered(builder, self.buffered)
        kinCmdMoveDirectAsyncData = KinCmdMoveDirectAsyncDataEnd(builder)
        return kinCmdMoveDirectAsyncData
