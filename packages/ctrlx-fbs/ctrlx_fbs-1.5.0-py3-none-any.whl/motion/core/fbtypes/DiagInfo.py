# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# informations on the last diagnosis message of this motion object or of the system
class DiagInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsDiagInfo(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DiagInfo()
        x.Init(buf, n + offset)
        return x

    # DiagInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # main diagnosis code (refer to the diagnosis data base)
    # DiagInfo
    def MainDiagCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # detailed diagnosis code (refer to the diagnosis data base)
    # DiagInfo
    def DetailedDiagCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # name of the motion object
    # DiagInfo
    def ObjName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # URI of the motion object
    # DiagInfo
    def ObjURI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # command source, when the diagnosis refers to a command
    # DiagInfo
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # additional information on the error cause to help the user
    # DiagInfo
    def AddInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # main diagnosis code of the first error after a reset or booting (refer to the diagnosis data base)
    # DiagInfo
    def FirstMainDiagCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # detailed diagnosis code of the first error after a reset or booting (refer to the diagnosis data base)
    # DiagInfo
    def FirstDetailedDiagCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # command source of the first error after a reset or booting, when the diagnosis refers to a command
    # DiagInfo
    def FirstSource(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # additional information on the error cause to help the user of the first error after a reset or booting
    # DiagInfo
    def FirstAddInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def DiagInfoStart(builder): builder.StartObject(10)
def DiagInfoAddMainDiagCode(builder, mainDiagCode): builder.PrependUint32Slot(0, mainDiagCode, 0)
def DiagInfoAddDetailedDiagCode(builder, detailedDiagCode): builder.PrependUint32Slot(1, detailedDiagCode, 0)
def DiagInfoAddObjName(builder, objName): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(objName), 0)
def DiagInfoAddObjURI(builder, objURI): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(objURI), 0)
def DiagInfoAddSource(builder, source): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)
def DiagInfoAddAddInfo(builder, addInfo): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(addInfo), 0)
def DiagInfoAddFirstMainDiagCode(builder, firstMainDiagCode): builder.PrependUint32Slot(6, firstMainDiagCode, 0)
def DiagInfoAddFirstDetailedDiagCode(builder, firstDetailedDiagCode): builder.PrependUint32Slot(7, firstDetailedDiagCode, 0)
def DiagInfoAddFirstSource(builder, firstSource): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(firstSource), 0)
def DiagInfoAddFirstAddInfo(builder, firstAddInfo): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(firstAddInfo), 0)
def DiagInfoEnd(builder): return builder.EndObject()


class DiagInfoT(object):

    # DiagInfoT
    def __init__(self):
        self.mainDiagCode = 0  # type: int
        self.detailedDiagCode = 0  # type: int
        self.objName = None  # type: str
        self.objURI = None  # type: str
        self.source = None  # type: str
        self.addInfo = None  # type: str
        self.firstMainDiagCode = 0  # type: int
        self.firstDetailedDiagCode = 0  # type: int
        self.firstSource = None  # type: str
        self.firstAddInfo = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        diagInfo = DiagInfo()
        diagInfo.Init(buf, pos)
        return cls.InitFromObj(diagInfo)

    @classmethod
    def InitFromObj(cls, diagInfo):
        x = DiagInfoT()
        x._UnPack(diagInfo)
        return x

    # DiagInfoT
    def _UnPack(self, diagInfo):
        if diagInfo is None:
            return
        self.mainDiagCode = diagInfo.MainDiagCode()
        self.detailedDiagCode = diagInfo.DetailedDiagCode()
        self.objName = diagInfo.ObjName()
        self.objURI = diagInfo.ObjURI()
        self.source = diagInfo.Source()
        self.addInfo = diagInfo.AddInfo()
        self.firstMainDiagCode = diagInfo.FirstMainDiagCode()
        self.firstDetailedDiagCode = diagInfo.FirstDetailedDiagCode()
        self.firstSource = diagInfo.FirstSource()
        self.firstAddInfo = diagInfo.FirstAddInfo()

    # DiagInfoT
    def Pack(self, builder):
        if self.objName is not None:
            objName = builder.CreateString(self.objName)
        if self.objURI is not None:
            objURI = builder.CreateString(self.objURI)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.addInfo is not None:
            addInfo = builder.CreateString(self.addInfo)
        if self.firstSource is not None:
            firstSource = builder.CreateString(self.firstSource)
        if self.firstAddInfo is not None:
            firstAddInfo = builder.CreateString(self.firstAddInfo)
        DiagInfoStart(builder)
        DiagInfoAddMainDiagCode(builder, self.mainDiagCode)
        DiagInfoAddDetailedDiagCode(builder, self.detailedDiagCode)
        if self.objName is not None:
            DiagInfoAddObjName(builder, objName)
        if self.objURI is not None:
            DiagInfoAddObjURI(builder, objURI)
        if self.source is not None:
            DiagInfoAddSource(builder, source)
        if self.addInfo is not None:
            DiagInfoAddAddInfo(builder, addInfo)
        DiagInfoAddFirstMainDiagCode(builder, self.firstMainDiagCode)
        DiagInfoAddFirstDetailedDiagCode(builder, self.firstDetailedDiagCode)
        if self.firstSource is not None:
            DiagInfoAddFirstSource(builder, firstSource)
        if self.firstAddInfo is not None:
            DiagInfoAddFirstAddInfo(builder, firstAddInfo)
        diagInfo = DiagInfoEnd(builder)
        return diagInfo
