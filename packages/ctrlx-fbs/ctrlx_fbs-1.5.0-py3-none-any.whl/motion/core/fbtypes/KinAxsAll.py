# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# Data of all axes that are currently added to the kinematics
class KinAxsAll(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsKinAxsAll(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinAxsAll()
        x.Init(buf, n + offset)
        return x

    # KinAxsAll
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # vector of all axes that are currently added to the kinematics
    # KinAxsAll
    def Info(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.KinAxsSingle import KinAxsSingle
            obj = KinAxsSingle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KinAxsAll
    def InfoLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinAxsAll
    def InfoIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def KinAxsAllStart(builder): builder.StartObject(1)
def KinAxsAllAddInfo(builder, info): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(info), 0)
def KinAxsAllStartInfoVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KinAxsAllEnd(builder): return builder.EndObject()

import motion.core.fbtypes.KinAxsSingle
try:
    from typing import List
except:
    pass

class KinAxsAllT(object):

    # KinAxsAllT
    def __init__(self):
        self.info = None  # type: List[motion.core.fbtypes.KinAxsSingle.KinAxsSingleT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinAxsAll = KinAxsAll()
        kinAxsAll.Init(buf, pos)
        return cls.InitFromObj(kinAxsAll)

    @classmethod
    def InitFromObj(cls, kinAxsAll):
        x = KinAxsAllT()
        x._UnPack(kinAxsAll)
        return x

    # KinAxsAllT
    def _UnPack(self, kinAxsAll):
        if kinAxsAll is None:
            return
        if not kinAxsAll.InfoIsNone():
            self.info = []
            for i in range(kinAxsAll.InfoLength()):
                if kinAxsAll.Info(i) is None:
                    self.info.append(None)
                else:
                    kinAxsSingle_ = motion.core.fbtypes.KinAxsSingle.KinAxsSingleT.InitFromObj(kinAxsAll.Info(i))
                    self.info.append(kinAxsSingle_)

    # KinAxsAllT
    def Pack(self, builder):
        if self.info is not None:
            infolist = []
            for i in range(len(self.info)):
                infolist.append(self.info[i].Pack(builder))
            KinAxsAllStartInfoVector(builder, len(self.info))
            for i in reversed(range(len(self.info))):
                builder.PrependUOffsetTRelative(infolist[i])
            info = builder.EndVector(len(self.info))
        KinAxsAllStart(builder)
        if self.info is not None:
            KinAxsAllAddInfo(builder, info)
        kinAxsAll = KinAxsAllEnd(builder)
        return kinAxsAll
