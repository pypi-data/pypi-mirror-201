# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# configuration of all safe areas and work areas for the whole motion system
class SysCfgSafeAreaAll(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsSysCfgSafeAreaAll(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SysCfgSafeAreaAll()
        x.Init(buf, n + offset)
        return x

    # SysCfgSafeAreaAll
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # vector of all configured safe areas
    # SysCfgSafeAreaAll
    def SafeAreas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.SysCfgSafeArea import SysCfgSafeArea
            obj = SysCfgSafeArea()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SysCfgSafeAreaAll
    def SafeAreasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SysCfgSafeAreaAll
    def SafeAreasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def SysCfgSafeAreaAllStart(builder): builder.StartObject(1)
def SysCfgSafeAreaAllAddSafeAreas(builder, safeAreas): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(safeAreas), 0)
def SysCfgSafeAreaAllStartSafeAreasVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def SysCfgSafeAreaAllEnd(builder): return builder.EndObject()

import motion.core.fbtypes.SysCfgSafeArea
try:
    from typing import List
except:
    pass

class SysCfgSafeAreaAllT(object):

    # SysCfgSafeAreaAllT
    def __init__(self):
        self.safeAreas = None  # type: List[motion.core.fbtypes.SysCfgSafeArea.SysCfgSafeAreaT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        sysCfgSafeAreaAll = SysCfgSafeAreaAll()
        sysCfgSafeAreaAll.Init(buf, pos)
        return cls.InitFromObj(sysCfgSafeAreaAll)

    @classmethod
    def InitFromObj(cls, sysCfgSafeAreaAll):
        x = SysCfgSafeAreaAllT()
        x._UnPack(sysCfgSafeAreaAll)
        return x

    # SysCfgSafeAreaAllT
    def _UnPack(self, sysCfgSafeAreaAll):
        if sysCfgSafeAreaAll is None:
            return
        if not sysCfgSafeAreaAll.SafeAreasIsNone():
            self.safeAreas = []
            for i in range(sysCfgSafeAreaAll.SafeAreasLength()):
                if sysCfgSafeAreaAll.SafeAreas(i) is None:
                    self.safeAreas.append(None)
                else:
                    sysCfgSafeArea_ = motion.core.fbtypes.SysCfgSafeArea.SysCfgSafeAreaT.InitFromObj(sysCfgSafeAreaAll.SafeAreas(i))
                    self.safeAreas.append(sysCfgSafeArea_)

    # SysCfgSafeAreaAllT
    def Pack(self, builder):
        if self.safeAreas is not None:
            safeAreaslist = []
            for i in range(len(self.safeAreas)):
                safeAreaslist.append(self.safeAreas[i].Pack(builder))
            SysCfgSafeAreaAllStartSafeAreasVector(builder, len(self.safeAreas))
            for i in reversed(range(len(self.safeAreas))):
                builder.PrependUOffsetTRelative(safeAreaslist[i])
            safeAreas = builder.EndVector(len(self.safeAreas))
        SysCfgSafeAreaAllStart(builder)
        if self.safeAreas is not None:
            SysCfgSafeAreaAllAddSafeAreas(builder, safeAreas)
        sysCfgSafeAreaAll = SysCfgSafeAreaAllEnd(builder)
        return sysCfgSafeAreaAll
