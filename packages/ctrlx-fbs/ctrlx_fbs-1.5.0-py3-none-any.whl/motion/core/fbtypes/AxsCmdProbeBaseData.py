# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# base parameters of the axis probe and axis probe abort command
class AxsCmdProbeBaseData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsAxsCmdProbeBaseData(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AxsCmdProbeBaseData()
        x.Init(buf, n + offset)
        return x

    # AxsCmdProbeBaseData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # name of trigger source name
    # AxsCmdProbeBaseData
    def TriggerSrc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # command of probe index
    # AxsCmdProbeBaseData
    def ProbeIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def AxsCmdProbeBaseDataStart(builder): builder.StartObject(2)
def AxsCmdProbeBaseDataAddTriggerSrc(builder, triggerSrc): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(triggerSrc), 0)
def AxsCmdProbeBaseDataAddProbeIndex(builder, probeIndex): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(probeIndex), 0)
def AxsCmdProbeBaseDataEnd(builder): return builder.EndObject()


class AxsCmdProbeBaseDataT(object):

    # AxsCmdProbeBaseDataT
    def __init__(self):
        self.triggerSrc = None  # type: str
        self.probeIndex = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        axsCmdProbeBaseData = AxsCmdProbeBaseData()
        axsCmdProbeBaseData.Init(buf, pos)
        return cls.InitFromObj(axsCmdProbeBaseData)

    @classmethod
    def InitFromObj(cls, axsCmdProbeBaseData):
        x = AxsCmdProbeBaseDataT()
        x._UnPack(axsCmdProbeBaseData)
        return x

    # AxsCmdProbeBaseDataT
    def _UnPack(self, axsCmdProbeBaseData):
        if axsCmdProbeBaseData is None:
            return
        self.triggerSrc = axsCmdProbeBaseData.TriggerSrc()
        self.probeIndex = axsCmdProbeBaseData.ProbeIndex()

    # AxsCmdProbeBaseDataT
    def Pack(self, builder):
        if self.triggerSrc is not None:
            triggerSrc = builder.CreateString(self.triggerSrc)
        if self.probeIndex is not None:
            probeIndex = builder.CreateString(self.probeIndex)
        AxsCmdProbeBaseDataStart(builder)
        if self.triggerSrc is not None:
            AxsCmdProbeBaseDataAddTriggerSrc(builder, triggerSrc)
        if self.probeIndex is not None:
            AxsCmdProbeBaseDataAddProbeIndex(builder, probeIndex)
        axsCmdProbeBaseData = AxsCmdProbeBaseDataEnd(builder)
        return axsCmdProbeBaseData
