# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbtypes

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# data of a single configuration parameter of an joint transformation when reading all data of an implemented joint transformation
class KinStateJntTrafoDataAllParam(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsKinStateJntTrafoDataAllParam(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KinStateJntTrafoDataAllParam()
        x.Init(buf, n + offset)
        return x

    # KinStateJntTrafoDataAllParam
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Information of all required axes of this joint transformation
    # KinStateJntTrafoDataAllParam
    def ReqAxes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.KinStateJntTrafoDataReqAxis import KinStateJntTrafoDataReqAxis
            obj = KinStateJntTrafoDataReqAxis()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KinStateJntTrafoDataAllParam
    def ReqAxesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinStateJntTrafoDataAllParam
    def ReqAxesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # Vector of all configuration parameters of the joint transformation
    # KinStateJntTrafoDataAllParam
    def Parameter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from motion.core.fbtypes.KinStateJntTrafoDataParam import KinStateJntTrafoDataParam
            obj = KinStateJntTrafoDataParam()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KinStateJntTrafoDataAllParam
    def ParameterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KinStateJntTrafoDataAllParam
    def ParameterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def KinStateJntTrafoDataAllParamStart(builder): builder.StartObject(2)
def KinStateJntTrafoDataAllParamAddReqAxes(builder, reqAxes): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(reqAxes), 0)
def KinStateJntTrafoDataAllParamStartReqAxesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KinStateJntTrafoDataAllParamAddParameter(builder, parameter): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(parameter), 0)
def KinStateJntTrafoDataAllParamStartParameterVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KinStateJntTrafoDataAllParamEnd(builder): return builder.EndObject()

import motion.core.fbtypes.KinStateJntTrafoDataParam
import motion.core.fbtypes.KinStateJntTrafoDataReqAxis
try:
    from typing import List
except:
    pass

class KinStateJntTrafoDataAllParamT(object):

    # KinStateJntTrafoDataAllParamT
    def __init__(self):
        self.reqAxes = None  # type: List[motion.core.fbtypes.KinStateJntTrafoDataReqAxis.KinStateJntTrafoDataReqAxisT]
        self.parameter = None  # type: List[motion.core.fbtypes.KinStateJntTrafoDataParam.KinStateJntTrafoDataParamT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        kinStateJntTrafoDataAllParam = KinStateJntTrafoDataAllParam()
        kinStateJntTrafoDataAllParam.Init(buf, pos)
        return cls.InitFromObj(kinStateJntTrafoDataAllParam)

    @classmethod
    def InitFromObj(cls, kinStateJntTrafoDataAllParam):
        x = KinStateJntTrafoDataAllParamT()
        x._UnPack(kinStateJntTrafoDataAllParam)
        return x

    # KinStateJntTrafoDataAllParamT
    def _UnPack(self, kinStateJntTrafoDataAllParam):
        if kinStateJntTrafoDataAllParam is None:
            return
        if not kinStateJntTrafoDataAllParam.ReqAxesIsNone():
            self.reqAxes = []
            for i in range(kinStateJntTrafoDataAllParam.ReqAxesLength()):
                if kinStateJntTrafoDataAllParam.ReqAxes(i) is None:
                    self.reqAxes.append(None)
                else:
                    kinStateJntTrafoDataReqAxis_ = motion.core.fbtypes.KinStateJntTrafoDataReqAxis.KinStateJntTrafoDataReqAxisT.InitFromObj(kinStateJntTrafoDataAllParam.ReqAxes(i))
                    self.reqAxes.append(kinStateJntTrafoDataReqAxis_)
        if not kinStateJntTrafoDataAllParam.ParameterIsNone():
            self.parameter = []
            for i in range(kinStateJntTrafoDataAllParam.ParameterLength()):
                if kinStateJntTrafoDataAllParam.Parameter(i) is None:
                    self.parameter.append(None)
                else:
                    kinStateJntTrafoDataParam_ = motion.core.fbtypes.KinStateJntTrafoDataParam.KinStateJntTrafoDataParamT.InitFromObj(kinStateJntTrafoDataAllParam.Parameter(i))
                    self.parameter.append(kinStateJntTrafoDataParam_)

    # KinStateJntTrafoDataAllParamT
    def Pack(self, builder):
        if self.reqAxes is not None:
            reqAxeslist = []
            for i in range(len(self.reqAxes)):
                reqAxeslist.append(self.reqAxes[i].Pack(builder))
            KinStateJntTrafoDataAllParamStartReqAxesVector(builder, len(self.reqAxes))
            for i in reversed(range(len(self.reqAxes))):
                builder.PrependUOffsetTRelative(reqAxeslist[i])
            reqAxes = builder.EndVector(len(self.reqAxes))
        if self.parameter is not None:
            parameterlist = []
            for i in range(len(self.parameter)):
                parameterlist.append(self.parameter[i].Pack(builder))
            KinStateJntTrafoDataAllParamStartParameterVector(builder, len(self.parameter))
            for i in reversed(range(len(self.parameter))):
                builder.PrependUOffsetTRelative(parameterlist[i])
            parameter = builder.EndVector(len(self.parameter))
        KinStateJntTrafoDataAllParamStart(builder)
        if self.reqAxes is not None:
            KinStateJntTrafoDataAllParamAddReqAxes(builder, reqAxes)
        if self.parameter is not None:
            KinStateJntTrafoDataAllParamAddParameter(builder, parameter)
        kinStateJntTrafoDataAllParam = KinStateJntTrafoDataAllParamEnd(builder)
        return kinStateJntTrafoDataAllParam
