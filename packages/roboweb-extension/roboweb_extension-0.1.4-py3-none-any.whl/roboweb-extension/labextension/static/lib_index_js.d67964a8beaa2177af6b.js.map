{"version":3,"file":"lib_index_js.d67964a8beaa2177af6b.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACqD;AACC;AACmB;AAChC;AACc;;AAEvD,+BAA+B,mDAAM;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,KAAK,QAAQ;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA,IAAI;AACJ,yEAAyE;AACzE;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,sBAAsB;AAC5C,0CAA0C,IAAI,EAAE,MAAM,IAAI;AAC1D;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,yCAAyC,kDAAkD;AAC3F;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,eAAe,kEAAgB,EAAE,iEAAe;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,SAAS;;AAEhD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,kFAAgC;AACtC,gBAAgB,iCAAiC;AACjD;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAI,eAAe;AAC1B;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA,iEAAe,MAAM,EAAC","sources":["webpack://roboweb-extension/./lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module theme-dark-extension\n */\nimport { IThemeManager } from '@jupyterlab/apputils';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { NotebookActions, INotebookTracker } from '@jupyterlab/notebook';\nimport { Widget } from '@lumino/widgets';\nimport { ICommandPalette } from '@jupyterlab/apputils';\n\nclass AssistantSidebar extends Widget {\n  constructor() {\n    super();\n    this.id = 'assistant-panel';\n    this.addClass('assistant-panel');\n    this.title.caption = 'Assistant';\n    this.title.iconClass = 'fa fa-robot';\n  }\n}\n\nfunction waitForNonNullVariable(reader, callback) {\n  var variable = reader(); \n  if (variable !== null) {\n    callback(variable);\n  } else {\n    setTimeout(function() {\n      waitForNonNullVariable(reader, callback);\n    }, 100); // Wait 1 second before checking again\n  }\n}\nfunction replaceCurrentCell(tracker, code) {\n  const currentNotebook = tracker.currentWidget;\n  if (!currentNotebook) {\n    return;\n  }\n  const index = currentNotebook.content.activeCellIndex;\n  var cell; \n  if (code.startsWith(\"pip\") || code.startsWith(\"gcloud\")) {\n    code = \"!\" + code;\n    cell = currentNotebook.content.model.contentFactory.createCodeCell({});\n    cell.value.text = code;\n    //add cell at the beginning of the notebook\n    currentNotebook.content.model.cells.insert(0, newCell);\n    console.log(\"Adding new cell at the beginning\");\n  } else if (index === -1) {\n    cell = currentNotebook.content.model.contentFactory.createCodeCell({});\n    cell.value.text = code;\n    currentNotebook.content.model.cells.push(newCell);\n    console.log(\"Adding new cell\");\n  } else {\n    cell = currentNotebook.content.model.cells.get(index);\n    cell.value.text = code;\n    console.log(\"Replacing code in current cell\");\n  }\n};\n\nfunction getCellContent(cell) {\n  var outputText = \"\";\n  const outputJSON = cell.outputArea.model.toJSON();\n  if (outputJSON.length > 0) {\n    const traceback = outputJSON[0].traceback;\n    if (traceback != null) {\n      for (var i = 0; i < traceback.length; i++) {\n        const escapeRegex = /\\x1B\\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]/g;\n        const plainTextString = traceback[i].replace(escapeRegex, '');\n        outputText += plainTextString + \"\\n\";\n      }\n    } else {\n      outputText = outputJSON[0].text;\n    }\n  }\n  return {\n    \"text\": cell.model.value.text,\n    \"output\": outputText\n  }\n}\nfunction getCurrentCellContent(tracker, app) {\n  const currentNotebook = tracker.currentWidget;\n  if (!currentNotebook) {\n    return;\n  }\n  //get index of currently selected cell\n  const index = currentNotebook.content.activeCellIndex;\n  if (index === -1) {\n    return \"\";\n  } else {\n    //retrieve cell text including its kernel output\n    const current = app.shell.currentWidget.content.activeCell; \n    return getCellContent(current); \n  }\n}\n\nfunction loadFlutterApp() {\n  window.isJupyter = true;\n  var serviceWorkerVersion = \"124778936\";\n  const flutter_script = document.createElement('script');\n  flutter_script.src = '/roboweb-server-extension/flutter.js';\n  document.head.appendChild(flutter_script);\n  \n  const main_script = document.createElement('script');\n  main_script.src = '/roboweb-server-extension/main.js';\n  document.head.appendChild(main_script);\n  \n  flutter_script.onload = function() {\n    console.log('Downloading main.dart.js');\n    _flutter.loader.loadEntrypoint({\n      serviceWorker: {\n        serviceWorkerVersion: serviceWorkerVersion,\n      }\n    }).then(function(engineInitializer) {\n      console.log('Initializing engine');\n      waitForNonNullVariable(function() {return document.getElementById(\"assistant-panel\")}, function (target) {\n        engineInitializer.initializeEngine({\n          hostElement: target,\n        }).then(function(appRunner) {\n          return appRunner.runApp();\n        })\n      }); \n      //if target is null sleep for 100 ms \n    });\n  };\n}\nconst plugin = {\n    id: 'roboweb-extension',\n    requires: [INotebookTracker, ICommandPalette],\n    activate: (app, tracker, palette) => {\n      console.log(\n        'Roboweb extension activated'\n      );\n      const widget = new AssistantSidebar();\n      widget.node.style.minWidth = \"450px\";\n      app.shell.add(widget, 'right', { rank: 0 });\n\n    \n      //register function to retrieve current cell text\n      window.currentCellText = function () {\n        return getCurrentCellContent(tracker, app);\n      }\n\n      //register function to edit current cell text\n      window.replaceCodeCurrentCell = function(code) {\n        replaceCurrentCell(tracker, code);\n      }\n      \n      //track and log executions \n      NotebookActions.executed.connect(async (_, args) => {\n        const { cell, notebook, success, error } = args;\n        var cellContent = getCellContent(cell); \n        const input = cellContent.text;\n        const output = cellContent.output;\n        console.log(\"Logging execution\"+input+\" \"+output);\n        window.logCellExecution(cellContent.text, cellContent.output); \n      });\n\n      app.commands.addCommand('fix-cell-extension:fixCell', {\n        label: 'Fix',\n        execute: () => {\n          const currentNotebook = tracker.currentWidget;\n          if (!currentNotebook) {\n            return;\n          }\n          const currentCell = window.currentCellText();\n          const errorPrompt = \"My code has an error. Ideally give me a quick command to fix it. If that's not available give me python code to fix it. Assume i dont have a credentials or key file. \\n\\nCode: \\n\\n\" + currentCell.text + \"\\n\\nError: \\n\\n\" + currentCell.output;\n          window.pastePrompt(errorPrompt); \n        }\n      });\n    \n      app.contextMenu.addItem({\n        command: 'fix-cell-extension:fixCell',\n        selector: '.jp-Notebook',\n        rank: 0\n      });  \n\n      window.addEventListener('click', function(event) {\n        const assistantPanelDiv = document.querySelector('#assistant-panel');\n        if (!assistantPanelDiv.contains(event.target)) {\n          removeFocus();\n        }\n      \n      }, { passive: true });\n            \n\n      //embed flutter app \n      loadFlutterApp();\n    },\n    autoStart: true\n};\nexport default plugin;\n\n\n\n"],"names":[],"sourceRoot":""}