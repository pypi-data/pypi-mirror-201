"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from orb.models import operations, shared
from typing import Optional

class Invoice:
    r"""Create and query invoices"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_invoice_invoice_id(self, request: operations.GetInvoiceInvoiceIDRequest, retries: Optional[utils.RetryConfig] = None) -> operations.GetInvoiceInvoiceIDResponse:
        r"""Retrieve an Invoice
        This endpoint is used to fetch an [`Invoice`](../reference/Orb-API.json/components/schemas/Invoice) given an identifier.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetInvoiceInvoiceIDRequest, base_url, '/invoices/{invoice_id}', request)
        
        
        client = self._security_client
        
        retry_config = retries
        if retry_config is None:
            retry_config = utils.RetryConfig('backoff', True)
            retry_config.backoff = utils.BackoffStrategy(500, 60000, 1.5, 3600000)
            

        def do_request():
            return client.request('GET', url)
        
        http_res = utils.retry(do_request, utils.Retries(retry_config, [
            '5XX'
        ]))
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetInvoiceInvoiceIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Invoice])
                res.invoice = out

        return res

    def get_invoices(self, request: operations.GetInvoicesRequest, retries: Optional[utils.RetryConfig] = None) -> operations.GetInvoicesResponse:
        r"""List invoices
        This endpoint returns a list of all [`Invoice`](../reference/Orb-API.json/components/schemas/Invoice)s for an account in a list format. 
        
        The list of invoices is ordered starting from the most recently issued invoice date. The response also includes `pagination_metadata`, which lets the caller retrieve the next page of results if they exist.
        
        By default, this only returns invoices that are `issued`, `paid`, or `synced`.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/invoices'
        
        query_params = utils.get_query_params(operations.GetInvoicesRequest, request)
        
        client = self._security_client
        
        retry_config = retries
        if retry_config is None:
            retry_config = utils.RetryConfig('backoff', True)
            retry_config.backoff = utils.BackoffStrategy(500, 60000, 1.5, 3600000)
            

        def do_request():
            return client.request('GET', url, params=query_params)
        
        http_res = utils.retry(do_request, utils.Retries(retry_config, [
            '5XX'
        ]))
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetInvoicesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetInvoices200ApplicationJSON])
                res.get_invoices_200_application_json_object = out

        return res

    def get_invoices_upcoming(self, request: operations.GetInvoicesUpcomingRequest, retries: Optional[utils.RetryConfig] = None) -> operations.GetInvoicesUpcomingResponse:
        r"""Retrieve upcoming invoice
        This endpoint can be used to fetch the [`Upcoming Invoice`](../reference/Orb-API.json/components/schemas/Upcoming%20Invoice) for the current billing period given a subscription.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/invoices/upcoming'
        
        query_params = utils.get_query_params(operations.GetInvoicesUpcomingRequest, request)
        
        client = self._security_client
        
        retry_config = retries
        if retry_config is None:
            retry_config = utils.RetryConfig('backoff', True)
            retry_config.backoff = utils.BackoffStrategy(500, 60000, 1.5, 3600000)
            

        def do_request():
            return client.request('GET', url, params=query_params)
        
        http_res = utils.retry(do_request, utils.Retries(retry_config, [
            '5XX'
        ]))
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetInvoicesUpcomingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UpcomingInvoice])
                res.upcoming_invoice = out

        return res

    def post_invoice_line_items(self, request: operations.PostInvoiceLineItemsRequestBody, retries: Optional[utils.RetryConfig] = None) -> operations.PostInvoiceLineItemsResponse:
        r"""Create invoice line item
        This creates a one-off fixed fee [Invoice line item](../reference/Orb-API.json/components/schemas/Invoice-line-item) on an [Invoice](../reference/Orb-API.json/components/schemas/Invoice). This can only be done for invoices that are in a `draft` status.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/invoice_line_items'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        retry_config = retries
        if retry_config is None:
            retry_config = utils.RetryConfig('backoff', True)
            retry_config.backoff = utils.BackoffStrategy(500, 60000, 1.5, 3600000)
            

        def do_request():
            return client.request('POST', url, data=data, files=form, headers=headers)
        
        http_res = utils.retry(do_request, utils.Retries(retry_config, [
            '5XX'
        ]))
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostInvoiceLineItemsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InvoiceLineItem])
                res.invoice_line_item = out

        return res

    def post_invoices_invoice_id_void(self, request: operations.PostInvoicesInvoiceIDVoidRequest, retries: Optional[utils.RetryConfig] = None) -> operations.PostInvoicesInvoiceIDVoidResponse:
        r"""Void an invoice
        This endpoint allows an invoice's status to be set the `void` status. This can only be done to invoices that are in the `issued` status.
        
        If the associated invoice has used the customer balance to change the amount due, the customer balance operation will be reverted. For example, if the invoice used $10 of customer balance, that amount will be added back to the customer balance upon voiding.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostInvoicesInvoiceIDVoidRequest, base_url, '/invoices/{invoice_id}/void', request)
        
        
        client = self._security_client
        
        retry_config = retries
        if retry_config is None:
            retry_config = utils.RetryConfig('backoff', True)
            retry_config.backoff = utils.BackoffStrategy(500, 60000, 1.5, 3600000)
            

        def do_request():
            return client.request('POST', url)
        
        http_res = utils.retry(do_request, utils.Retries(retry_config, [
            '5XX'
        ]))
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostInvoicesInvoiceIDVoidResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Invoice])
                res.invoice = out
        elif http_res.status_code == 400:
            pass

        return res

    