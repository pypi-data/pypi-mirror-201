"""Functions to handle JavaScript files"""
from __future__ import annotations

import json

import yaml
from pyarn import lockfile

from depend.dep import Dep
from depend.utils.npm_parser import handle_npm_json


def handle_yarn_lock(req_file_data: str) -> list[Dep]:
    """
    Parse yarn lock file
    :param req_file_data: Content of yarn.lock
    Return:
          list of requirement and specs
    """
    if "lockfile v1" in req_file_data:
        parsed_lockfile = lockfile.Lockfile.from_str(req_file_data)
        unfiltered_content: dict = json.loads(parsed_lockfile.to_json())
    else:
        unfiltered_content = yaml.safe_load(req_file_data)

    return [
        Dep(
            "javascript",
            str(package.split(",")[0].rsplit("@", 1)[0]),
            str(unfiltered_content[package].get("version", "*")),
        )
        for package in unfiltered_content.keys()
        if not package.startswith("_")
    ]


def handle_package_json(req_file_data: str) -> list[Dep]:
    """
    Parse json files generated by npm or yarn
    :param req_file_data: Content of package.json
    Return:
          list of requirement and specs
    """
    package_data = json.loads(req_file_data)
    return handle_npm_json(package_data)
