?start: document

// TERMINALS
%import common.UCASE_LETTER
%import common.LCASE_LETTER
%import common.DIGIT
UNDERSCORE: "_"
%import common.LETTER
SIMPLE_CHAR: LETTER | DIGIT | UNDERSCORE | INTEGER
SPACE: "\u0020"

// FROM TURTLE
?literal: rdf_literal | numeric_literal | boolean_literal
numeric_literal: INTEGER | DECIMAL | DOUBLE
rdf_literal: string (LANGTAG | "^^" iri)?
boolean_literal: /true|false/
string: STRING_LITERAL_QUOTE
      | STRING_LITERAL_SINGLE_QUOTE
      | STRING_LITERAL_LONG_SINGLE_QUOTE
      | STRING_LITERAL_LONG_QUOTE
iri: IRIREF | prefixed_name
prefixed_name: PNAME_LN | PNAME_NS

IRIREF: "<" (/[^\x00-\x20<>"{}|^`\\]/ | UCHAR)* ">"
PNAME_NS: PN_PREFIX? ":"
PNAME_LN: PNAME_NS PN_LOCAL
LANGTAG: "@" /[a-zA-Z]+/ ("-" /[a-zA-Z0-9]+/)*
INTEGER: /[+-]?[0-9]+/
DECIMAL: /[+-]?[0-9]*/ "." /[0-9]+/
DOUBLE: /[+-]?/ (/[0-9]+/ "." /[0-9]*/ EXPONENT
      | "." /[0-9]+/ EXPONENT | /[0-9]+/ EXPONENT)
EXPONENT: /[eE][+-]?[0-9]+/
STRING_LITERAL_QUOTE: "\"" (/[^\x22\x5C\x0A\x0D]/ | ECHAR | UCHAR)* "\""
STRING_LITERAL_SINGLE_QUOTE: "'" (/[^\x27\x5C\x0A\x0D]/ | ECHAR | UCHAR)* "'"
STRING_LITERAL_LONG_SINGLE_QUOTE: "'''" (/'|''/? (/[^'\\]/ | ECHAR | UCHAR))* "'''"
STRING_LITERAL_LONG_QUOTE: "\"\"\"" (/"|""/? (/[^"\\]/ | ECHAR | UCHAR))* "\"\"\""
UCHAR: "\\u" HEX~4 | "\\U" HEX~8
ECHAR: "\\" /[tbnrf"'\\]/
PN_CHARS_BASE: /[A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\U00010000-\U000EFFFF]/
PN_CHARS_U: PN_CHARS_BASE | "_"
PN_CHARS: PN_CHARS_U | /[\-0-9\u00B7\u0300-\u036F\u203F-\u2040]/
PN_PREFIX: PN_CHARS_BASE ((PN_CHARS | ".")* PN_CHARS)?
PN_LOCAL: (PN_CHARS_U | ":" | /[0-9]/ | PLX) ((PN_CHARS | "." | ":" | PLX)* (PN_CHARS | ":" | PLX))?
PLX: PERCENT | PN_LOCAL_ESC
PERCENT: "%" HEX~2
HEX: /[0-9A-Fa-f]/
PN_LOCAL_ESC: "\\" /[_~\.\-!$&'()*+,;=\/?#@%]/
%import common.WS
%ignore WS

// TOKENS
u_ident: UCASE_LETTER (SIMPLE_CHAR)*
l_ident: LCASE_LETTER (SIMPLE_CHAR)*
label: (PN_CHARS | SPACE)*


// GLOBAL GRAMMAR
document:  header body
header:  ( base | prefix | top | una )*
base:  "@base" IRIREF
prefix:  "@prefix" PNAME_NS IRIREF
top:  "@top" l_ident | "@top" IRIREF
una:  "@una"
body:  (statement)* | (section)*
section:  "@facts" (fact)*
    | "@rules" (rule)*
    | "@constraints" (constraint)*
    | "@queries" (query)*
statement:  fact | rule | constraint | query
fact:  [ "["label"]" ] not_empty_conjunction "."
rule:  [ "["label"]" ] not_empty_disjunction_of_conjunctions ":-" conjunction "."
constraint:  [ "["label"]" ] "!" ":-" not_empty_conjunction "."
query:  [ "[" label "]" ] "?" ["("term_list")"] ":-" disjunction_of_conjunctions "."
conjunction:  [not_empty_conjunction]
not_empty_conjunction:  atom ("," atom)* | "(" atom ("," atom)* ")"
not_empty_disjunction_of_conjunctions: not_empty_conjunction (";" not_empty_conjunction)*
disjunction_of_conjunctions: [not_empty_disjunction_of_conjunctions]
atom:  std_atom | equality
equality:  term "=" term
std_atom:  predicate"("not_empty_term_list")"
term_list:  [not_empty_term_list]
not_empty_term_list:  term ("," term)*
term:  variable | constant
predicate:  l_ident | IRIREF | prefixed_name
variable:  u_ident
constant:  l_ident | IRIREF | prefixed_name | literal