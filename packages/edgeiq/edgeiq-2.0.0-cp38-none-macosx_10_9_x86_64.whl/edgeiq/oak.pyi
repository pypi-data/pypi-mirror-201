from _typeshed import Incomplete
from enum import Enum

class Sensor(Enum):
    res_1080: Incomplete
    res_4k: Incomplete
    res_12_mp: Incomplete

class VideoMode(Enum):
    preview: int
    video: int

class Oak:
    def __init__(self, model_id: Incomplete | None = ..., sensor=..., video_mode=..., capture_depth: bool = ..., usb2: bool = ..., device_info: Incomplete | None = ...) -> None: ...
    @property
    def model_id(self): ...
    @property
    def model_purpose(self): ...
    @classmethod
    def get_devices_in_use(cls): ...
    @staticmethod
    def get_available_devices(): ...
    def get_frame(self): ...
    def get_model_result(self, block: bool = ..., **inference_args): ...
    def get_model_data(self, block: bool = ...): ...
    def get_depth(self, block: bool = ...): ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, type, value, traceback) -> None: ...
