Metadata-Version: 2.1
Name: datacx
Version: 0.4.0
Summary: Data Connectors for all data sources
Author-email: Vinish M <vinishuchiha@gmail.com>
License: MIT License
        
        Copyright (c) 2023 Vinish M
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://github.com/VinishUchiha/datacx
Keywords: connectors,datalake reader,datawarehouse reader,dataconnector
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: boto3 (>=1.26.93)
Requires-Dist: google-cloud-storage (>=2.7.0)
Requires-Dist: azure-storage-blob (>=12.15.0)
Requires-Dist: pandas (>=1.0.0)
Requires-Dist: PyYAML
Requires-Dist: connectorx
Requires-Dist: snowflake-connector-python[pandas]
Requires-Dist: mysql-connector-python-rf
Requires-Dist: elasticsearch (>8.0.0)
Requires-Dist: sqlalchemy (==1.4.46)
Requires-Dist: pymongo
Requires-Dist: fastparquet
Requires-Dist: openpyxl
Requires-Dist: xlrd
Requires-Dist: xlwt
Requires-Dist: tomli ; python_version < "3.11"
Provides-Extra: dev
Requires-Dist: black ; extra == 'dev'
Requires-Dist: bumpver ; extra == 'dev'
Requires-Dist: isort ; extra == 'dev'
Requires-Dist: pip-tools ; extra == 'dev'
Requires-Dist: pytest ; extra == 'dev'

<div align="center">

<img src="docs/images/LOGO.png" alt="drawing" width="200"/>

A Data Connector for all the data sources

<div align="left">

This library helps to read and write data from most of the data sources. It accelerate the ML and ETL process without worrying about the multiple data connectors.

## Installation
```bash
pip install -U datacx
```
**Install from sources**

Alternatively, you can also clone the latest version from the [repository](https://github.com/VinishUchiha/datacx) and install it directly from the source code:

```bash
pip install -e .
```

## Quick tour
```python
>>> from datacx import DataCX
>>> from transformers import pipeline

>>> dcx = DataCX('./dcx_config.yaml') # Check the sample_dcx_config.yaml for reference
>>> print(dcx.get_supported_data_sources_list())
['s3', 'gcs', 'azureblob', 'bigquery', 'snowflake', 'redshift', 'starrocks', 'postgresql', 'mysql', 'oracle', 'mssql', 'mariadb', 'sqlite', 'elasticsearch', 'mongodb']

>>> mongodb = dcx.connect('mongodb')
>>> df = mongodb.read_as_dataframe(database='reviewdb',collection='reviews')
>>> df.head()
        _id	                        Review
0	64272bb06a14f52787e0a09e	good and interesting
1	64272bb06a14f52787e0a09f	This class is very helpful to me. Currently, I...
2	64272bb06a14f52787e0a0a0	like!Prof and TAs are helpful and the discussi...
3	64272bb06a14f52787e0a0a1	Easy to follow and includes a lot basic and im...
4	64272bb06a14f52787e0a0a2	Really nice teacher!I could got the point eazl...

>>> classifier = pipeline("sentiment-analysis")
>>> reviews = df.Review.tolist()
>>> results = classifier(reviews,truncation=True)
>>> for result in results:
>>>     print(f"label: {result['label']}, with score: {round(result['score'], 4)}")
label: POSITIVE, with score: 0.9999
label: POSITIVE, with score: 0.9997
label: POSITIVE, with score: 0.9999
label: POSITIVE, with score: 0.999
label: POSITIVE, with score: 0.9967

>>> df['predicted_label'] = [result['label'] for result in results]
>>> df['predicted_score'] = [round(result['score'], 4) for result in results]

# Write the results to the MongoDB
>>> mongodb.write_dataframe(df,'reviewdb','review_sentiments')
```
## Supported Connectors
  
|Data Sources| Type | Read | Write |
|------------|------| ----  | -----|
|S3|datalake| &#9745;   | &#9745; |
|GCS|datalake| &#9745;   | &#9745; |
|Azure Blob Stoarge| datalake| &#9745;   | &#9745; |
|Snowflake| datawarehouse | &#9745;   | &#9745; |
|BigQuery| datawarehouse | &#9745;   | &#9745; |
|StarRocks| datawarehouse | &#9745;   | &#9745; |
|Redshift| datawarehouse | &#9745;   | &#9745; |
|PostgreSQL| database | &#9745;   | &#9745; |
|MySQL| database | &#9745;   | &#9745; |
|MariaDB| database | &#9745;   | &#9745; |
|MsSQL| database | &#9745;   | &#9745; |
|Oracle| database | &#9745;   | &#9745; |
|SQLite| database | &#9745;   | &#9745; |
|MongoDB| nosql | &#9745;   | &#9745; |
|ElasticSearch| nosql | &#9745;   | &#9745; |

## Acknowledgement

Some functionalities of DataCX are inspired by the following packages.

- [ConnectorX](https://github.com/sfu-db/connector-x)
  
  DataCX used Connectorx to read data from most of the RDBMS databases to utilize the performance benefits and inspired the return_type parameter from it
  
- [GeneratorREX](https://generatorrex.fandom.com/wiki/Generator_Rex_Wiki)
  
  DataCX logo inspired by the American animated science fiction television series and created by my graphic designer friend [Belgin David](https://www.linkedin.com/in/belgin-david-4b699a1b8)
