# This file was auto-generated by Fern from our API Definition.

import urllib.parse
from json.decoder import JSONDecodeError

import httpx
import pydantic

from ..environment import VellumApiEnvironment
from .core.api_error import ApiError
from .core.jsonable_encoder import jsonable_encoder
from .core.remove_none_from_headers import remove_none_from_headers
from .types.generate_request_body_request import GenerateRequestBodyRequest
from .types.generate_response import GenerateResponse
from .types.model_version_read import ModelVersionRead
from .types.search_request_body_request import SearchRequestBodyRequest
from .types.search_response import SearchResponse
from .types.submit_completion_actuals_request_request import SubmitCompletionActualsRequestRequest
from .types.upload_document_request_body_request import UploadDocumentRequestBodyRequest


class VellumApi:
    def __init__(self, *, environment: VellumApiEnvironment, api_key: str):
        self._environment = environment
        self.api_key = api_key

    def generate(self, *, request: GenerateRequestBodyRequest) -> GenerateResponse:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "v1/generate"),
            json=jsonable_encoder(request),
            headers=remove_none_from_headers({"X_API_KEY": self.api_key}),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GenerateResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def retrieve_model_versions(self, id: str) -> ModelVersionRead:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", f"v1/model-versions/{id}"),
            headers=remove_none_from_headers({"X_API_KEY": self.api_key}),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ModelVersionRead, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def search(self, *, request: SearchRequestBodyRequest) -> SearchResponse:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "v1/search"),
            json=jsonable_encoder(request),
            headers=remove_none_from_headers({"X_API_KEY": self.api_key}),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(SearchResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def submit_completion_actuals(self, *, request: SubmitCompletionActualsRequestRequest) -> None:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "v1/submit-completion-actuals"),
            json=jsonable_encoder(request),
            headers=remove_none_from_headers({"X_API_KEY": self.api_key}),
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def upload_document(self, *, request: UploadDocumentRequestBodyRequest) -> None:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "v1/upload-document"),
            json=jsonable_encoder(request),
            headers=remove_none_from_headers({"X_API_KEY": self.api_key}),
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncVellumApi:
    def __init__(self, *, environment: VellumApiEnvironment, api_key: str):
        self._environment = environment
        self.api_key = api_key

    async def generate(self, *, request: GenerateRequestBodyRequest) -> GenerateResponse:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "v1/generate"),
                json=jsonable_encoder(request),
                headers=remove_none_from_headers({"X_API_KEY": self.api_key}),
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GenerateResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def retrieve_model_versions(self, id: str) -> ModelVersionRead:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET",
                urllib.parse.urljoin(f"{self._environment.value}/", f"v1/model-versions/{id}"),
                headers=remove_none_from_headers({"X_API_KEY": self.api_key}),
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ModelVersionRead, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def search(self, *, request: SearchRequestBodyRequest) -> SearchResponse:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "v1/search"),
                json=jsonable_encoder(request),
                headers=remove_none_from_headers({"X_API_KEY": self.api_key}),
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(SearchResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def submit_completion_actuals(self, *, request: SubmitCompletionActualsRequestRequest) -> None:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "v1/submit-completion-actuals"),
                json=jsonable_encoder(request),
                headers=remove_none_from_headers({"X_API_KEY": self.api_key}),
            )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def upload_document(self, *, request: UploadDocumentRequestBodyRequest) -> None:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "v1/upload-document"),
                json=jsonable_encoder(request),
                headers=remove_none_from_headers({"X_API_KEY": self.api_key}),
            )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
