# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class UploadDocumentRequestBodyRequest(pydantic.BaseModel):
    add_to_index_names: typing.Optional[typing.List[str]] = pydantic.Field(
        description=("Optionally include the names of all indexes that you'd like this document to be included in\n")
    )
    external_id: typing.Optional[str] = pydantic.Field(
        description=(
            "Optionally include an external ID for this document. This is useful if you want to re-upload the same document later when its contents change and would like it to be re-indexed.\n"
        )
    )
    label: str = pydantic.Field(description=("A human-friendly name for this document. Typically the filename.\n"))
    contents: str = pydantic.Field(description=("The file contents of the document.\n"))
    keywords: typing.Optional[typing.List[str]] = pydantic.Field(
        description=(
            "Optionally include a list of keywords that'll be associated with this document. Used when performing keyword searches.\n"
        )
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
