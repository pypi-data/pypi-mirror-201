Index: Pipfile
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>[[source]]\nurl = \"https://pypi.org/simple\"\nverify_ssl = true\nname = \"pypi\"\n\n[packages]\nrequests = \"*\"\npydantic = \"*\"\n\n[dev-packages]\npre-commit = \"*\"\n\n[requires]\npython_version = \"3.11\"\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Pipfile b/Pipfile
--- a/Pipfile	(revision 752a1bb3c253895076360ab860b538313d39c9f6)
+++ b/Pipfile	(date 1680037636725)
@@ -6,6 +6,8 @@
 [packages]
 requests = "*"
 pydantic = "*"
+pytest = "*"
+pytest-dotenv = "*"
 
 [dev-packages]
 pre-commit = "*"
Index: ord_mediascout_client/ord_mediascout_client.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from typing import Optional\n\nimport requests as requests\nfrom pydantic.main import BaseModel\nfrom pydantic.tools import parse_raw_as\nfrom requests.auth import HTTPBasicAuth\n\nfrom config import ORDMediascoutConfig\nfrom models import CreateClientWebApiDto, BadRequestWebApiDto, ClientWebApiDto, GetClientsWebApiDto, \\\n    CreateInitialContractWebApiDto, InitialContractWebApiDto, EditInitialContractWebApiDto, \\\n    GetInitialContractsWebApiDto, CreateFinalContractWebApiDto, FinalContractWebApiDto, EditFinalContractWebApiDto, \\\n    GetFinalContractsWebApiDto, CreateOuterContractWebApiDto, OuterContractWebApiDto, EditOuterContractWebApiDto, \\\n    GetOuterContractsWebApiDto, SelfPromotionContractWebApiDto, CreateCreativeWebApiDto, EntityIdWebApiDto, \\\n    EditCreativeWebApiDto, CreativeWebApiDto, GetCreativesWebApiDto, CreateInvoiceWebApiDto, EditInvoiceDataWebApiDto, \\\n    InvoiceWebApiDto, EditInvoiceStatisticsWebApiDto, ClearInvoiceDataWebApiDto, SupplementInvoiceWebApiDto, \\\n    GetInvoicesWebApiDto, InvoiceSummaryWebApiDto, CreatePlatformWebApiDto, EditPlatformWebApiDto, PlatformCardWebApiDto\n\n\nclass APIError(Exception):\n    pass\n\n\nclass BadResponse(APIError):\n    def __init__(self, status_code: int, error: Optional[BadRequestWebApiDto] = None):\n        super().__init__(error and error.errorType or f'Bad response from API: {status_code}')\n        self.status_code = status_code\n        self.error = error\n\n\nclass ORDMediascoutClient:\n    def __init__(self, config: ORDMediascoutConfig):\n        self.config = config\n        self.auth = HTTPBasicAuth(self.config.username, self.config.password)\n\n    def _call(self, method: str, url: str, obj: Optional[BaseModel] = None, **kwargs):\n        response = requests.request(method, f'{self.config.url}{url}', json=obj.dict(), auth=self.auth, **kwargs)\n        match response.status_code:\n            case 400 | 401:\n                bad_response = BadRequestWebApiDto.parse_raw(response.text)\n                raise BadResponse(response.status_code, bad_response)\n            case 500:\n                raise BadResponse(response.status_code)\n            case 200 | 201:\n                return response\n        raise BadResponse(response.status_code)\n\n    # Clients\n    def create_client(self, client: CreateClientWebApiDto) -> ClientWebApiDto:\n        response = self._call('post', '/webapi/Clients/CreateClient', client)\n        client = ClientWebApiDto.parse_raw(response.text)\n        return client\n\n    def get_clients(self, parameters: GetClientsWebApiDto) -> list[ClientWebApiDto]:\n        response = self._call('post', '/webapi/Clients/GetClients', parameters)\n        clients: list[ClientWebApiDto] = parse_raw_as(list[ClientWebApiDto], response.text)\n        return clients\n\n    # Contracts\n    def create_initial_contract(self, contract: CreateInitialContractWebApiDto) -> InitialContractWebApiDto:\n        response = self._call('post', '/webapi/Contracts/CreateInitialContract', contract)\n        contract = InitialContractWebApiDto.parse_raw(response.text)\n        return contract\n\n    def edit_initial_contract(self, contract: EditInitialContractWebApiDto) -> InitialContractWebApiDto:\n        response = self._call('post', '/webapi/Contracts/EditInitialContract', contract)\n        contract = InitialContractWebApiDto.parse_raw(response.text)\n        return contract\n\n    def get_initial_contracts(self, parameters: GetInitialContractsWebApiDto) -> list[InitialContractWebApiDto]:\n        response = self._call('post', '/webapi/Contracts/GetInitialContracts', parameters)\n        contracts: list[InitialContractWebApiDto] = parse_raw_as(list[InitialContractWebApiDto], response.text)\n        return contracts\n\n    def create_final_contract(self, contract: CreateFinalContractWebApiDto) -> FinalContractWebApiDto:\n        response = self._call('post', '/webapi/Contracts/CreateFinalContract', contract)\n        contract = FinalContractWebApiDto.parse_raw(response.text)\n        return contract\n\n    def edit_final_contract(self, contract: EditFinalContractWebApiDto) -> FinalContractWebApiDto:\n        response = self._call('post', '/webapi/Contracts/EditFinalContract', contract)\n        contract = FinalContractWebApiDto.parse_raw(response.text)\n        return contract\n\n    def get_final_contracts(self, parameters: GetFinalContractsWebApiDto) -> list[FinalContractWebApiDto]:\n        response = self._call('post', '/webapi/Contracts/GetFinalContracts', parameters)\n        contracts: list[FinalContractWebApiDto] = parse_raw_as(list[FinalContractWebApiDto], response.text)\n        return contracts\n\n    def create_outer_contract(self, contract: CreateOuterContractWebApiDto) -> OuterContractWebApiDto:\n        response = self._call('post', '/webapi/Contracts/CreateOuterContract', contract)\n        contract = OuterContractWebApiDto.parse_raw(response.text)\n        return contract\n\n    def edit_outer_contract(self, contract: EditOuterContractWebApiDto) -> OuterContractWebApiDto:\n        response = self._call('post', '/webapi/Contracts/EditOuterContract', contract)\n        contract = OuterContractWebApiDto.parse_raw(response.text)\n        return contract\n\n    def get_outer_contracts(self, parameters: GetOuterContractsWebApiDto) -> list[OuterContractWebApiDto]:\n        response = self._call('post', '/webapi/Contracts/GetOuterContracts', parameters)\n        contracts: list[OuterContractWebApiDto] = parse_raw_as(list[OuterContractWebApiDto], response.text)\n        return contracts\n\n    def create_self_promotion_contract(self, contract: SelfPromotionContractWebApiDto) -> \\\n            SelfPromotionContractWebApiDto:\n        response = self._call('post', '/webapi/Contracts/CreateSelfPromotionContract', contract)\n        contract = SelfPromotionContractWebApiDto.parse_raw(response.text)\n        return contract\n\n    def get_self_promotion_contracts(self) -> list[SelfPromotionContractWebApiDto]:\n        response = self._call('post', '/webapi/Contracts/GetSelfPromotionContracts')\n        contracts: list[SelfPromotionContractWebApiDto] = \\\n            parse_raw_as(list[SelfPromotionContractWebApiDto], response.text)\n        return contracts\n\n    # Creatives\n    def create_creative(self, creative: CreateCreativeWebApiDto) -> EntityIdWebApiDto:\n        response = self._call('post', '/webapi/creatives/CreateCreative', creative)\n        entity = EntityIdWebApiDto.parse_raw(response.text)\n        return entity\n\n    def edit_creative(self, creative: EditCreativeWebApiDto) -> CreativeWebApiDto:\n        response = self._call('post', '/webapi/creatives/EditCreative', creative)\n        contract = CreativeWebApiDto.parse_raw(response.text)\n        return contract\n\n    def get_creatives(self, parameters: GetCreativesWebApiDto) -> list[CreativeWebApiDto]:\n        response = self._call('post', '/webapi/creatives/GetCreatives', parameters)\n        clients: list[CreativeWebApiDto] = parse_raw_as(list[CreativeWebApiDto], response.text)\n        return clients\n\n    # Invoices\n    def create_invoice(self, invoice: CreateInvoiceWebApiDto) -> EntityIdWebApiDto:\n        response = self._call('post', '/webapi/Invoices/CreateInvoice', invoice)\n        entity = EntityIdWebApiDto.parse_raw(response.text)\n        return entity\n\n    def edit_invoice(self, invoice: EditInvoiceDataWebApiDto) -> InvoiceWebApiDto:\n        response = self._call('post', '/webapi/Invoices/EditInvoice', invoice)\n        invoice = InvoiceWebApiDto.parse_raw(response.text)\n        return invoice\n\n    def overwrite_invoice(self, invoice: EditInvoiceStatisticsWebApiDto):\n        self._call('post', '/webapi/Invoices/OverwriteInvoice', invoice)\n\n    def clear_invoice(self, invoice: ClearInvoiceDataWebApiDto):\n        self._call('post', '/webapi/Invoices/ClearInvoice', invoice)\n\n    def supplement_invoice(self, invoice: SupplementInvoiceWebApiDto) -> EntityIdWebApiDto:\n        response = self._call('post', '/webapi/Invoices/SupplementInvoice', invoice)\n        entity = EntityIdWebApiDto.parse_raw(response.text)\n        return entity\n\n    def get_invoices(self, parameters: GetInvoicesWebApiDto) -> list[InvoiceWebApiDto]:\n        response = self._call('post', '/webapi/Invoices/GetInvoices', parameters)\n        invoices: list[InvoiceWebApiDto] = parse_raw_as(list[InvoiceWebApiDto], response.text)\n        return invoices\n\n    def get_invoice_summary(self, entity: EntityIdWebApiDto) -> InvoiceSummaryWebApiDto:\n        response = self._call('post', '/webapi/Invoices/GetInvoiceSummary', entity)\n        invoice_summary = InvoiceSummaryWebApiDto.parse_raw(response.text)\n        return invoice_summary\n\n    def confirm_invoice(self, entity: EntityIdWebApiDto):\n        self._call('post', '/webapi/Invoices/ConfirmInvoice', entity)\n\n    def delete_invoice(self, entity: EntityIdWebApiDto):\n        self._call('post', '/webapi/Invoices/DeleteInvoices', entity)\n\n    # WebApiPlatform\n    def create_platform(self, platform: CreatePlatformWebApiDto) -> EntityIdWebApiDto:\n        response = self._call('post', '/webapi/Platforms/CreatePlatform', platform)\n        entity = EntityIdWebApiDto.parse_raw(response.text)\n        return entity\n\n    def edit_platform(self, platform: EditPlatformWebApiDto) -> PlatformCardWebApiDto:\n        response = self._call('post', '/webapi/Platforms/EditPlatform', platform)\n        platform = PlatformCardWebApiDto.parse_raw(response.text)\n        return platform\n\n    # PING\n    def ping(self) -> bool:\n        tmp_auth, self.auth = self.auth, None\n        self._call('get', '/webapi/PingAuth')\n        self.auth = tmp_auth\n        return True\n\n    def ping_auth(self) -> bool:\n        self._call('get', '/webapi/PingAuth')\n        return True\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ord_mediascout_client/ord_mediascout_client.py b/ord_mediascout_client/ord_mediascout_client.py
--- a/ord_mediascout_client/ord_mediascout_client.py	(revision 752a1bb3c253895076360ab860b538313d39c9f6)
+++ b/ord_mediascout_client/ord_mediascout_client.py	(date 1680037849053)
@@ -33,7 +33,7 @@
         self.auth = HTTPBasicAuth(self.config.username, self.config.password)
 
     def _call(self, method: str, url: str, obj: Optional[BaseModel] = None, **kwargs):
-        response = requests.request(method, f'{self.config.url}{url}', json=obj.dict(), auth=self.auth, **kwargs)
+        response = requests.request(method, f'{self.config.url}{url}', json=obj and obj.dict(), auth=self.auth, **kwargs)
         match response.status_code:
             case 400 | 401:
                 bad_response = BadRequestWebApiDto.parse_raw(response.text)
@@ -181,7 +181,7 @@
     # PING
     def ping(self) -> bool:
         tmp_auth, self.auth = self.auth, None
-        self._call('get', '/webapi/PingAuth')
+        self._call('get', '/webapi/Ping')
         self.auth = tmp_auth
         return True
 
Index: Pipfile.lock
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n    \"_meta\": {\n        \"hash\": {\n            \"sha256\": \"32c44bb82b120cd058ab82ed796c211051438e1c064836e91f756955a7070ddf\"\n        },\n        \"pipfile-spec\": 6,\n        \"requires\": {\n            \"python_version\": \"3.11\"\n        },\n        \"sources\": [\n            {\n                \"name\": \"pypi\",\n                \"url\": \"https://pypi.org/simple\",\n                \"verify_ssl\": true\n            }\n        ]\n    },\n    \"default\": {\n        \"certifi\": {\n            \"hashes\": [\n                \"sha256:35824b4c3a97115964b408844d64aa14db1cc518f6562e8d7261699d1350a9e3\",\n                \"sha256:4ad3232f5e926d6718ec31cfc1fcadfde020920e278684144551c91769c7bc18\"\n            ],\n            \"markers\": \"python_version >= '3.6'\",\n            \"version\": \"==2022.12.7\"\n        },\n        \"charset-normalizer\": {\n            \"hashes\": [\n                \"sha256:04afa6387e2b282cf78ff3dbce20f0cc071c12dc8f685bd40960cc68644cfea6\",\n                \"sha256:04eefcee095f58eaabe6dc3cc2262f3bcd776d2c67005880894f447b3f2cb9c1\",\n                \"sha256:0be65ccf618c1e7ac9b849c315cc2e8a8751d9cfdaa43027d4f6624bd587ab7e\",\n                \"sha256:0c95f12b74681e9ae127728f7e5409cbbef9cd914d5896ef238cc779b8152373\",\n                \"sha256:0ca564606d2caafb0abe6d1b5311c2649e8071eb241b2d64e75a0d0065107e62\",\n                \"sha256:10c93628d7497c81686e8e5e557aafa78f230cd9e77dd0c40032ef90c18f2230\",\n                \"sha256:11d117e6c63e8f495412d37e7dc2e2fff09c34b2d09dbe2bee3c6229577818be\",\n                \"sha256:11d3bcb7be35e7b1bba2c23beedac81ee893ac9871d0ba79effc7fc01167db6c\",\n                \"sha256:12a2b561af122e3d94cdb97fe6fb2bb2b82cef0cdca131646fdb940a1eda04f0\",\n                \"sha256:12d1a39aa6b8c6f6248bb54550efcc1c38ce0d8096a146638fd4738e42284448\",\n                \"sha256:1435ae15108b1cb6fffbcea2af3d468683b7afed0169ad718451f8db5d1aff6f\",\n                \"sha256:1c60b9c202d00052183c9be85e5eaf18a4ada0a47d188a83c8f5c5b23252f649\",\n                \"sha256:1e8fcdd8f672a1c4fc8d0bd3a2b576b152d2a349782d1eb0f6b8e52e9954731d\",\n                \"sha256:20064ead0717cf9a73a6d1e779b23d149b53daf971169289ed2ed43a71e8d3b0\",\n                \"sha256:21fa558996782fc226b529fdd2ed7866c2c6ec91cee82735c98a197fae39f706\",\n                \"sha256:22908891a380d50738e1f978667536f6c6b526a2064156203d418f4856d6e86a\",\n                \"sha256:3160a0fd9754aab7d47f95a6b63ab355388d890163eb03b2d2b87ab0a30cfa59\",\n                \"sha256:322102cdf1ab682ecc7d9b1c5eed4ec59657a65e1c146a0da342b78f4112db23\",\n                \"sha256:34e0a2f9c370eb95597aae63bf85eb5e96826d81e3dcf88b8886012906f509b5\",\n                \"sha256:3573d376454d956553c356df45bb824262c397c6e26ce43e8203c4c540ee0acb\",\n                \"sha256:3747443b6a904001473370d7810aa19c3a180ccd52a7157aacc264a5ac79265e\",\n                \"sha256:38e812a197bf8e71a59fe55b757a84c1f946d0ac114acafaafaf21667a7e169e\",\n                \"sha256:3a06f32c9634a8705f4ca9946d667609f52cf130d5548881401f1eb2c39b1e2c\",\n                \"sha256:3a5fc78f9e3f501a1614a98f7c54d3969f3ad9bba8ba3d9b438c3bc5d047dd28\",\n                \"sha256:3d9098b479e78c85080c98e1e35ff40b4a31d8953102bb0fd7d1b6f8a2111a3d\",\n                \"sha256:3dc5b6a8ecfdc5748a7e429782598e4f17ef378e3e272eeb1340ea57c9109f41\",\n                \"sha256:4155b51ae05ed47199dc5b2a4e62abccb274cee6b01da5b895099b61b1982974\",\n                \"sha256:49919f8400b5e49e961f320c735388ee686a62327e773fa5b3ce6721f7e785ce\",\n                \"sha256:53d0a3fa5f8af98a1e261de6a3943ca631c526635eb5817a87a59d9a57ebf48f\",\n                \"sha256:5f008525e02908b20e04707a4f704cd286d94718f48bb33edddc7d7b584dddc1\",\n                \"sha256:628c985afb2c7d27a4800bfb609e03985aaecb42f955049957814e0491d4006d\",\n                \"sha256:65ed923f84a6844de5fd29726b888e58c62820e0769b76565480e1fdc3d062f8\",\n                \"sha256:6734e606355834f13445b6adc38b53c0fd45f1a56a9ba06c2058f86893ae8017\",\n                \"sha256:6baf0baf0d5d265fa7944feb9f7451cc316bfe30e8df1a61b1bb08577c554f31\",\n                \"sha256:6f4f4668e1831850ebcc2fd0b1cd11721947b6dc7c00bf1c6bd3c929ae14f2c7\",\n                \"sha256:6f5c2e7bc8a4bf7c426599765b1bd33217ec84023033672c1e9a8b35eaeaaaf8\",\n                \"sha256:6f6c7a8a57e9405cad7485f4c9d3172ae486cfef1344b5ddd8e5239582d7355e\",\n                \"sha256:7381c66e0561c5757ffe616af869b916c8b4e42b367ab29fedc98481d1e74e14\",\n                \"sha256:73dc03a6a7e30b7edc5b01b601e53e7fc924b04e1835e8e407c12c037e81adbd\",\n                \"sha256:74db0052d985cf37fa111828d0dd230776ac99c740e1a758ad99094be4f1803d\",\n                \"sha256:75f2568b4189dda1c567339b48cba4ac7384accb9c2a7ed655cd86b04055c795\",\n                \"sha256:78cacd03e79d009d95635e7d6ff12c21eb89b894c354bd2b2ed0b4763373693b\",\n                \"sha256:80d1543d58bd3d6c271b66abf454d437a438dff01c3e62fdbcd68f2a11310d4b\",\n                \"sha256:830d2948a5ec37c386d3170c483063798d7879037492540f10a475e3fd6f244b\",\n                \"sha256:891cf9b48776b5c61c700b55a598621fdb7b1e301a550365571e9624f270c203\",\n                \"sha256:8f25e17ab3039b05f762b0a55ae0b3632b2e073d9c8fc88e89aca31a6198e88f\",\n                \"sha256:9a3267620866c9d17b959a84dd0bd2d45719b817245e49371ead79ed4f710d19\",\n                \"sha256:a04f86f41a8916fe45ac5024ec477f41f886b3c435da2d4e3d2709b22ab02af1\",\n                \"sha256:aaf53a6cebad0eae578f062c7d462155eada9c172bd8c4d250b8c1d8eb7f916a\",\n                \"sha256:abc1185d79f47c0a7aaf7e2412a0eb2c03b724581139193d2d82b3ad8cbb00ac\",\n                \"sha256:ac0aa6cd53ab9a31d397f8303f92c42f534693528fafbdb997c82bae6e477ad9\",\n                \"sha256:ac3775e3311661d4adace3697a52ac0bab17edd166087d493b52d4f4f553f9f0\",\n                \"sha256:b06f0d3bf045158d2fb8837c5785fe9ff9b8c93358be64461a1089f5da983137\",\n                \"sha256:b116502087ce8a6b7a5f1814568ccbd0e9f6cfd99948aa59b0e241dc57cf739f\",\n                \"sha256:b82fab78e0b1329e183a65260581de4375f619167478dddab510c6c6fb04d9b6\",\n                \"sha256:bd7163182133c0c7701b25e604cf1611c0d87712e56e88e7ee5d72deab3e76b5\",\n                \"sha256:c36bcbc0d5174a80d6cccf43a0ecaca44e81d25be4b7f90f0ed7bcfbb5a00909\",\n                \"sha256:c3af8e0f07399d3176b179f2e2634c3ce9c1301379a6b8c9c9aeecd481da494f\",\n                \"sha256:c84132a54c750fda57729d1e2599bb598f5fa0344085dbde5003ba429a4798c0\",\n                \"sha256:cb7b2ab0188829593b9de646545175547a70d9a6e2b63bf2cd87a0a391599324\",\n                \"sha256:cca4def576f47a09a943666b8f829606bcb17e2bc2d5911a46c8f8da45f56755\",\n                \"sha256:cf6511efa4801b9b38dc5546d7547d5b5c6ef4b081c60b23e4d941d0eba9cbeb\",\n                \"sha256:d16fd5252f883eb074ca55cb622bc0bee49b979ae4e8639fff6ca3ff44f9f854\",\n                \"sha256:d2686f91611f9e17f4548dbf050e75b079bbc2a82be565832bc8ea9047b61c8c\",\n                \"sha256:d7fc3fca01da18fbabe4625d64bb612b533533ed10045a2ac3dd194bfa656b60\",\n                \"sha256:dd5653e67b149503c68c4018bf07e42eeed6b4e956b24c00ccdf93ac79cdff84\",\n                \"sha256:de5695a6f1d8340b12a5d6d4484290ee74d61e467c39ff03b39e30df62cf83a0\",\n                \"sha256:e0ac8959c929593fee38da1c2b64ee9778733cdf03c482c9ff1d508b6b593b2b\",\n                \"sha256:e1b25e3ad6c909f398df8921780d6a3d120d8c09466720226fc621605b6f92b1\",\n                \"sha256:e633940f28c1e913615fd624fcdd72fdba807bf53ea6925d6a588e84e1151531\",\n                \"sha256:e89df2958e5159b811af9ff0f92614dabf4ff617c03a4c1c6ff53bf1c399e0e1\",\n                \"sha256:ea9f9c6034ea2d93d9147818f17c2a0860d41b71c38b9ce4d55f21b6f9165a11\",\n                \"sha256:f645caaf0008bacf349875a974220f1f1da349c5dbe7c4ec93048cdc785a3326\",\n                \"sha256:f8303414c7b03f794347ad062c0516cee0e15f7a612abd0ce1e25caf6ceb47df\",\n                \"sha256:fca62a8301b605b954ad2e9c3666f9d97f63872aa4efcae5492baca2056b74ab\"\n            ],\n            \"markers\": \"python_version >= '3.7'\",\n            \"version\": \"==3.1.0\"\n        },\n        \"idna\": {\n            \"hashes\": [\n                \"sha256:814f528e8dead7d329833b91c5faa87d60bf71824cd12a7530b5526063d02cb4\",\n                \"sha256:90b77e79eaa3eba6de819a0c442c0b4ceefc341a7a2ab77d7562bf49f425c5c2\"\n            ],\n            \"markers\": \"python_version >= '3.5'\",\n            \"version\": \"==3.4\"\n        },\n        \"pydantic\": {\n            \"hashes\": [\n                \"sha256:01aea3a42c13f2602b7ecbbea484a98169fb568ebd9e247593ea05f01b884b2e\",\n                \"sha256:0cd181f1d0b1d00e2b705f1bf1ac7799a2d938cce3376b8007df62b29be3c2c6\",\n                \"sha256:10a86d8c8db68086f1e30a530f7d5f83eb0685e632e411dbbcf2d5c0150e8dcd\",\n                \"sha256:193924c563fae6ddcb71d3f06fa153866423ac1b793a47936656e806b64e24ca\",\n                \"sha256:464855a7ff7f2cc2cf537ecc421291b9132aa9c79aef44e917ad711b4a93163b\",\n                \"sha256:516f1ed9bc2406a0467dd777afc636c7091d71f214d5e413d64fef45174cfc7a\",\n                \"sha256:6434b49c0b03a51021ade5c4daa7d70c98f7a79e95b551201fff682fc1661245\",\n                \"sha256:64d34ab766fa056df49013bb6e79921a0265204c071984e75a09cbceacbbdd5d\",\n                \"sha256:670bb4683ad1e48b0ecb06f0cfe2178dcf74ff27921cdf1606e527d2617a81ee\",\n                \"sha256:68792151e174a4aa9e9fc1b4e653e65a354a2fa0fed169f7b3d09902ad2cb6f1\",\n                \"sha256:701daea9ffe9d26f97b52f1d157e0d4121644f0fcf80b443248434958fd03dc3\",\n                \"sha256:7d45fc99d64af9aaf7e308054a0067fdcd87ffe974f2442312372dfa66e1001d\",\n                \"sha256:80b1fab4deb08a8292d15e43a6edccdffa5377a36a4597bb545b93e79c5ff0a5\",\n                \"sha256:82dffb306dd20bd5268fd6379bc4bfe75242a9c2b79fec58e1041fbbdb1f7914\",\n                \"sha256:8c7f51861d73e8b9ddcb9916ae7ac39fb52761d9ea0df41128e81e2ba42886cd\",\n                \"sha256:950ce33857841f9a337ce07ddf46bc84e1c4946d2a3bba18f8280297157a3fd1\",\n                \"sha256:976cae77ba6a49d80f461fd8bba183ff7ba79f44aa5cfa82f1346b5626542f8e\",\n                \"sha256:9f6f0fd68d73257ad6685419478c5aece46432f4bdd8d32c7345f1986496171e\",\n                \"sha256:a7cd2251439988b413cb0a985c4ed82b6c6aac382dbaff53ae03c4b23a70e80a\",\n                \"sha256:abfb7d4a7cd5cc4e1d1887c43503a7c5dd608eadf8bc615413fc498d3e4645cd\",\n                \"sha256:ae150a63564929c675d7f2303008d88426a0add46efd76c3fc797cd71cb1b46f\",\n                \"sha256:b0f85904f73161817b80781cc150f8b906d521fa11e3cdabae19a581c3606209\",\n                \"sha256:b4a849d10f211389502059c33332e91327bc154acc1845f375a99eca3afa802d\",\n                \"sha256:c15582f9055fbc1bfe50266a19771bbbef33dd28c45e78afbe1996fd70966c2a\",\n                \"sha256:c230c0d8a322276d6e7b88c3f7ce885f9ed16e0910354510e0bae84d54991143\",\n                \"sha256:cc1dde4e50a5fc1336ee0581c1612215bc64ed6d28d2c7c6f25d2fe3e7c3e918\",\n                \"sha256:cf135c46099ff3f919d2150a948ce94b9ce545598ef2c6c7bf55dca98a304b52\",\n                \"sha256:cfc83c0678b6ba51b0532bea66860617c4cd4251ecf76e9846fa5a9f3454e97e\",\n                \"sha256:d2a5ebb48958754d386195fe9e9c5106f11275867051bf017a8059410e9abf1f\",\n                \"sha256:d71e69699498b020ea198468e2480a2f1e7433e32a3a99760058c6520e2bea7e\",\n                \"sha256:d75ae19d2a3dbb146b6f324031c24f8a3f52ff5d6a9f22f0683694b3afcb16fb\",\n                \"sha256:dfe2507b8ef209da71b6fb5f4e597b50c5a34b78d7e857c4f8f3115effaef5fe\",\n                \"sha256:e0cfe895a504c060e5d36b287ee696e2fdad02d89e0d895f83037245218a87fe\",\n                \"sha256:e79e999e539872e903767c417c897e729e015872040e56b96e67968c3b918b2d\",\n                \"sha256:ecbbc51391248116c0a055899e6c3e7ffbb11fb5e2a4cd6f2d0b93272118a209\",\n                \"sha256:f4a2b50e2b03d5776e7f21af73e2070e1b5c0d0df255a827e7c632962f8315af\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==1.10.7\"\n        },\n        \"requests\": {\n            \"hashes\": [\n                \"sha256:64299f4909223da747622c030b781c0d7811e359c37124b4bd368fb8c6518baa\",\n                \"sha256:98b1b2782e3c6c4904938b84c0eb932721069dfdb9134313beff7c83c2df24bf\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==2.28.2\"\n        },\n        \"typing-extensions\": {\n            \"hashes\": [\n                \"sha256:5cb5f4a79139d699607b3ef622a1dedafa84e115ab0024e0d9c044a9479ca7cb\",\n                \"sha256:fb33085c39dd998ac16d1431ebc293a8b3eedd00fd4a32de0ff79002c19511b4\"\n            ],\n            \"markers\": \"python_version >= '3.7'\",\n            \"version\": \"==4.5.0\"\n        },\n        \"urllib3\": {\n            \"hashes\": [\n                \"sha256:8a388717b9476f934a21484e8c8e61875ab60644d29b9b39e11e4b9dc1c6b305\",\n                \"sha256:aa751d169e23c7479ce47a0cb0da579e3ede798f994f5816a74e4f4500dcea42\"\n            ],\n            \"markers\": \"python_version >= '2.7' and python_version not in '3.0, 3.1, 3.2, 3.3, 3.4, 3.5'\",\n            \"version\": \"==1.26.15\"\n        }\n    },\n    \"develop\": {\n        \"cfgv\": {\n            \"hashes\": [\n                \"sha256:c6a0883f3917a037485059700b9e75da2464e6c27051014ad85ba6aaa5884426\",\n                \"sha256:f5a830efb9ce7a445376bb66ec94c638a9787422f96264c98edc6bdeed8ab736\"\n            ],\n            \"markers\": \"python_full_version >= '3.6.1'\",\n            \"version\": \"==3.3.1\"\n        },\n        \"distlib\": {\n            \"hashes\": [\n                \"sha256:14bad2d9b04d3a36127ac97f30b12a19268f211063d8f8ee4f47108896e11b46\",\n                \"sha256:f35c4b692542ca110de7ef0bea44d73981caeb34ca0b9b6b2e6d7790dda8f80e\"\n            ],\n            \"version\": \"==0.3.6\"\n        },\n        \"filelock\": {\n            \"hashes\": [\n                \"sha256:892be14aa8efc01673b5ed6589dbccb95f9a8596f0507e232626155495c18105\",\n                \"sha256:bde48477b15fde2c7e5a0713cbe72721cb5a5ad32ee0b8f419907960b9d75536\"\n            ],\n            \"markers\": \"python_version >= '3.7'\",\n            \"version\": \"==3.10.7\"\n        },\n        \"identify\": {\n            \"hashes\": [\n                \"sha256:f0faad595a4687053669c112004178149f6c326db71ee999ae4636685753ad2f\",\n                \"sha256:f7a93d6cf98e29bd07663c60728e7a4057615068d7a639d132dc883b2d54d31e\"\n            ],\n            \"markers\": \"python_version >= '3.7'\",\n            \"version\": \"==2.5.22\"\n        },\n        \"nodeenv\": {\n            \"hashes\": [\n                \"sha256:27083a7b96a25f2f5e1d8cb4b6317ee8aeda3bdd121394e5ac54e498028a042e\",\n                \"sha256:e0e7f7dfb85fc5394c6fe1e8fa98131a2473e04311a45afb6508f7cf1836fa2b\"\n            ],\n            \"markers\": \"python_version >= '2.7' and python_version not in '3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6'\",\n            \"version\": \"==1.7.0\"\n        },\n        \"platformdirs\": {\n            \"hashes\": [\n                \"sha256:d5b638ca397f25f979350ff789db335903d7ea010ab28903f57b27e1b16c2b08\",\n                \"sha256:ebe11c0d7a805086e99506aa331612429a72ca7cd52a1f0d277dc4adc20cb10e\"\n            ],\n            \"markers\": \"python_version >= '3.7'\",\n            \"version\": \"==3.2.0\"\n        },\n        \"pre-commit\": {\n            \"hashes\": [\n                \"sha256:a06a7fcce7f420047a71213c175714216498b49ebc81fe106f7716ca265f5bb6\",\n                \"sha256:b5aee7d75dbba21ee161ba641b01e7ae10c5b91967ebf7b2ab0dfae12d07e1f1\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==3.2.1\"\n        },\n        \"pyyaml\": {\n            \"hashes\": [\n                \"sha256:01b45c0191e6d66c470b6cf1b9531a771a83c1c4208272ead47a3ae4f2f603bf\",\n                \"sha256:0283c35a6a9fbf047493e3a0ce8d79ef5030852c51e9d911a27badfde0605293\",\n                \"sha256:055d937d65826939cb044fc8c9b08889e8c743fdc6a32b33e2390f66013e449b\",\n                \"sha256:07751360502caac1c067a8132d150cf3d61339af5691fe9e87803040dbc5db57\",\n                \"sha256:0b4624f379dab24d3725ffde76559cff63d9ec94e1736b556dacdfebe5ab6d4b\",\n                \"sha256:0ce82d761c532fe4ec3f87fc45688bdd3a4c1dc5e0b4a19814b9009a29baefd4\",\n                \"sha256:1e4747bc279b4f613a09eb64bba2ba602d8a6664c6ce6396a4d0cd413a50ce07\",\n                \"sha256:213c60cd50106436cc818accf5baa1aba61c0189ff610f64f4a3e8c6726218ba\",\n                \"sha256:231710d57adfd809ef5d34183b8ed1eeae3f76459c18fb4a0b373ad56bedcdd9\",\n                \"sha256:277a0ef2981ca40581a47093e9e2d13b3f1fbbeffae064c1d21bfceba2030287\",\n                \"sha256:2cd5df3de48857ed0544b34e2d40e9fac445930039f3cfe4bcc592a1f836d513\",\n                \"sha256:40527857252b61eacd1d9af500c3337ba8deb8fc298940291486c465c8b46ec0\",\n                \"sha256:432557aa2c09802be39460360ddffd48156e30721f5e8d917f01d31694216782\",\n                \"sha256:473f9edb243cb1935ab5a084eb238d842fb8f404ed2193a915d1784b5a6b5fc0\",\n                \"sha256:48c346915c114f5fdb3ead70312bd042a953a8ce5c7106d5bfb1a5254e47da92\",\n                \"sha256:50602afada6d6cbfad699b0c7bb50d5ccffa7e46a3d738092afddc1f9758427f\",\n                \"sha256:68fb519c14306fec9720a2a5b45bc9f0c8d1b9c72adf45c37baedfcd949c35a2\",\n                \"sha256:77f396e6ef4c73fdc33a9157446466f1cff553d979bd00ecb64385760c6babdc\",\n                \"sha256:81957921f441d50af23654aa6c5e5eaf9b06aba7f0a19c18a538dc7ef291c5a1\",\n                \"sha256:819b3830a1543db06c4d4b865e70ded25be52a2e0631ccd2f6a47a2822f2fd7c\",\n                \"sha256:897b80890765f037df3403d22bab41627ca8811ae55e9a722fd0392850ec4d86\",\n                \"sha256:98c4d36e99714e55cfbaaee6dd5badbc9a1ec339ebfc3b1f52e293aee6bb71a4\",\n                \"sha256:9df7ed3b3d2e0ecfe09e14741b857df43adb5a3ddadc919a2d94fbdf78fea53c\",\n                \"sha256:9fa600030013c4de8165339db93d182b9431076eb98eb40ee068700c9c813e34\",\n                \"sha256:a80a78046a72361de73f8f395f1f1e49f956c6be882eed58505a15f3e430962b\",\n                \"sha256:afa17f5bc4d1b10afd4466fd3a44dc0e245382deca5b3c353d8b757f9e3ecb8d\",\n                \"sha256:b3d267842bf12586ba6c734f89d1f5b871df0273157918b0ccefa29deb05c21c\",\n                \"sha256:b5b9eccad747aabaaffbc6064800670f0c297e52c12754eb1d976c57e4f74dcb\",\n                \"sha256:bfaef573a63ba8923503d27530362590ff4f576c626d86a9fed95822a8255fd7\",\n                \"sha256:c5687b8d43cf58545ade1fe3e055f70eac7a5a1a0bf42824308d868289a95737\",\n                \"sha256:cba8c411ef271aa037d7357a2bc8f9ee8b58b9965831d9e51baf703280dc73d3\",\n                \"sha256:d15a181d1ecd0d4270dc32edb46f7cb7733c7c508857278d3d378d14d606db2d\",\n                \"sha256:d4b0ba9512519522b118090257be113b9468d804b19d63c71dbcf4a48fa32358\",\n                \"sha256:d4db7c7aef085872ef65a8fd7d6d09a14ae91f691dec3e87ee5ee0539d516f53\",\n                \"sha256:d4eccecf9adf6fbcc6861a38015c2a64f38b9d94838ac1810a9023a0609e1b78\",\n                \"sha256:d67d839ede4ed1b28a4e8909735fc992a923cdb84e618544973d7dfc71540803\",\n                \"sha256:daf496c58a8c52083df09b80c860005194014c3698698d1a57cbcfa182142a3a\",\n                \"sha256:dbad0e9d368bb989f4515da330b88a057617d16b6a8245084f1b05400f24609f\",\n                \"sha256:e61ceaab6f49fb8bdfaa0f92c4b57bcfbea54c09277b1b4f7ac376bfb7a7c174\",\n                \"sha256:f84fbc98b019fef2ee9a1cb3ce93e3187a6df0b2538a651bfb890254ba9f90b5\"\n            ],\n            \"markers\": \"python_version >= '3.6'\",\n            \"version\": \"==6.0\"\n        },\n        \"setuptools\": {\n            \"hashes\": [\n                \"sha256:2ee892cd5f29f3373097f5a814697e397cf3ce313616df0af11231e2ad118077\",\n                \"sha256:b78aaa36f6b90a074c1fa651168723acbf45d14cb1196b6f02c0fd07f17623b2\"\n            ],\n            \"markers\": \"python_version >= '3.7'\",\n            \"version\": \"==67.6.0\"\n        },\n        \"virtualenv\": {\n            \"hashes\": [\n                \"sha256:31712f8f2a17bd06234fa97fdf19609e789dd4e3e4bf108c3da71d710651adbc\",\n                \"sha256:f50e3e60f990a0757c9b68333c9fdaa72d7188caa417f96af9e52407831a3b68\"\n            ],\n            \"markers\": \"python_version >= '3.7'\",\n            \"version\": \"==20.21.0\"\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Pipfile.lock b/Pipfile.lock
--- a/Pipfile.lock	(revision 752a1bb3c253895076360ab860b538313d39c9f6)
+++ b/Pipfile.lock	(date 1680037651933)
@@ -1,7 +1,7 @@
 {
     "_meta": {
         "hash": {
-            "sha256": "32c44bb82b120cd058ab82ed796c211051438e1c064836e91f756955a7070ddf"
+            "sha256": "e977086181e9d369ed03e2718539947ab9591f782313fe9da659dc6252207923"
         },
         "pipfile-spec": 6,
         "requires": {
@@ -16,6 +16,14 @@
         ]
     },
     "default": {
+        "attrs": {
+            "hashes": [
+                "sha256:29e95c7f6778868dbd49170f98f8818f78f3dc5e0e37c0b1f474e3561b240836",
+                "sha256:c9227bfc2f01993c03f68db37d1d15c9690188323c067c641f1a35ca58185f99"
+            ],
+            "markers": "python_version >= '3.6'",
+            "version": "==22.2.0"
+        },
         "certifi": {
             "hashes": [
                 "sha256:35824b4c3a97115964b408844d64aa14db1cc518f6562e8d7261699d1350a9e3",
@@ -113,6 +121,30 @@
             "markers": "python_version >= '3.5'",
             "version": "==3.4"
         },
+        "iniconfig": {
+            "hashes": [
+                "sha256:2d91e135bf72d31a410b17c16da610a82cb55f6b0477d1a902134b24a455b8b3",
+                "sha256:b6a85871a79d2e3b22d2d1b94ac2824226a63c6b741c88f7ae975f18b6778374"
+            ],
+            "markers": "python_version >= '3.7'",
+            "version": "==2.0.0"
+        },
+        "packaging": {
+            "hashes": [
+                "sha256:714ac14496c3e68c99c29b00845f7a2b85f3bb6f1078fd9f72fd20f0570002b2",
+                "sha256:b6ad297f8907de0fa2fe1ccbd26fdaf387f5f47c7275fedf8cce89f99446cf97"
+            ],
+            "markers": "python_version >= '3.7'",
+            "version": "==23.0"
+        },
+        "pluggy": {
+            "hashes": [
+                "sha256:4224373bacce55f955a878bf9cfa763c1e360858e330072059e10bad68531159",
+                "sha256:74134bbf457f031a36d68416e1509f34bd5ccc019f0bcc952c7b909d06b37bd3"
+            ],
+            "markers": "python_version >= '3.6'",
+            "version": "==1.0.0"
+        },
         "pydantic": {
             "hashes": [
                 "sha256:01aea3a42c13f2602b7ecbbea484a98169fb568ebd9e247593ea05f01b884b2e",
@@ -155,6 +187,30 @@
             "index": "pypi",
             "version": "==1.10.7"
         },
+        "pytest": {
+            "hashes": [
+                "sha256:130328f552dcfac0b1cec75c12e3f005619dc5f874f0a06e8ff7263f0ee6225e",
+                "sha256:c99ab0c73aceb050f68929bc93af19ab6db0558791c6a0715723abe9d0ade9d4"
+            ],
+            "index": "pypi",
+            "version": "==7.2.2"
+        },
+        "pytest-dotenv": {
+            "hashes": [
+                "sha256:2dc6c3ac6d8764c71c6d2804e902d0ff810fa19692e95fe138aefc9b1aa73732",
+                "sha256:40a2cece120a213898afaa5407673f6bd924b1fa7eafce6bda0e8abffe2f710f"
+            ],
+            "index": "pypi",
+            "version": "==0.5.2"
+        },
+        "python-dotenv": {
+            "hashes": [
+                "sha256:a8df96034aae6d2d50a4ebe8216326c61c3eb64836776504fcca410e5937a3ba",
+                "sha256:f5971a9226b701070a4bf2c38c89e5a3f0d64de8debda981d1db98583009122a"
+            ],
+            "markers": "python_version >= '3.8'",
+            "version": "==1.0.0"
+        },
         "requests": {
             "hashes": [
                 "sha256:64299f4909223da747622c030b781c0d7811e359c37124b4bd368fb8c6518baa",
@@ -284,11 +340,11 @@
         },
         "setuptools": {
             "hashes": [
-                "sha256:2ee892cd5f29f3373097f5a814697e397cf3ce313616df0af11231e2ad118077",
-                "sha256:b78aaa36f6b90a074c1fa651168723acbf45d14cb1196b6f02c0fd07f17623b2"
+                "sha256:257de92a9d50a60b8e22abfcbb771571fde0dbf3ec234463212027a4eeecbe9a",
+                "sha256:e728ca814a823bf7bf60162daf9db95b93d532948c4c0bea762ce62f60189078"
             ],
             "markers": "python_version >= '3.7'",
-            "version": "==67.6.0"
+            "version": "==67.6.1"
         },
         "virtualenv": {
             "hashes": [
Index: ord_mediascout_client/.env.example.env
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ord_mediascout_client/.env.example.env b/ord_mediascout_client/.env.example.env
new file mode 100644
--- /dev/null	(date 1680036052785)
+++ b/ord_mediascout_client/.env.example.env	(date 1680036052785)
@@ -0,0 +1,3 @@
+URL=https://demo.mediascout.ru
+USERNAME=
+PASSWORD=
Index: ord_mediascout_client/tests/test_ping.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ord_mediascout_client/tests/test_ping.py b/ord_mediascout_client/tests/test_ping.py
new file mode 100644
--- /dev/null	(date 1680037872590)
+++ b/ord_mediascout_client/tests/test_ping.py	(date 1680037872590)
@@ -0,0 +1,17 @@
+import pytest
+
+from ord_mediascout_client import ORDMediascoutConfig, ORDMediascoutClient
+
+
+@pytest.fixture
+def client():
+    config = ORDMediascoutConfig()
+    return ORDMediascoutClient(config)
+
+
+def test_ping(client):
+    assert client.ping()
+
+
+def test_ping_auth(client):
+    assert client.ping_auth()
Index: ord_mediascout_client/pytest.ini
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ord_mediascout_client/pytest.ini b/ord_mediascout_client/pytest.ini
new file mode 100644
--- /dev/null	(date 1680037725737)
+++ b/ord_mediascout_client/pytest.ini	(date 1680037725737)
@@ -0,0 +1,3 @@
+[pytest]
+env_files =
+    .env
Index: ord_mediascout_client/config.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from dataclasses import dataclass\n\n\nclass ORDMediascoutConfig(dataclass):\n    url: str\n    username: str\n    password: str\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ord_mediascout_client/config.py b/ord_mediascout_client/config.py
--- a/ord_mediascout_client/config.py	(revision 752a1bb3c253895076360ab860b538313d39c9f6)
+++ b/ord_mediascout_client/config.py	(date 1680037712464)
@@ -1,7 +1,13 @@
-from dataclasses import dataclass
+from pydantic.env_settings import BaseSettings
+from pydantic.fields import Field
+import dotenv
+dotenv.load_dotenv()
 
 
-class ORDMediascoutConfig(dataclass):
-    url: str
-    username: str
-    password: str
+class ORDMediascoutConfig(BaseSettings):
+    class Config:
+        case_sensitive = True
+
+    url: str = Field(..., env='URL')
+    username: str = Field(..., env='USERNAME')
+    password: str = Field(..., env='PASSWORD')
