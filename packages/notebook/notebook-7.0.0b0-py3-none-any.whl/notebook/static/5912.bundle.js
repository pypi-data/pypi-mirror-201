"use strict";(self.webpackChunk_JUPYTERLAB_CORE_OUTPUT=self.webpackChunk_JUPYTERLAB_CORE_OUTPUT||[]).push([[5912],{15912:(e,t,n)=>{n.r(t),n.d(t,{addCommands:()=>w,default:()=>p});var a,r=n(89965),i=n(23450),o=n(3273),s=n(38356),c=n(67040),m=n(41720),l=n(6513),d=n(91300),h=n(98836),u=n(14039),_=n(59542);!function(e){e.copy="terminal:copy",e.createNew="terminal:create-new",e.open="terminal:open",e.refresh="terminal:refresh",e.increaseFont="terminal:increase-font",e.decreaseFont="terminal:decrease-font",e.paste="terminal:paste",e.setTheme="terminal:set-theme",e.shutdown="terminal:shut-down"}(a||(a={}));const g={activate:function(e,t,n,r,o,s,c,m,l){const d=n.load("jupyterlab"),{serviceManager:h,commands:p}=e,f=d.__("Terminal"),T=new i.WidgetTracker({namespace:"terminal"});if(!h.terminals.isAvailable())return console.warn("Disabling terminals plugin because they are not available on the server"),T;s&&s.restore(T,{command:a.createNew,args:e=>({name:e.content.session.name}),name:e=>e.content.session.name});const b={};function I(e){Object.keys(e.composite).forEach((t=>{b[t]=e.composite[t]}))}function v(){T.forEach((e=>function(e){const t=e.content;t&&Object.keys(b).forEach((e=>{t.setOption(e,b[e])}))}(e)))}if(t.load(g.id).then((e=>{I(e),v(),e.changed.connect((()=>{I(e),v()}))})).catch(y.showErrorMessage),null==m||m.themeChanged.connect(((e,t)=>{T.forEach((e=>{const t=e.content;"inherit"===t.getOption("theme")&&t.setOption("theme","inherit")}))})),w(e,T,t,n,b),c){const e=new _.Menu({commands:p});e.title.label=d._p("menu","Terminal Theme"),e.addItem({command:a.setTheme,args:{theme:"inherit",displayName:d.__("Inherit"),isPalette:!1}}),e.addItem({command:a.setTheme,args:{theme:"light",displayName:d.__("Light"),isPalette:!1}}),e.addItem({command:a.setTheme,args:{theme:"dark",displayName:d.__("Dark"),isPalette:!1}}),c.settingsMenu.addGroup([{command:a.increaseFont},{command:a.decreaseFont},{type:"submenu",submenu:e}],40),c.fileMenu.newMenu.addItem({command:a.createNew,rank:20}),c.fileMenu.closeAndCleaners.add({id:a.shutdown,isEnabled:e=>null!==T.currentWidget&&T.has(e)})}return r&&([a.createNew,a.refresh,a.increaseFont,a.decreaseFont].forEach((e=>{r.addItem({command:e,category:f,args:{isPalette:!0}})})),r.addItem({command:a.setTheme,category:f,args:{theme:"inherit",displayName:d.__("Inherit"),isPalette:!0}}),r.addItem({command:a.setTheme,category:f,args:{theme:"light",displayName:d.__("Light"),isPalette:!0}}),r.addItem({command:a.setTheme,category:f,args:{theme:"dark",displayName:d.__("Dark"),isPalette:!0}})),o&&o.add({command:a.createNew,category:d.__("Other"),rank:0}),l&&function(e,t,n){const a=n.load("jupyterlab"),r=t.serviceManager.terminals;class i{constructor(e){this._model=e}open(){t.commands.execute("terminal:open",{name:this._model.name})}icon(){return u.terminalIcon}label(){return`terminals/${this._model.name}`}shutdown(){return r.shutdown(this._model.name)}}e.add({name:a.__("Terminals"),running:()=>Array.from(r.running()).map((e=>new i(e))),shutdownAll:()=>r.shutdownAll(),refreshRunning:()=>r.refreshRunning(),runningChanged:r.runningChanged,shutdownLabel:a.__("Shut Down"),shutdownAllLabel:a.__("Shut Down All"),shutdownAllConfirmationText:a.__("Are you sure you want to permanently shut down all running terminals?")})}(l,e,n),T},id:"@jupyterlab/terminal-extension:plugin",provides:d.ITerminalTracker,requires:[l.ISettingRegistry,h.ITranslator],optional:[i.ICommandPalette,o.ILauncher,r.ILayoutRestorer,s.IMainMenu,i.IThemeManager,c.IRunningSessionManagers],autoStart:!0},p=g;function w(e,t,n,r,o){const s=r.load("jupyterlab"),{commands:c,serviceManager:l}=e,h=()=>null!==t.currentWidget&&t.currentWidget===e.shell.currentWidget;c.addCommand(a.createNew,{label:e=>e.isPalette?s.__("New Terminal"):s.__("Terminal"),caption:s.__("Start a new terminal session"),icon:e=>e.isPalette?void 0:u.terminalIcon,execute:async n=>{const a=n.name,s=n.cwd;let c;c=a?(await m.TerminalAPI.listRunning()).map((e=>e.name)).includes(a)?l.terminals.connectTo({model:{name:a}}):await l.terminals.startNew({name:a,cwd:s}):await l.terminals.startNew({cwd:s});const h=new d.Terminal(c,o,r);h.title.icon=u.terminalIcon,h.title.label="...";const _=new i.MainAreaWidget({content:h,reveal:h.ready});return e.shell.add(_,"main",{type:"Terminal"}),t.add(_),e.shell.activateById(_.id),_}}),c.addCommand(a.open,{label:s.__("Open a terminal by its `name`."),execute:n=>{const r=n.name,i=t.find((e=>e.content.session.name===r||!1));if(!i)return c.execute(a.createNew,{name:r});e.shell.activateById(i.id)}}),c.addCommand(a.refresh,{label:s.__("Refresh Terminal"),caption:s.__("Refresh the current terminal session"),execute:async()=>{const n=t.currentWidget;if(n){e.shell.activateById(n.id);try{await n.content.refresh(),n&&n.content.activate()}catch(e){y.showErrorMessage(e)}}},icon:e=>e.isPalette?void 0:u.refreshIcon.bindprops({stylesheet:"menuItem"}),isEnabled:h}),c.addCommand(a.copy,{execute:()=>{var e;const n=null===(e=t.currentWidget)||void 0===e?void 0:e.content;if(!n)return;const a=n.getSelection();a&&i.Clipboard.copyToSystem(a)},isEnabled:()=>{var e;if(!h())return!1;const n=null===(e=t.currentWidget)||void 0===e?void 0:e.content;return!!n&&n.hasSelection()},icon:u.copyIcon.bindprops({stylesheet:"menuItem"}),label:s.__("Copy")}),c.addCommand(a.paste,{execute:async()=>{var e;const n=null===(e=t.currentWidget)||void 0===e?void 0:e.content;if(!n)return;const a=window.navigator.clipboard,r=await a.readText();r&&n.paste(r)},isEnabled:()=>{var e;return Boolean(h()&&(null===(e=t.currentWidget)||void 0===e?void 0:e.content))},icon:u.pasteIcon.bindprops({stylesheet:"menuItem"}),label:s.__("Paste")}),c.addCommand(a.shutdown,{label:s.__("Shutdown Terminal"),execute:()=>{const e=t.currentWidget;if(e)return e.content.session.shutdown()},isEnabled:h}),c.addCommand(a.increaseFont,{label:s.__("Increase Terminal Font Size"),execute:async()=>{const{fontSize:e}=o;if(e&&e<72)try{await n.set(g.id,"fontSize",e+1)}catch(e){y.showErrorMessage(e)}}}),c.addCommand(a.decreaseFont,{label:s.__("Decrease Terminal Font Size"),execute:async()=>{const{fontSize:e}=o;if(e&&e>9)try{await n.set(g.id,"fontSize",e-1)}catch(e){y.showErrorMessage(e)}}});const _={inherit:s.__("Inherit"),light:s.__("Light"),dark:s.__("Dark")};c.addCommand(a.setTheme,{label:e=>{if(void 0===e.theme)return s.__("Set terminal theme to the provided `theme`.");const t=e.theme,n=t in _?_[t]:s.__(t[0].toUpperCase()+t.slice(1));return e.isPalette?s.__("Use Terminal Theme: %1",n):n},caption:s.__("Set the terminal theme"),isToggled:e=>{const{theme:t}=o;return e.theme===t},execute:async e=>{const t=e.theme;try{await n.set(g.id,"theme",t),c.notifyCommandChanged(a.setTheme)}catch(e){console.log(e),y.showErrorMessage(e)}}})}var y;!function(e){e.showErrorMessage=function(e){console.error(`Failed to configure ${g.id}: ${e.message}`)}}(y||(y={}))}}]);