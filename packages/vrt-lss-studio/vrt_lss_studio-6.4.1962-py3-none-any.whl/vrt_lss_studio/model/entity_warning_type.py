"""
    VRt.Studio [ST]

    The version of the OpenAPI document: 6.4.1962
    Contact: servicedesk@veeroute.com
    Auto Generated
"""


import re  # noqa: F401
import sys  # noqa: F401

from vrt_lss_studio.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from vrt_lss_studio.exceptions import ApiAttributeError



class EntityWarningType(ModelSimple):
    """NOTE: This class is auto generated by OpenAPI Generator.

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('value',): {
            'NO_AVAILABLE_TRANSPORT': "NO_AVAILABLE_TRANSPORT",
            'NO_AVAILABLE_PERFORMER': "NO_AVAILABLE_PERFORMER",
            'NO_COMPATIBLE_TRANSPORT': "NO_COMPATIBLE_TRANSPORT",
            'NO_COMPATIBLE_PERFORMER': "NO_COMPATIBLE_PERFORMER",
            'PICKUP_AND_DROP_VIOLATION_PRECEDENCE_IN_ORDER': "PICKUP_AND_DROP_VIOLATION_PRECEDENCE_IN_ORDER",
            'PICKUP_AND_DROP_VIOLATION_PRECEDENCE_IN_TRIP': "PICKUP_AND_DROP_VIOLATION_PRECEDENCE_IN_TRIP",
            'VIOLATION_PRECEDENCE_IN_TRIP_AND_ORDER': "VIOLATION_PRECEDENCE_IN_TRIP_AND_ORDER",
            'TIME_WINDOW_VIOLATION': "TIME_WINDOW_VIOLATION",
            'ORDER_WINDOWS_INTERSECTION_VIOLATION': "ORDER_WINDOWS_INTERSECTION_VIOLATION",
            'PERFORMER_SHIFTS_INTERSECTION_VIOLATION': "PERFORMER_SHIFTS_INTERSECTION_VIOLATION",
            'TRANSPORT_SHIFTS_INTERSECTION_VIOLATION': "TRANSPORT_SHIFTS_INTERSECTION_VIOLATION",
            'LOCATION_WINDOWS_INTERSECTION_VIOLATION': "LOCATION_WINDOWS_INTERSECTION_VIOLATION",
            'INVALID_LOCATION_DURATIONS': "INVALID_LOCATION_DURATIONS",
            'NO_TRANSPORT_BOXES': "NO_TRANSPORT_BOXES",
            'MAX_CAPACITY_VIOLATION': "MAX_CAPACITY_VIOLATION",
            'MAX_BOXES_VIOLATION': "MAX_BOXES_VIOLATION",
            'TOO_MANY_CARGOS_FOR_DROP_VIOLATION': "TOO_MANY_CARGOS_FOR_DROP_VIOLATION",
            'EMPTY_CARGOES_LIST': "EMPTY_CARGOES_LIST",
            'GEODATA_TIME_WINDOW_VIOLATION': "GEODATA_TIME_WINDOW_VIOLATION",
            'SHIFT_RESTRICTIONS_COULD_BE_MORE_PRECISE': "SHIFT_RESTRICTIONS_COULD_BE_MORE_PRECISE",
            'DURATION_DOES_NOT_FIT_INTO_HARD_WINDOW': "DURATION_DOES_NOT_FIT_INTO_HARD_WINDOW",
            'DURATION_DOES_NOT_FIT_INTO_SOFT_WINDOW': "DURATION_DOES_NOT_FIT_INTO_SOFT_WINDOW",
        },
    }

    validations = {
    }

    additional_properties_type = None

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
            'value': (str,),
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {}

    read_only_vars = set()

    _composed_schemas = None

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):
        """EntityWarningType - a model defined in OpenAPI

        Note that value can be passed either in args or in kwargs, but not in both.

        Args:
            args[0] (str): Warning type:   * `NO_AVAILABLE_TRANSPORT` - the order cannot be fulfilled, since there is no available (by shift limitations) transport   * `NO_AVAILABLE_PERFORMER` - the order cannot be fulfilled, since there is not a single available (by shift limitations) performer   * `NO_COMPATIBLE_TRANSPORT` - the order cannot be completed, since there is not a single compatible (in terms of capacity and \\ or compatibility tags) transport   * `NO_COMPATIBLE_PERFORMER` - the order cannot be completed, since there is not a single compatible (by compatibility tags) performer   * `PICKUP_AND_DROP_VIOLATION_PRECEDENCE_IN_ORDER` - for each cargo within the order there must be exactly one loading and exactly one unloading (` precedence_in_order`)   * `PICKUP_AND_DROP_VIOLATION_PRECEDENCE_IN_TRIP` - conflicting requirements for the precedence of orders were specified (` precedence_in_trip`)   * `VIOLATION_PRECEDENCE_IN_TRIP_AND_ORDER` - requirements for the precedence of orders in the trip (`precedence_in_trip`) and in the order (` precedence_in_order`) contradict each other   * `TIME_WINDOW_VIOLATION` - the start time of the time window is later than the end time of the window   * `ORDER_WINDOWS_INTERSECTION_VIOLATION` - soft windows should not go beyond the boundaries of the hard window   * `PERFORMER_SHIFTS_INTERSECTION_VIOLATION` - performer's work shifts should not intersect   * `TRANSPORT_SHIFTS_INTERSECTION_VIOLATION` - transport's work shifts should not intersect   * `LOCATION_WINDOWS_INTERSECTION_VIOLATION` - time ranges of working windows of locations should not intersect   * `INVALID_LOCATION_DURATIONS` - location has a working window that is less than the sum of the times `arrival + departure`   * `NO_TRANSPORT_BOXES` - if there are orders with cargo, then the transport must have at least one box   * `MAX_CAPACITY_VIOLATION` - `max_capacity` limit exceeds the total capacity of all boxes or set for only one box or less than the capacity of some box   * `MAX_BOXES_VIOLATION` - limit `max_boxes` is greater than or equal to the total number of boxes or specified for one box or equal to zero   * `TOO_MANY_CARGOS_FOR_DROP_VIOLATION` - the number of loads for an order of the` DROP` type must be no more than one   * `EMPTY_CARGOES_LIST` - empty list of loads for orders of type` DROP` / `PICKUP`   * `GEODATA_TIME_WINDOW_VIOLATION` - the planning horizon exceeds the maximum available value   * `SHIFT_RESTRICTIONS_COULD_BE_MORE_PRECISE` - the working window `working_window` of the change of the artist does not lie entirely inside the window of availability `availability_window`   * `DURATION_DOES_NOT_FIT_INTO_HARD_WINDOW` - the duration of the event does not fit into the hard time window   * `DURATION_DOES_NOT_FIT_INTO_SOFT_WINDOW` - the duration of the event does not fit into the soft time window ., must be one of ["NO_AVAILABLE_TRANSPORT", "NO_AVAILABLE_PERFORMER", "NO_COMPATIBLE_TRANSPORT", "NO_COMPATIBLE_PERFORMER", "PICKUP_AND_DROP_VIOLATION_PRECEDENCE_IN_ORDER", "PICKUP_AND_DROP_VIOLATION_PRECEDENCE_IN_TRIP", "VIOLATION_PRECEDENCE_IN_TRIP_AND_ORDER", "TIME_WINDOW_VIOLATION", "ORDER_WINDOWS_INTERSECTION_VIOLATION", "PERFORMER_SHIFTS_INTERSECTION_VIOLATION", "TRANSPORT_SHIFTS_INTERSECTION_VIOLATION", "LOCATION_WINDOWS_INTERSECTION_VIOLATION", "INVALID_LOCATION_DURATIONS", "NO_TRANSPORT_BOXES", "MAX_CAPACITY_VIOLATION", "MAX_BOXES_VIOLATION", "TOO_MANY_CARGOS_FOR_DROP_VIOLATION", "EMPTY_CARGOES_LIST", "GEODATA_TIME_WINDOW_VIOLATION", "SHIFT_RESTRICTIONS_COULD_BE_MORE_PRECISE", "DURATION_DOES_NOT_FIT_INTO_HARD_WINDOW", "DURATION_DOES_NOT_FIT_INTO_SOFT_WINDOW", ]  

        Keyword Args:
            value (str): Warning type:   * `NO_AVAILABLE_TRANSPORT` - the order cannot be fulfilled, since there is no available (by shift limitations) transport   * `NO_AVAILABLE_PERFORMER` - the order cannot be fulfilled, since there is not a single available (by shift limitations) performer   * `NO_COMPATIBLE_TRANSPORT` - the order cannot be completed, since there is not a single compatible (in terms of capacity and \\ or compatibility tags) transport   * `NO_COMPATIBLE_PERFORMER` - the order cannot be completed, since there is not a single compatible (by compatibility tags) performer   * `PICKUP_AND_DROP_VIOLATION_PRECEDENCE_IN_ORDER` - for each cargo within the order there must be exactly one loading and exactly one unloading (` precedence_in_order`)   * `PICKUP_AND_DROP_VIOLATION_PRECEDENCE_IN_TRIP` - conflicting requirements for the precedence of orders were specified (` precedence_in_trip`)   * `VIOLATION_PRECEDENCE_IN_TRIP_AND_ORDER` - requirements for the precedence of orders in the trip (`precedence_in_trip`) and in the order (` precedence_in_order`) contradict each other   * `TIME_WINDOW_VIOLATION` - the start time of the time window is later than the end time of the window   * `ORDER_WINDOWS_INTERSECTION_VIOLATION` - soft windows should not go beyond the boundaries of the hard window   * `PERFORMER_SHIFTS_INTERSECTION_VIOLATION` - performer's work shifts should not intersect   * `TRANSPORT_SHIFTS_INTERSECTION_VIOLATION` - transport's work shifts should not intersect   * `LOCATION_WINDOWS_INTERSECTION_VIOLATION` - time ranges of working windows of locations should not intersect   * `INVALID_LOCATION_DURATIONS` - location has a working window that is less than the sum of the times `arrival + departure`   * `NO_TRANSPORT_BOXES` - if there are orders with cargo, then the transport must have at least one box   * `MAX_CAPACITY_VIOLATION` - `max_capacity` limit exceeds the total capacity of all boxes or set for only one box or less than the capacity of some box   * `MAX_BOXES_VIOLATION` - limit `max_boxes` is greater than or equal to the total number of boxes or specified for one box or equal to zero   * `TOO_MANY_CARGOS_FOR_DROP_VIOLATION` - the number of loads for an order of the` DROP` type must be no more than one   * `EMPTY_CARGOES_LIST` - empty list of loads for orders of type` DROP` / `PICKUP`   * `GEODATA_TIME_WINDOW_VIOLATION` - the planning horizon exceeds the maximum available value   * `SHIFT_RESTRICTIONS_COULD_BE_MORE_PRECISE` - the working window `working_window` of the change of the artist does not lie entirely inside the window of availability `availability_window`   * `DURATION_DOES_NOT_FIT_INTO_HARD_WINDOW` - the duration of the event does not fit into the hard time window   * `DURATION_DOES_NOT_FIT_INTO_SOFT_WINDOW` - the duration of the event does not fit into the soft time window ., must be one of ["NO_AVAILABLE_TRANSPORT", "NO_AVAILABLE_PERFORMER", "NO_COMPATIBLE_TRANSPORT", "NO_COMPATIBLE_PERFORMER", "PICKUP_AND_DROP_VIOLATION_PRECEDENCE_IN_ORDER", "PICKUP_AND_DROP_VIOLATION_PRECEDENCE_IN_TRIP", "VIOLATION_PRECEDENCE_IN_TRIP_AND_ORDER", "TIME_WINDOW_VIOLATION", "ORDER_WINDOWS_INTERSECTION_VIOLATION", "PERFORMER_SHIFTS_INTERSECTION_VIOLATION", "TRANSPORT_SHIFTS_INTERSECTION_VIOLATION", "LOCATION_WINDOWS_INTERSECTION_VIOLATION", "INVALID_LOCATION_DURATIONS", "NO_TRANSPORT_BOXES", "MAX_CAPACITY_VIOLATION", "MAX_BOXES_VIOLATION", "TOO_MANY_CARGOS_FOR_DROP_VIOLATION", "EMPTY_CARGOES_LIST", "GEODATA_TIME_WINDOW_VIOLATION", "SHIFT_RESTRICTIONS_COULD_BE_MORE_PRECISE", "DURATION_DOES_NOT_FIT_INTO_HARD_WINDOW", "DURATION_DOES_NOT_FIT_INTO_SOFT_WINDOW", ]  
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
        """
        # required up here when default value is not given
        _path_to_item = kwargs.pop('_path_to_item', ())

        if 'value' in kwargs:
            value = kwargs.pop('value')
        elif args:
            args = list(args)
            value = args.pop(0)
        else:
            raise ApiTypeError(
                "value is required, but not passed in args or kwargs and doesn't have default",
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)
        self.value = value
        if kwargs:
            raise ApiTypeError(
                "Invalid named arguments=%s passed to %s. Remove those invalid named arguments." % (
                    kwargs,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):
        """EntityWarningType - a model defined in OpenAPI

        Note that value can be passed either in args or in kwargs, but not in both.

        Args:
            args[0] (str): Warning type:   * `NO_AVAILABLE_TRANSPORT` - the order cannot be fulfilled, since there is no available (by shift limitations) transport   * `NO_AVAILABLE_PERFORMER` - the order cannot be fulfilled, since there is not a single available (by shift limitations) performer   * `NO_COMPATIBLE_TRANSPORT` - the order cannot be completed, since there is not a single compatible (in terms of capacity and \\ or compatibility tags) transport   * `NO_COMPATIBLE_PERFORMER` - the order cannot be completed, since there is not a single compatible (by compatibility tags) performer   * `PICKUP_AND_DROP_VIOLATION_PRECEDENCE_IN_ORDER` - for each cargo within the order there must be exactly one loading and exactly one unloading (` precedence_in_order`)   * `PICKUP_AND_DROP_VIOLATION_PRECEDENCE_IN_TRIP` - conflicting requirements for the precedence of orders were specified (` precedence_in_trip`)   * `VIOLATION_PRECEDENCE_IN_TRIP_AND_ORDER` - requirements for the precedence of orders in the trip (`precedence_in_trip`) and in the order (` precedence_in_order`) contradict each other   * `TIME_WINDOW_VIOLATION` - the start time of the time window is later than the end time of the window   * `ORDER_WINDOWS_INTERSECTION_VIOLATION` - soft windows should not go beyond the boundaries of the hard window   * `PERFORMER_SHIFTS_INTERSECTION_VIOLATION` - performer's work shifts should not intersect   * `TRANSPORT_SHIFTS_INTERSECTION_VIOLATION` - transport's work shifts should not intersect   * `LOCATION_WINDOWS_INTERSECTION_VIOLATION` - time ranges of working windows of locations should not intersect   * `INVALID_LOCATION_DURATIONS` - location has a working window that is less than the sum of the times `arrival + departure`   * `NO_TRANSPORT_BOXES` - if there are orders with cargo, then the transport must have at least one box   * `MAX_CAPACITY_VIOLATION` - `max_capacity` limit exceeds the total capacity of all boxes or set for only one box or less than the capacity of some box   * `MAX_BOXES_VIOLATION` - limit `max_boxes` is greater than or equal to the total number of boxes or specified for one box or equal to zero   * `TOO_MANY_CARGOS_FOR_DROP_VIOLATION` - the number of loads for an order of the` DROP` type must be no more than one   * `EMPTY_CARGOES_LIST` - empty list of loads for orders of type` DROP` / `PICKUP`   * `GEODATA_TIME_WINDOW_VIOLATION` - the planning horizon exceeds the maximum available value   * `SHIFT_RESTRICTIONS_COULD_BE_MORE_PRECISE` - the working window `working_window` of the change of the artist does not lie entirely inside the window of availability `availability_window`   * `DURATION_DOES_NOT_FIT_INTO_HARD_WINDOW` - the duration of the event does not fit into the hard time window   * `DURATION_DOES_NOT_FIT_INTO_SOFT_WINDOW` - the duration of the event does not fit into the soft time window ., must be one of ["NO_AVAILABLE_TRANSPORT", "NO_AVAILABLE_PERFORMER", "NO_COMPATIBLE_TRANSPORT", "NO_COMPATIBLE_PERFORMER", "PICKUP_AND_DROP_VIOLATION_PRECEDENCE_IN_ORDER", "PICKUP_AND_DROP_VIOLATION_PRECEDENCE_IN_TRIP", "VIOLATION_PRECEDENCE_IN_TRIP_AND_ORDER", "TIME_WINDOW_VIOLATION", "ORDER_WINDOWS_INTERSECTION_VIOLATION", "PERFORMER_SHIFTS_INTERSECTION_VIOLATION", "TRANSPORT_SHIFTS_INTERSECTION_VIOLATION", "LOCATION_WINDOWS_INTERSECTION_VIOLATION", "INVALID_LOCATION_DURATIONS", "NO_TRANSPORT_BOXES", "MAX_CAPACITY_VIOLATION", "MAX_BOXES_VIOLATION", "TOO_MANY_CARGOS_FOR_DROP_VIOLATION", "EMPTY_CARGOES_LIST", "GEODATA_TIME_WINDOW_VIOLATION", "SHIFT_RESTRICTIONS_COULD_BE_MORE_PRECISE", "DURATION_DOES_NOT_FIT_INTO_HARD_WINDOW", "DURATION_DOES_NOT_FIT_INTO_SOFT_WINDOW", ]  

        Keyword Args:
            value (str): Warning type:   * `NO_AVAILABLE_TRANSPORT` - the order cannot be fulfilled, since there is no available (by shift limitations) transport   * `NO_AVAILABLE_PERFORMER` - the order cannot be fulfilled, since there is not a single available (by shift limitations) performer   * `NO_COMPATIBLE_TRANSPORT` - the order cannot be completed, since there is not a single compatible (in terms of capacity and \\ or compatibility tags) transport   * `NO_COMPATIBLE_PERFORMER` - the order cannot be completed, since there is not a single compatible (by compatibility tags) performer   * `PICKUP_AND_DROP_VIOLATION_PRECEDENCE_IN_ORDER` - for each cargo within the order there must be exactly one loading and exactly one unloading (` precedence_in_order`)   * `PICKUP_AND_DROP_VIOLATION_PRECEDENCE_IN_TRIP` - conflicting requirements for the precedence of orders were specified (` precedence_in_trip`)   * `VIOLATION_PRECEDENCE_IN_TRIP_AND_ORDER` - requirements for the precedence of orders in the trip (`precedence_in_trip`) and in the order (` precedence_in_order`) contradict each other   * `TIME_WINDOW_VIOLATION` - the start time of the time window is later than the end time of the window   * `ORDER_WINDOWS_INTERSECTION_VIOLATION` - soft windows should not go beyond the boundaries of the hard window   * `PERFORMER_SHIFTS_INTERSECTION_VIOLATION` - performer's work shifts should not intersect   * `TRANSPORT_SHIFTS_INTERSECTION_VIOLATION` - transport's work shifts should not intersect   * `LOCATION_WINDOWS_INTERSECTION_VIOLATION` - time ranges of working windows of locations should not intersect   * `INVALID_LOCATION_DURATIONS` - location has a working window that is less than the sum of the times `arrival + departure`   * `NO_TRANSPORT_BOXES` - if there are orders with cargo, then the transport must have at least one box   * `MAX_CAPACITY_VIOLATION` - `max_capacity` limit exceeds the total capacity of all boxes or set for only one box or less than the capacity of some box   * `MAX_BOXES_VIOLATION` - limit `max_boxes` is greater than or equal to the total number of boxes or specified for one box or equal to zero   * `TOO_MANY_CARGOS_FOR_DROP_VIOLATION` - the number of loads for an order of the` DROP` type must be no more than one   * `EMPTY_CARGOES_LIST` - empty list of loads for orders of type` DROP` / `PICKUP`   * `GEODATA_TIME_WINDOW_VIOLATION` - the planning horizon exceeds the maximum available value   * `SHIFT_RESTRICTIONS_COULD_BE_MORE_PRECISE` - the working window `working_window` of the change of the artist does not lie entirely inside the window of availability `availability_window`   * `DURATION_DOES_NOT_FIT_INTO_HARD_WINDOW` - the duration of the event does not fit into the hard time window   * `DURATION_DOES_NOT_FIT_INTO_SOFT_WINDOW` - the duration of the event does not fit into the soft time window ., must be one of ["NO_AVAILABLE_TRANSPORT", "NO_AVAILABLE_PERFORMER", "NO_COMPATIBLE_TRANSPORT", "NO_COMPATIBLE_PERFORMER", "PICKUP_AND_DROP_VIOLATION_PRECEDENCE_IN_ORDER", "PICKUP_AND_DROP_VIOLATION_PRECEDENCE_IN_TRIP", "VIOLATION_PRECEDENCE_IN_TRIP_AND_ORDER", "TIME_WINDOW_VIOLATION", "ORDER_WINDOWS_INTERSECTION_VIOLATION", "PERFORMER_SHIFTS_INTERSECTION_VIOLATION", "TRANSPORT_SHIFTS_INTERSECTION_VIOLATION", "LOCATION_WINDOWS_INTERSECTION_VIOLATION", "INVALID_LOCATION_DURATIONS", "NO_TRANSPORT_BOXES", "MAX_CAPACITY_VIOLATION", "MAX_BOXES_VIOLATION", "TOO_MANY_CARGOS_FOR_DROP_VIOLATION", "EMPTY_CARGOES_LIST", "GEODATA_TIME_WINDOW_VIOLATION", "SHIFT_RESTRICTIONS_COULD_BE_MORE_PRECISE", "DURATION_DOES_NOT_FIT_INTO_HARD_WINDOW", "DURATION_DOES_NOT_FIT_INTO_SOFT_WINDOW", ]  
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
        """
        # required up here when default value is not given
        _path_to_item = kwargs.pop('_path_to_item', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if 'value' in kwargs:
            value = kwargs.pop('value')
        elif args:
            args = list(args)
            value = args.pop(0)
        else:
            raise ApiTypeError(
                "value is required, but not passed in args or kwargs and doesn't have default",
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)
        self.value = value
        if kwargs:
            raise ApiTypeError(
                "Invalid named arguments=%s passed to %s. Remove those invalid named arguments." % (
                    kwargs,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        return self
